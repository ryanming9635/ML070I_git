C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SYSTIMER
OBJECT MODULE PLACED IN .\Output\SysTimer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SysTimer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECT
                    -EXTEND PRINT(.\Listings\SysTimer.lst) TABS(2) OBJECT(.\Output\SysTimer.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  SysTimer.c                                                                */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          
   9          
  10          #include <math.h>
  11          #include <stdio.h>
  12          
  13          #include "Config.h"
  14          
  15          #include "reg.h"
  16          #include "typedefs.h"
  17          #include "main.h"
  18          #include "i2c.h"
  19          #include "adc.h"
  20          #include "etc_eep.h"
  21          #include "Printf.h"
  22          #include "KeyRemo.h"
  23          #include "Monitor.h"
  24          #include "CPU.h"
  25          #include "HS_DVRProtocol.h"
  26          
  27          
  28          //****************************************************************************
  29          // DEFINITIONS / MACROS
  30          //****************************************************************************
  31          #define GET_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid)
  32          #define SET_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid = _TRUE)
  33          #define CLR_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid = _FALSE)
  34          
  35          #define GET_EVENT_ID(x)                         (g_stTimerEvent[x].b7EventID)
  36          #define SET_EVENT_ID(x, y)                      (g_stTimerEvent[x].b7EventID = y)
  37          
  38          #define GET_EVENT_TIME(x)                       (g_stTimerEvent[x].usTime)
  39          #define SET_EVENT_TIME(x, y)                    (g_stTimerEvent[x].usTime = y)
  40          
  41          
  42          //****************************************************************************
  43          // VARIABLE DECLARATIONS
  44          //****************************************************************************
  45          bit g_bNotifyTimer0Int = _FALSE;
  46          volatile WORD  g_usTimerCounter = 0;
  47          StructTimerEventTableType g_stTimerEvent[_TIMER_EVENT_COUNT];
  48          WORD BatteryBTH=549/*156*//*650*//*880*/,BatteryVoltage=880;
  49          BYTE WDT_Echo_Count=0;
  50          BYTE STAT1_temp=OFF, STAT2_temp=ON,STAT1_Flag=OFF,STAT2_Flag=ON;
  51          
  52          BYTE BattDetect1_COUNT=0, BattDetect2_COUNT=0, BattDetect3_COUNT=0, BattDetect4_COUNT=0,BattDetect5_COUNT=
             -0;
  53          BYTE BattDetectMin_COUNT=0, BattDetectHigh_COUNT=0,BattDetectHighStop_COUNT=0,BattDetectNoStartUp_COUNT=0,
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 2   

             -BattDetectStartUp_COUNT=0;
  54          BYTE  BATERY_STAT=0xFF,BATERY_STAT_TEMP=0xFE;
  55          BYTE TEMP_NORMAL_COUNT=0,TEMP_LOW_COUNT=0, TEMP_LOW_WARN_COUNT=0, TEMP_HIGH_COUNT=0,TEMP_HIGH_WARN_COUNT=0
             -;
  56          BYTE TEMP_STAT=0xFF;
  57          BYTE PWM_TEMP=0;  
  58          BYTE CHARGE_TEMP_ABNORMAL=0;
  59          BYTE CHARGE_TEMP_NORMAL=0;
  60          
  61          #if (_DEBUG_MESSAGE_Monitor==ON)
              bit Monitor_flag=OFF;
              #endif
  64          
  65          extern BYTE PowerFlag;
  66          extern BYTE CameraVolt;
  67          extern BYTE PWR_START_flag;
  68          extern StructBatteryInfoType g_stBatteryInfo;
  69          extern BYTE EncorderCountPN;
  70          extern BYTE EncorderLenint;
  71          extern short EncorderCount;
  72          extern WORD EncorderLenfloaat;
  73          extern StructPowerInfoType idata g_stPowerInfo;
  74          extern BYTE day,hour,minute,second;
  75          extern StructDVRInfoType g_stDVRInfo;
  76          extern BYTE Power_down_mode;
  77          
  78          
  79          //--------------------------------------------------
  80          // Definitions of Timer2
  81          //--------------------------------------------------
  82          #define _EVENT_TIME_MAX                         61000 // Please do not modify this value.
  83          
  84          //****************************************************************************
  85          // CODE TABLES
  86          //****************************************************************************
  87          
  88          
  89          //****************************************************************************
  90          // FUNCTION DECLARATIONS
  91          //****************************************************************************
  92          void SysTimerHandler(void);
  93          void SysTimerEventProc(EnumSystemTimerEventID enumEventID);
  94          void MCUTimerInitialTimerEvent(void);
  95          void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID);
  96          void MCUTimerCancelTimerEvent(BYTE ucEventID);
  97          void MCUTimerDelayXms(WORD usNum);
  98          extern WORD GetBatteryBTH(void);
  99          extern WORD GetBatteryVoltage(void);
 100          extern void SetAD5110Step(BYTE newv) ;
 101          extern void UserInterfacePowerSwitch(EnumPowerAction enumSwitch);
 102          extern void SysPowerSwitch(EnumPowerAction enumSwitch);
 103          extern void UserInterfaceBatteryChargeMode(EnumBatteryStatus enumSwitch);
 104          extern void SET_MCU_POWER_DOWN_MODE(void);
 105          
 106          
 107          //****************************************************************************
 108          // FUNCTION DEFINITIONS
 109          //****************************************************************************
 110          //--------------------------------------------------
 111          // Description  : Timer Delay
 112          // Input Value  : usNum --> Delay in ms
 113          // Output Value : None
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 3   

 114          //--------------------------------------------------
 115          void MCUTimerDelayXms(WORD usNum)
 116          {
 117   1          if(usNum)
 118   1          {
 119   2              g_bNotifyTimer0Int = _FALSE;
 120   2      
 121   2              while(_TRUE)
 122   2              {
 123   3                  if(g_bNotifyTimer0Int)
 124   3                  {
 125   4                      g_bNotifyTimer0Int = _FALSE;
 126   4      
 127   4                      if(--usNum)
 128   4                      {
 129   5                      }
 130   4                      else
 131   4                      {
 132   5                          return;
 133   5                      }
 134   4                  }
 135   3              }
 136   2          }
 137   1      }
 138          
 139          //--------------------------------------------------
 140          // Description  : Get Event Time
 141          // Input Value  : ucEventIndex --> Event which time is needed
 142          // Output Value : Event Time
 143          //--------------------------------------------------
 144          WORD MCUTimerGetEventTime(BYTE ucEventIndex)
 145          {
 146   1          return GET_EVENT_TIME(ucEventIndex);
 147   1      }
 148          
 149          //--------------------------------------------------
 150          // Description  : Get Event ID
 151          // Input Value  : Referenced Event Index
 152          // Output Value : Stored Event ID
 153          //--------------------------------------------------
 154          BYTE MCUTimerGetEventID(BYTE ucEventIndex)
 155          {
 156   1          return GET_EVENT_ID(ucEventIndex);
 157   1      }
 158          
 159          //--------------------------------------------------
 160          // Description  : Clear Event Time
 161          // Input Value  : ucEventIndex --> Event which time is needed to be cleared
 162          // Output Value : None
 163          //--------------------------------------------------
 164          
 165          
 166          void MCUTimerClrEventValid(BYTE ucEventIndex)
 167          {
 168   1          CLR_EVENT_VALID(ucEventIndex);
 169   1      }
 170          
 171          //--------------------------------------------------
 172          // Description  : Check if Event is Valid
 173          // Input Value  : ucEventIndex --> Event to be checked
 174          // Output Value : Validity(_TRUE/_FALSE)
 175          //--------------------------------------------------
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 4   

 176          bit MCUTimerCheckEventValid(BYTE ucEventIndex)
 177          {
 178   1          return GET_EVENT_VALID(ucEventIndex);;
 179   1      }
 180          
 181          //--------------------------------------------------
 182          // Description  : Get Timer Counter.
 183          // Input Value  : None
 184          // Output Value : Timer Counter
 185          //--------------------------------------------------
 186          WORD MCUTimerGetTimerCounter(void)
 187          {
 188   1          WORD usPresentTime = g_usTimerCounter;
 189   1         
 190   1          // When get counter,timer interrupt maybe change counter.
 191   1          // Get twice to avoid it.
 192   1          if(abs(g_usTimerCounter - usPresentTime) > 0x7F)
 193   1          {
 194   2              usPresentTime = g_usTimerCounter;
 195   2          } 
 196   1      
 197   1          return usPresentTime;
 198   1      }
 199          //--------------------------------------------------
 200          // Description  : Check timer and events. We have to run this function when setting up a timer for an even
             -t.
 201          // Input Value  : usTime    --> Unit in 1ms, range in 0.001 ~ 61sec
 202          // Output Value : Return usPresentTime
 203          //--------------------------------------------------
 204          WORD MCUTimerCheckTimerEvent(WORD usTime)
 205          {
 206   1          BYTE ucTimerEventCnt = 0;
 207   1          WORD usPresentTime = 0;
 208   1      
 209   1          usPresentTime = MCUTimerGetTimerCounter();
 210   1          
 211   1          if(usTime > _EVENT_TIME_MAX) 
 212   1          {
 213   2              usTime = _EVENT_TIME_MAX;
 214   2          }
 215   1         
 216   1          if(((usPresentTime + usTime) > _EVENT_TIME_MAX) || // Size Limit of Timer Counter             
 217   1             ((usPresentTime + usTime) < usPresentTime)) // Timer Counter Overflow
 218   1          { 
 219   2              g_usTimerCounter = 0;
 220   2          
 221   2              // Reset Timer Event Counter
 222   2              for(ucTimerEventCnt = 0; ucTimerEventCnt < _TIMER_EVENT_COUNT; ucTimerEventCnt++)
 223   2              {
 224   3                  if(GET_EVENT_VALID(ucTimerEventCnt) == _TRUE)
 225   3                  {
 226   4                      if(GET_EVENT_TIME(ucTimerEventCnt) > usPresentTime)
 227   4                      {
 228   5                          SET_EVENT_TIME(ucTimerEventCnt, (GET_EVENT_TIME(ucTimerEventCnt) - usPresentTime));
 229   5                      }
 230   4                      else
 231   4                      {
 232   5                          SET_EVENT_TIME(ucTimerEventCnt, 0);
 233   5                      }
 234   4                  }
 235   3              }
 236   2              
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 5   

 237   2              usPresentTime = 0;
 238   2          }    
 239   1      
 240   1          return usPresentTime;
 241   1      }
 242          
 243          //--------------------------------------------------
 244          // Description  : Initial timer and events. We have to run this function at firmware startup
 245          // Input Value  : None
 246          // Output Value : None
 247          //--------------------------------------------------
 248          void MCUTimerInitialTimerEvent(void)
 249          {
 250   1          BYTE ucTimerEventCnt = 0;
 251   1      
 252   1          for(ucTimerEventCnt = 0; ucTimerEventCnt < _TIMER_EVENT_COUNT; ucTimerEventCnt++)
 253   1          {
 254   2              CLR_EVENT_VALID(ucTimerEventCnt);
 255   2          }
 256   1      
 257   1         // TR2 = 1;
 258   1      }
 259          
 260          //--------------------------------------------------
 261          // Description  : Active Timer Event
 262          // Input Value  : usTime --> Time to active Timer Event
 263          //          ucEventID --> Event to be actived
 264          // Output Value : None
 265          //--------------------------------------------------
 266          void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID)
 267          {
 268   1          BYTE ucEventIndex = 0;
 269   1      
 270   1          // Search for Existing Event with the same Event ID
 271   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 272   1          {
 273   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 274   2              {
 275   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 276   3                  {
 277   4                      return;
 278   4                  }
 279   3              }
 280   2          }
 281   1      
 282   1          // Choose any Vacant Storage for Event
 283   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 284   1          {
 285   2              if(GET_EVENT_VALID(ucEventIndex) == _FALSE)
 286   2              {
 287   3                  SET_EVENT_VALID(ucEventIndex);
 288   3                  SET_EVENT_ID(ucEventIndex, ucEventID);
 289   3                  SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 290   3                  return;
 291   3              }
 292   2          }
 293   1      
 294   1          //Printf("No More Available Storage for Simultaneous Event!!!!!!");
 295   1      }
 296          
 297          //--------------------------------------------------
 298          // Description  : Cancel an event
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 6   

 299          // Input Value  : Event     --> Event which we want to cancel
 300          // Output Value : None
 301          //--------------------------------------------------
 302          void MCUTimerCancelTimerEvent(BYTE ucEventID)
 303          {
 304   1          BYTE ucEventIndex = 0;
 305   1          
 306   1          // Search for Existing Event with the same Event ID
 307   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 308   1          {
 309   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 310   2              {
 311   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 312   3                  {
 313   4                      CLR_EVENT_VALID(ucEventIndex);
 314   4                      return;
 315   4                  }
 316   3              }
 317   2          }      
 318   1      }
 319          
 320          //--------------------------------------------------
 321          // Description  : Reactive a timer for an event. If the event is exist,
 322          //                this function will reset the executing time and restart.
 323          // Input Value  : usTime    --> Unit in 1ms, range in 0.01 ~ 61 sec
 324          //                Event     --> Execute Event while timeup
 325          // Output Value : None
 326          //--------------------------------------------------
 327          void MCUTimerReactiveTimerEvent(WORD usTime, BYTE ucEventID)
 328          {
 329   1          BYTE ucEventIndex = 0;
 330   1      
 331   1          // Search for Existing Event with the same Event ID
 332   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 333   1          {
 334   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 335   2              {
 336   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 337   3                  {
 338   4                      SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 339   4                      return;
 340   4                  }
 341   3              }
 342   2          }    
 343   1      
 344   1          // Choose any Vacant Storage for Event
 345   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 346   1          {
 347   2              if(GET_EVENT_VALID(ucEventIndex) == _FALSE)
 348   2              {
 349   3                  SET_EVENT_VALID(ucEventIndex);
 350   3                  SET_EVENT_ID(ucEventIndex, ucEventID);
 351   3                  SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 352   3                  return;
 353   3              }
 354   2          }   
 355   1      }
 356          
 357          
 358          void UserInterfaceTimerEventProc(BYTE ucEventID)
 359          {
 360   1      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 7   

 361   1      switch(ucEventID)
 362   1      {
 363   2      
 364   2        case _USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_INC:
 365   2            SetAD5110Step(CameraVolt);
 366   2            WriteEEP(EEP_CameraVolt, CameraVolt);  
 367   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    GraphicsPrint(YELLOW,"(CAM_INC %d)",(WORD)(CameraVolt));  
                    #endif
 370   2              break;
 371   2      
 372   2        case _USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_DEC:
 373   2            SetAD5110Step(CameraVolt);  
 374   2            WriteEEP(EEP_CameraVolt, CameraVolt);  
 375   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    GraphicsPrint(YELLOW,"(CAM_DEC %d)",(WORD)(CameraVolt));  
                    #endif
 378   2            break;
 379   2              case _USER_TIMER_EVENT_OSD_SET_CAMERA_VOLTAGE:
 380   2            SetAD5110Step(CameraVolt);  
 381   2            WriteEEP(EEP_CameraVolt, CameraVolt);     
 382   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    GraphicsPrint(MAGENTA,"(CAM_VOLT_LEVEL=%d)",(WORD)(CameraVolt));  
                    #endif
 385   2            break;
 386   2              case _USER_TIMER_EVENT_OSD_GET_MCU_VERSION:
 387   2            MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REPLY_MCU_FW);  
 388   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    GraphicsPrint(YELLOW,"(GET_MCU_VERSION)");  
                    #endif
 391   2            break;
 392   2      
 393   2        case _USER_TIMER_EVENT_OSD_DVR_FACTORY_MODE:
 394   2      
 395   2              if(GET_AC_PLUG()==_TRUE)
 396   2              {
 397   3              MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_ENTRY_FACTORY);     
 398   3              #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                      GraphicsPrint(RED,"(DVR_FACTORY_MODE)");  
                      #endif
 401   3              }
 402   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    else
                      {
                      GraphicsPrint(RED,"(DVR_FACTORY_FAIL)");      
                      }
                    #endif
 408   2            
 409   2            break;
 410   2      
 411   2             case _USER_TIMER_EVENT_OSD_MCU_ENTRY_SLEEP_MODE:
 412   2          
 413   2              if(GET_DVR_EntrySleepMode()==_FALSE)
 414   2              {
 415   3              SET_TARGET_POWER_STATUS(_POWER_STATUS_SAVING);
 416   3              SET_DVR_EntrySleepMode();
 417   3              #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                        GraphicsPrint(YELLOW,"(MCU_NORMAL_TO_SLEEP_MODE)");    
                      #endif        
 420   3              }
 421   2              break;
 422   2      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 8   

 423   2        case _USER_TIMER_EVENT_OSD_DISTANCE_RESET:
 424   2          EncorderCount=0;
 425   2          EncorderLenint=0;
 426   2          EncorderLenfloaat=0;
 427   2          EncorderCountPN=0;
 428   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                  GraphicsPrint(YELLOW,"\r\n ClearEncorder ",0);
                  #endif
 431   2             //Printf("(DISTANCE_RESET)");   
 432   2             break;
 433   2      
 434   2         case _USER_TIMER_EVENT_OSD_DVR_REBOOT:
 435   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                     GraphicsPrint(YELLOW,"(DVR_REBOOT)");  
                     #endif
 438   2              if(GET_DVR_Reboot()==_TRUE) 
 439   2                {
 440   3                CLR_DVR_Reboot();
 441   3                CLR_DVR_SystemReadyNotic();
 442   3                 UserInterfaceBatteryChargeMode(_BATT_STATUS_DVR_OFF);
 443   3                MCUTimerActiveTimerEvent(SEC(3), _USER_TIMER_EVENT_OSD_DVR_REBOOT);
 444   3      
 445   3                P3M1=0x00;//p3.4 and P3.5 set output ryan@20210226
 446   3                }
 447   2              else
 448   2              {
 449   3                 UserInterfaceBatteryChargeMode(_BATT_STATUS_DVR_ON);
 450   3              }
 451   2              break;
 452   2      
 453   2         case _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN:
 454   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                     GraphicsPrint(YELLOW,"(DVR_SHUTDOWN)");  
                    #endif
 457   2            SET_DVR_Shutdown();
 458   2            MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN);
 459   2             MCUTimerActiveTimerEvent(SEC(15), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
 460   2             break;
 461   2      
 462   2            case  _USER_TIMER_EVENT_OSD_DVR_ENTER_ISP_MODE:
 463   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                     GraphicsPrint(YELLOW,"(MCU_ENTER_ISP_MODE)");      
                  #endif
 466   2              enter_isp();
 467   2             break;
 468   2      
 469   2        case _USER_TIMER_EVENT_OSD_ENCODER_DEVIATION_SETTING:     
 470   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                    GraphicsPrint(YELLOW,"(ENCODER_SET)");  
                    #endif
 473   2            break;
 474   2      
 475   2        case _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON:
 476   2          SET_PWCTRL();
 477   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
                  GraphicsPrint(YELLOW,"(Panel_ON)"); 
                  #endif
 480   2             UserInterfacePowerSwitch(_POWER_ACTION_PANEL_POWER_ON);    
 481   2          break;
 482   2      
 483   2        case _USER_TIMER_EVENT_OSD_DVR_STOP_REBOOT:
 484   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 9   

                  GraphicsPrint(YELLOW,"(DVR STOP REBOOT)");  
                  #endif
 487   2          break;
 488   2      
 489   2        #if (_DEBUG_MESSAGE_Monitor==ON)
                case _USER_TIMER_EVENT_Monitor_ON:
                 Monitor_flag=_FALSE;
                  break;
                #endif
 494   2      
 495   2         default:   break;
 496   2         
 497   2      
 498   2      }
 499   1        
 500   1      }
 501          
 502          //--------------------------------------------------
 503          // Description  : Timer Handler
 504          // Input Value  : None
 505          // Output Value : None
 506          //--------------------------------------------------
 507          void SysTimerHandler(void)
 508          {
 509   1          BYTE ucTimerEventIndex = 0;
 510   1          BYTE ucTimerEventID = 0;    
 511   1          WORD usPresentTime = 0;
 512   1      
 513   1          for(ucTimerEventIndex = 0; ucTimerEventIndex < _TIMER_EVENT_COUNT; ucTimerEventIndex++)
 514   1          {
 515   2              usPresentTime = MCUTimerGetTimerCounter();
 516   2      
 517   2              if(MCUTimerCheckEventValid(ucTimerEventIndex) == _FALSE)
 518   2              {
 519   3                  continue;
 520   3              }         
 521   2              
 522   2              if(usPresentTime > MCUTimerGetEventTime(ucTimerEventIndex))
 523   2              {
 524   3                  MCUTimerClrEventValid(ucTimerEventIndex);
 525   3      
 526   3                  // Get Event ID From Event Index
 527   3                  ucTimerEventID = MCUTimerGetEventID(ucTimerEventIndex);
 528   3                  
 529   3                  if(ucTimerEventID < _USER_TIMER_EVENT_END)
 530   3                  {
 531   4                      UserInterfaceTimerEventProc(ucTimerEventID);
 532   4                      
 533   4                      continue;
 534   4                  }
 535   3      
 536   3                  if(ucTimerEventID < _SYSTEM_TIMER_EVENT_END)
 537   3                  {
 538   4                      SysTimerEventProc(ucTimerEventID);
 539   4                      
 540   4                      continue;
 541   4                  }
 542   3                  
 543   3               //   MCUTimerEventProc(ucTimerEventID);
 544   3              }
 545   2          }
 546   1      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 10  

 547   1      }
 548          
 549          //--------------------------------------------------
 550          // Description  : Timer Event Process
 551          // Input Value  : enumEventID --> Event to be processed
 552          // Output Value : None
 553          //--------------------------------------------------
 554          void SysTimerEventProc(EnumSystemTimerEventID enumEventID)
 555          {
 556   1      
 557   1      switch(enumEventID)
 558   1         { 
 559   2         case _SYSTEM_TIMER_EVENT_GRN_RED_OFF:
 560   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 561   2        break;
 562   2      
 563   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF:
 564   2         PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF);
 565   2        break;
 566   2      
 567   2         case _SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON: 
 568   2          PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 569   2        break;
 570   2      
 571   2         case _SYSTEM_TIMER_EVENT_GRN_RED_ON:
 572   2            PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_ON);
 573   2          break;
 574   2      
 575   2         case _SYSTEM_TIMER_EVENT_GRN_BLINK:
 576   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_BLINK);
 577   2           MCUTimerActiveTimerEvent(SEC(0.25), _SYSTEM_TIMER_EVENT_GRN_BLINK);
 578   2          break;
 579   2      
 580   2         case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK:
 581   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_BLINK);
 582   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_2S_BLINK);
 583   2          break;
 584   2      
 585   2         case _SYSTEM_TIMER_EVENT_RED_BLINK:
 586   2           PowerLED(_SYSTEM_TIMER_EVENT_RED_BLINK);
 587   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_RED_BLINK);
 588   2      
 589   2          break;  
 590   2      
 591   2        case _SYSTEM_TIMER_EVENT_GRN_RED_BLINK:
 592   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
 593   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
 594   2      
 595   2         break; 
 596   2      
 597   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK:
 598   2          PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
 599   2          MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
 600   2          break; 
 601   2          break;
 602   2      
 603   2         case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON:
 604   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON);
 605   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON);
 606   2              break;
 607   2       case _SYSTEM_TIMER_EVENT_BATT_LOW_RED_BLINK:
 608   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 11  

 609   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 610   2        MCUTimerDelayXms(500);
 611   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 612   2        MCUTimerDelayXms(500);
 613   2      
 614   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 615   2        MCUTimerDelayXms(500);
 616   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 617   2        MCUTimerDelayXms(500);
 618   2      
 619   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 620   2        MCUTimerDelayXms(500);
 621   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 622   2        MCUTimerDelayXms(500);
 623   2      
 624   2        SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
 625   2        break;
 626   2        
 627   2         case _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE:
 628   2        
 629   2          if(Check_ADAP_IN()==_TRUE)    
 630   2          {
 631   3            
 632   3                  if(GET_AC_PLUG()==_FALSE)
 633   3                  { 
 634   4          
 635   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE)==_TRUE)
 636   4                    {
 637   5                      #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                              GraphicsPrint(BLUE,"(AC1)");
                              #endif  
 640   5      
 641   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  
 642   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE); 
 643   5                    }
 644   4          
 645   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_AC_MODE)==_TRUE)
 646   4                    {
 647   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
 648   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE); 
 649   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(BLUE,"(AC2)");
                            #endif  
 652   5                    }
 653   4          
 654   4                  }
 655   3            
 656   3          }
 657   2          else
 658   2            {
 659   3              if(GET_AC_PLUG()==_TRUE)
 660   3              {
 661   4                    if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE)==_TRUE)
 662   4                    {
 663   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  
 664   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE); 
 665   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(BLUE,"(AC3)");
                            #endif
 668   5                    }
 669   4          
 670   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_AC_MODE)==_TRUE)
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 12  

 671   4                    {
 672   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(BLUE,"(AC4)");
                            #endif  
 675   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
 676   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE); 
 677   5                    }
 678   4              }
 679   3            }
 680   2                
 681   2            MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE);   
 682   2            break;
 683   2       case _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA:
 684   2      
 685   2          if(GET_DVR_SystemReadyNotic()==_TRUE)          
 686   2           MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
 687   2          
 688   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 689   2           
 690   2        break;
 691   2        case _SYSTEM_TIMER_EVENT_POWER_OFF_ON_DELAY:
 692   2              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                      GraphicsPrint(RED,"(CLR_DVR_PowerOFFDelay)");
                      #endif
 695   2            CLR_DVR_PowerOFFDelay();
 696   2          break;
 697   2          case _SYSTEM_TIMER_EVENT_JUDGE_FIRST_GET_BATT_BTH_STATE:
 698   2            #if (_DEBUG_MESSAGE_BATTERY_TEST)
                    #else
 700   2            BatteryVoltage=GetBatteryVoltage();
 701   2      //      BatteryBTH=GetBatteryBTH()+7;
 702   2            BatteryBTH=GetBatteryBTH();
 703   2            #endif
 704   2      
 705   2            if(BatteryVoltage<=BATTERY_CAPACITY_MIN) //<11.6V
 706   2              BATERY_STAT=_BATT_STATUS_CAPACITY_MIN;
 707   2              else if((BatteryVoltage>BATTERY_CAPACITY_MIN)&&(BatteryVoltage<=BATTERY_CAPACITY_NO_STARTUP))
 708   2                BATERY_STAT=_BATT_STATUS_CAPACITY_NO_STARTUP;       
 709   2              else if((BatteryVoltage>BATTERY_CAPACITY_NO_STARTUP)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL0))
 710   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL0;
 711   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL0)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL1))
 712   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL1;
 713   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL1)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL2))
 714   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL2;
 715   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL2)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL3))
 716   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL3;
 717   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL3)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH))
 718   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 719   2              else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH_STOP)&&(PowerFl
             -ag==ON))
 720   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 721   2              else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=(BATTERY_CAPACITY_HIGH_STOP+9))&&(Pow
             -erFlag==OFF))
 722   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 723   2              else          
 724   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX_STOP;
 725   2      
 726   2            SET_BATTERY_STATE(BATERY_STAT);
 727   2          
 728   2            SET_BATTERY_CAPACITY(BatteryVoltage);
 729   2      
 730   2      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 13  

 731   2            if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //High temperature.
 732   2              TEMP_STAT=_BATT_STATUS_TEMP_HIGH;
 733   2              else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
 734   2                TEMP_STAT=_BATT_STATUS_TEMP_HIGH_WARN;
 735   2              else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
 736   2                TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
 737   2              else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
 738   2                TEMP_STAT=_BATT_STATUS_TEMP_LOW_WARN;
 739   2              else if((BatteryBTH>BTH_TEMP_LOW)&&(BatteryBTH<=BATTERY_ACD_no_battery)) /// if(BatteryBTH>BTH_TEMP_LO
             -W)  //-5~-10 warnning
 740   2                TEMP_STAT=_BATT_STATUS_TEMP_LOW;
 741   2              else{
 742   3                SET_NO_BATTERY();
 743   3                SET_BATTERY_STATE(_BATT_STATUS_NO_BATT);
 744   3                TEMP_STAT=_BATT_STATUS_TEMP_NORMAL; ///no DC12V input
 745   3                }
 746   2      
 747   2              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
 748   2              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
 749   2      
 750   2              SET_BTH_STATE(TEMP_STAT); 
 751   2      
 752   2              STAT1_temp=GET_STAT1(); 
 753   2              if(STAT1_Flag!=STAT1_temp)
 754   2              STAT1_Flag=STAT1_temp;
 755   2                    
 756   2              STAT2_temp=GET_STAT2(); 
 757   2              if(STAT2_Flag!=STAT2_temp)
 758   2              STAT2_Flag=STAT2_temp;        
 759   2      
 760   2            /*
 761   2            if((BatteryBTH<=CHARGE_TEMP_HIGH)&&(BatteryBTH>CHARGE_TEMP_LOW))  
 762   2              {
 763   2              if(GET_AC_PLUG()==_TRUE)  
 764   2                SET_CHARGE_TMEP_ABNORMAL();
 765   2      
 766   2              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
 767   2                    CLR_CHARGE_TMEP_ABNORMAL();
 768   2              }
 769   2            */
 770   2            break;
 771   2          case _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE:  
 772   2      
 773   2          #if (_DEBUG_MESSAGE_BATTERY_TEST)
                  #else
 775   2            BatteryVoltage=GetBatteryVoltage();
 776   2          #endif
 777   2          
 778   2            #if 1
 779   2          SET_BATTERY_CAPACITY(BatteryVoltage);
 780   2            
 781   2      //   if((GET_BATTERY_CAPACITY()<200)||(BatteryBTH>=935)) //no battery  <3.3V
 782   2      //     if(((GET_BATTERY_CAPACITY()<BATTERY_ACD_MIN)||(STAT1_Flag==1))&&(GET_AC_PLUG()==_TRUE)) //no battery
             -  <3.3V
 783   2      /*     if((GET_BATTERY_CAPACITY()<BATTERY_ACD_MIN)&&(GET_AC_PLUG()==_TRUE)) //no battery  <3.3V
 784   2              {
 785   2            SET_NO_BATTERY();
 786   2            SET_BATTERY_STATE(_BATT_STATUS_NO_BATT); 
 787   2              }
 788   2          else 
 789   2          */  
 790   2          {
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 14  

 791   3            if(GET_NO_BATTERY()==_TRUE)
 792   3              {
 793   4              BattDetect1_COUNT=0;
 794   4              BattDetect2_COUNT=0;
 795   4              BattDetect3_COUNT=0;
 796   4              BattDetect4_COUNT=0;
 797   4              BattDetect5_COUNT=0;
 798   4              BattDetectMin_COUNT=0;
 799   4              BattDetectHigh_COUNT=0;
 800   4              BattDetectHighStop_COUNT=0;
 801   4              BattDetectNoStartUp_COUNT=0;
 802   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 803   4              }
 804   3              #if (_DEBUG_MESSAGE_Power_Supply_TEST==ON)
                      CLR_NO_BATTERY(); 
                      #endif
 807   3            if(BatteryVoltage<=BATTERY_CAPACITY_MIN) //<11.6V
 808   3            {
 809   4                  BattDetect1_COUNT=0;
 810   4                  BattDetect2_COUNT=0;
 811   4              BattDetect3_COUNT=0;
 812   4              BattDetect4_COUNT=0;
 813   4              BattDetect5_COUNT=0;              
 814   4              BattDetectMin_COUNT++;
 815   4              BattDetectHigh_COUNT=0;
 816   4              BattDetectHighStop_COUNT=0;
 817   4              BattDetectNoStartUp_COUNT=0;
 818   4            }
 819   3            else if((BatteryVoltage>BATTERY_CAPACITY_MIN)&&(BatteryVoltage<=BATTERY_CAPACITY_NO_STARTUP))
 820   3            {
 821   4            //_BATT_STATUS_CAPACITY_NO_STARTUP
 822   4                  BattDetect1_COUNT=0;
 823   4                  BattDetect2_COUNT=0;
 824   4              BattDetect3_COUNT=0;
 825   4              BattDetect4_COUNT=0;
 826   4              BattDetect5_COUNT=0;              
 827   4              BattDetectMin_COUNT=0;
 828   4              BattDetectHigh_COUNT=0;
 829   4              BattDetectHighStop_COUNT=0;               
 830   4              BattDetectNoStartUp_COUNT++;
 831   4            } 
 832   3            else if((BatteryVoltage>BATTERY_CAPACITY_NO_STARTUP)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL0))
 833   3            {
 834   4            //_BATT_STATUS_CAPACITY_LEVEL0
 835   4                  BattDetect1_COUNT++;
 836   4                  BattDetect2_COUNT=0;
 837   4              BattDetect3_COUNT=0;
 838   4              BattDetect4_COUNT=0;
 839   4              BattDetect5_COUNT=0;              
 840   4              BattDetectMin_COUNT=0;
 841   4              BattDetectHigh_COUNT=0;
 842   4              BattDetectHighStop_COUNT=0;               
 843   4              BattDetectNoStartUp_COUNT=0;
 844   4            }     
 845   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL0)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL1))
 846   3            {
 847   4              // _BATT_STATUS_CAPACITY_LEVEL1
 848   4                BattDetect1_COUNT=0;
 849   4                    BattDetect2_COUNT++;
 850   4              BattDetect3_COUNT=0;
 851   4              BattDetect4_COUNT=0;
 852   4              BattDetect5_COUNT=0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 15  

 853   4              BattDetectMin_COUNT=0;
 854   4              BattDetectHigh_COUNT=0;
 855   4              BattDetectNoStartUp_COUNT=0;
 856   4              
 857   4            }
 858   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL1)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL2))
 859   3            {
 860   4            //_BATT_STATUS_CAPACITY_LEVEL2
 861   4                BattDetect1_COUNT=0;
 862   4                    BattDetect2_COUNT=0;
 863   4              BattDetect3_COUNT++;
 864   4              BattDetect4_COUNT=0;
 865   4              BattDetect5_COUNT=0;
 866   4              BattDetectMin_COUNT=0;
 867   4              BattDetectHigh_COUNT=0;
 868   4              BattDetectHighStop_COUNT=0;
 869   4              BattDetectNoStartUp_COUNT=0;
 870   4              
 871   4            }
 872   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL2)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL3))
 873   3            {
 874   4              //_BATT_STATUS_CAPACITY_LEVEL3
 875   4                BattDetect1_COUNT=0;
 876   4                  BattDetect2_COUNT=0;
 877   4              BattDetect3_COUNT=0;
 878   4              BattDetect4_COUNT++;
 879   4              BattDetect5_COUNT=0;
 880   4              BattDetectMin_COUNT=0;
 881   4              BattDetectHigh_COUNT=0;
 882   4              BattDetectHighStop_COUNT=0;
 883   4              BattDetectNoStartUp_COUNT=0;
 884   4              
 885   4            }
 886   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL4)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH))
 887   3            {
 888   4              //_BATT_STATUS_CAPACITY_LEVEL4
 889   4                BattDetect1_COUNT=0;
 890   4              BattDetect2_COUNT=0;
 891   4              BattDetect3_COUNT=0;
 892   4              BattDetect4_COUNT=0;
 893   4              BattDetect5_COUNT++;
 894   4              BattDetectMin_COUNT=0;
 895   4              BattDetectHigh_COUNT=0;
 896   4              BattDetectHighStop_COUNT=0;
 897   4              BattDetectNoStartUp_COUNT=0;
 898   4              
 899   4          
 900   4            }
 901   3            else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH_STOP)&&(PowerFla
             -g==ON))      
 902   3            {
 903   4              BattDetect1_COUNT=0;
 904   4              BattDetect2_COUNT=0;
 905   4              BattDetect3_COUNT=0;
 906   4              BattDetect4_COUNT=0;
 907   4              BattDetect5_COUNT=0;
 908   4              BattDetectMin_COUNT=0;
 909   4              BattDetectHigh_COUNT++; 
 910   4              BattDetectHighStop_COUNT=0;
 911   4              BattDetectNoStartUp_COUNT=0;
 912   4              
 913   4            }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 16  

 914   3            else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=(BATTERY_CAPACITY_HIGH_STOP+9))&&(Powe
             -rFlag==OFF))      
 915   3            {
 916   4              BattDetect1_COUNT=0;
 917   4              BattDetect2_COUNT=0;
 918   4              BattDetect3_COUNT=0;
 919   4              BattDetect4_COUNT=0;
 920   4              BattDetect5_COUNT=0;
 921   4              BattDetectMin_COUNT=0;
 922   4              BattDetectHigh_COUNT++; 
 923   4              BattDetectHighStop_COUNT=0;
 924   4              BattDetectNoStartUp_COUNT=0;
 925   4              
 926   4            }
 927   3            else///>BATTERY_CAPACITY_HIGH_STOP
 928   3            {
 929   4              BattDetect1_COUNT=0;
 930   4              BattDetect2_COUNT=0;
 931   4              BattDetect3_COUNT=0;
 932   4              BattDetect4_COUNT=0;
 933   4              BattDetect5_COUNT=0;
 934   4              BattDetectMin_COUNT=0;
 935   4              BattDetectHigh_COUNT=0; 
 936   4              BattDetectHighStop_COUNT++;
 937   4              BattDetectNoStartUp_COUNT=0;
 938   4            }
 939   3      
 940   3            if(BatteryVoltage>=BATTERY_CAPACITY_STARTUP)
 941   3            BattDetectStartUp_COUNT++;
 942   3            else    
 943   3            BattDetectStartUp_COUNT=0;
 944   3            
 945   3            if(BattDetect1_COUNT==20)
 946   3            {
 947   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL0;
 948   4              BattDetect1_COUNT=0;
 949   4            }
 950   3            if(BattDetect2_COUNT==20)
 951   3            {
 952   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL1;
 953   4              BattDetect2_COUNT=0;
 954   4            }
 955   3            if(BattDetect3_COUNT==20)
 956   3            {
 957   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL2;
 958   4              BattDetect3_COUNT=0;
 959   4            }
 960   3            if(BattDetect4_COUNT==20)
 961   3            {
 962   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL3;
 963   4              BattDetect4_COUNT=0;
 964   4            }
 965   3            if(BattDetect5_COUNT==20)
 966   3            {
 967   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 968   4              BattDetect5_COUNT=0;
 969   4            }
 970   3      
 971   3            if(BattDetectMin_COUNT==20)
 972   3            {
 973   4            BATERY_STAT=_BATT_STATUS_CAPACITY_MIN;
 974   4            BattDetectMin_COUNT=0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 17  

 975   4            }
 976   3            
 977   3            if(BattDetectHigh_COUNT==20)
 978   3            {
 979   4            BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 980   4            BattDetectHigh_COUNT=0;
 981   4            }
 982   3      
 983   3            if(BattDetectNoStartUp_COUNT==20)
 984   3            {
 985   4            BATERY_STAT=_BATT_STATUS_CAPACITY_NO_STARTUP;
 986   4            BattDetectNoStartUp_COUNT=0;
 987   4            }
 988   3      
 989   3                if(BattDetectHigh_COUNT==20)
 990   3                {
 991   4                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 992   4                BattDetectHigh_COUNT=0;
 993   4                }
 994   3      
 995   3              if(BattDetectHighStop_COUNT==20)
 996   3              {
 997   4              BATERY_STAT=_BATT_STATUS_CAPACITY_MAX_STOP;
 998   4              BattDetectHighStop_COUNT=0;
 999   4              }
1000   3      
1001   3              if(BATERY_STAT_TEMP!=BATERY_STAT)
1002   3              {
1003   4              BATERY_STAT_TEMP=BATERY_STAT;
1004   4              SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state. 
1005   4              }
1006   3      
1007   3            if(BattDetectStartUp_COUNT==20)
1008   3            { 
1009   4              if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1010   4                {
1011   5                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                         GraphicsPrint(RED,"(Normal Voltage Charge >12.5V)");
                        #endif
1014   5                CLR_BATTERY_CAPACITY_LOW_FLAG();
1015   5                SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1016   5      
1017   5                  if(ReadEEP(EEP_LowBattery_Flag))
1018   5                    WriteEEP(EEP_LowBattery_Flag,OFF);
1019   5                }
1020   4              
1021   4            BattDetectStartUp_COUNT=0;
1022   4            }
1023   3      
1024   3            SET_BATTERY_STATE(BATERY_STAT);
1025   3        }
1026   2          //#if (_DEBUG_MESSAGE_SysTimerEvent==ON)
1027   2          //GraphicsPrint(CYAN,">");
1028   2          //#endif
1029   2              if(PowerFlag==OFF)
1030   2              MCUTimerActiveTimerEvent(SEC(0.1/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
1031   2              else
1032   2          MCUTimerActiveTimerEvent(SEC(0.3/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
1033   2            #else
                    SET_BATTERY_CAPACITY(BatteryVoltage);
                
                      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 18  

                     if((GET_BATTERY_CAPACITY()<200)||(BatteryBTH>=935)) //no battery  <3.3V
                      {
                    SET_NO_BATTERY();
                    SET_BATTERY_STATE(_BATT_STATUS_NO_BATT); 
                      }
                  else 
                    {
                    CLR_NO_BATTERY();   
                    
                  if(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVEL0)//<12V
                       SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL0);        
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL0)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L1))//12V-13.5V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL1);      
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL1)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L2))//14.2V-13.5V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL2);
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL2)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L3))//15V-14.2V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL3);  
                  else    
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL4);//>15V
                    }   
              
                  MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
              
                  #endif
1061   2      
1062   2          break;
1063   2      
1064   2          case _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE:
1065   2          #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
                  GraphicsPrint(CYAN,"\r\nPOWER key pressed");
                  #endif
1068   2      
1069   2            if(GET_DVR_EntrySleepMode()==_TRUE)
1070   2            {
1071   3              SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1072   3              //CLR_DVR_EntrySleepMode();
1073   3              //MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SLEEP_WAKE_UP);
1074   3              #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
                        GraphicsPrint(YELLOW,"(MCU_SLEEP_TO_NORMAL_MODE)");    
                      #endif        
1077   3      
1078   3            }
1079   2            #if 0 //for test
                    else if(PowerFlag==ON)    
                      {
                    MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
                    PowerFlag=OFF;
                    WriteEEP(EEP_Powerflag,PowerFlag);
                      }
                    #else
1087   2            else if(PowerFlag==ON)    
1088   2            MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1089   2            #endif
1090   2            else
1091   2            {
1092   3                if(GET_DVR_PowerOFFDelay()==_FALSE)
1093   3                {
1094   4                  if((GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)||(Check_ADAP_IN()/*GET_AC_PLUG()*/==_TRUE))
1095   4                  {
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 19  

1096   5                  PowerFlag=ON;
1097   5                  WriteEEP(EEP_Powerflag,PowerFlag);
1098   5                  }
1099   4                  else
1100   4                    {
1101   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(RED,"\r\n(Battery voltage low <12.5V...)");
                            #endif
1104   5                    MCUTimerActiveTimerEvent(SEC(0.01), _SYSTEM_TIMER_EVENT_BATT_LOW_RED_BLINK);
1105   5                    }
1106   4                  
1107   4                #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
                        if(PWR_START_flag==ON)
                            GraphicsPrint(YELLOW,"(DC12V to Power on)");    
                        #endif
1111   4                }
1112   3                else
1113   3                MCUTimerActiveTimerEvent(SEC(3), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);
1114   3                
1115   3            }
1116   2          
1117   2            break;
1118   2      case _SYSTEM_TIMER_EVENT_BATTERY_LOW_PWR_OFF:
1119   2           if(PowerFlag==ON)  
1120   2          MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1121   2        break;
1122   2          case _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE:
1123   2        
1124   2          #if (_DEBUG_MESSAGE_BATTERY_TEST)
                  #else
1126   2          BatteryBTH=GetBatteryBTH();
1127   2      
1128   2      //    if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1129   2      //      BatteryBTH=549;
1130   2          #endif
1131   2          
1132   2          //if((GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_STOP_CHARGE)&&(GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)
             -)
1133   2          //SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);
1134   2          //else
1135   2          //{
1136   2      
1137   2          #if 1
1138   2          if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //<11.6V
1139   2            {     
1140   3            TEMP_NORMAL_COUNT=0;
1141   3              TEMP_LOW_COUNT=0;
1142   3            TEMP_LOW_WARN_COUNT=0;
1143   3            TEMP_HIGH_COUNT++;
1144   3            TEMP_HIGH_WARN_COUNT=0;
1145   3            }
1146   2            else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
1147   2            {
1148   3            TEMP_NORMAL_COUNT=0;
1149   3              TEMP_LOW_COUNT=0;
1150   3            TEMP_LOW_WARN_COUNT=0;
1151   3            TEMP_HIGH_COUNT=0;
1152   3            TEMP_HIGH_WARN_COUNT++;
1153   3            }   
1154   2            else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
1155   2            {
1156   3            TEMP_NORMAL_COUNT++;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 20  

1157   3            TEMP_LOW_COUNT=0;
1158   3            TEMP_LOW_WARN_COUNT=0;
1159   3            TEMP_HIGH_COUNT=0;
1160   3            TEMP_HIGH_WARN_COUNT=0;
1161   3            }
1162   2            else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
1163   2              {
1164   3              TEMP_NORMAL_COUNT=0;
1165   3              TEMP_LOW_COUNT=0;
1166   3              TEMP_LOW_WARN_COUNT++;
1167   3              TEMP_HIGH_COUNT=0;
1168   3              TEMP_HIGH_WARN_COUNT=0;
1169   3      
1170   3              }
1171   2            else if((BatteryBTH>BTH_TEMP_LOW)&&(BatteryBTH<=BATTERY_ACD_no_battery))  //-5~-10 warnning
1172   2              {
1173   3              TEMP_NORMAL_COUNT=0;
1174   3              TEMP_LOW_COUNT++;
1175   3              TEMP_LOW_WARN_COUNT=0;
1176   3              TEMP_HIGH_COUNT=0;
1177   3              TEMP_HIGH_WARN_COUNT=0;
1178   3              }
1179   2            else
1180   2              {
1181   3              #if (_DEBUG_MESSAGE_Power_Supply_TEST==ON)
                      #else
1183   3              SET_NO_BATTERY();
1184   3              SET_BATTERY_STATE(_BATT_STATUS_NO_BATT);
1185   3              #endif
1186   3              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL; ///no DC12V input
1187   3            TEMP_NORMAL_COUNT=0;
1188   3              TEMP_LOW_COUNT=0;
1189   3            TEMP_LOW_WARN_COUNT=0;
1190   3            TEMP_HIGH_COUNT=0;
1191   3            TEMP_HIGH_WARN_COUNT=0;         
1192   3              }
1193   2      
1194   2          if(((TEMP_NORMAL_COUNT>3)||(TEMP_LOW_COUNT>3)||(TEMP_LOW_WARN_COUNT>3)||(TEMP_HIGH_COUNT>3)||(TEMP_HIGH_
             -WARN_COUNT>3)\
1195   2            )&&(PWR_START_flag==ON)&&(PowerFlag==OFF)&&(GET_NO_BATTERY()==_TRUE))
1196   2          PowerFlag=ON;
1197   2      
1198   2            
1199   2          if(TEMP_HIGH_COUNT==TempADC_Counts)
1200   2          {
1201   3            TEMP_STAT=_BATT_STATUS_TEMP_HIGH;
1202   3            TEMP_HIGH_COUNT=0;
1203   3            CLR_BATTERY_HIGH_TMEP_WARN();
1204   3            CLR_BATTERY_LOW_TMEP_WARN();  
1205   3            CLR_NO_BATTERY();
1206   3          }
1207   2      
1208   2          if(TEMP_HIGH_WARN_COUNT==TempADC_Counts)
1209   2          {
1210   3            TEMP_STAT=_BATT_STATUS_TEMP_HIGH_WARN;
1211   3            TEMP_HIGH_WARN_COUNT=0;
1212   3            SET_BATTERY_HIGH_TMEP_WARN();
1213   3            CLR_BATTERY_LOW_TMEP_WARN();
1214   3            CLR_NO_BATTERY();   
1215   3          }
1216   2      
1217   2          if(TEMP_NORMAL_COUNT==TempADC_Counts)
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 21  

1218   2          {
1219   3            TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
1220   3            TEMP_NORMAL_COUNT=0;
1221   3            CLR_BATTERY_LOW_TMEP_WARN();
1222   3            CLR_BATTERY_HIGH_TMEP_WARN();
1223   3            CLR_NO_BATTERY();   
1224   3          }
1225   2      
1226   2          if(TEMP_LOW_WARN_COUNT==TempADC_Counts)
1227   2          {
1228   3            TEMP_STAT=_BATT_STATUS_TEMP_LOW_WARN;
1229   3            TEMP_LOW_WARN_COUNT=0;
1230   3            SET_BATTERY_LOW_TMEP_WARN();
1231   3            CLR_BATTERY_HIGH_TMEP_WARN();
1232   3            CLR_NO_BATTERY();     
1233   3          }
1234   2      
1235   2          if(TEMP_LOW_COUNT==TempADC_Counts)
1236   2          {
1237   3            TEMP_STAT=_BATT_STATUS_TEMP_LOW;
1238   3            TEMP_LOW_COUNT=0;
1239   3            CLR_BATTERY_LOW_TMEP_WARN();
1240   3            CLR_BATTERY_HIGH_TMEP_WARN(); 
1241   3            CLR_NO_BATTERY();   
1242   3          }
1243   2      /*
1244   2          if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1245   2            {
1246   2              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
1247   2              CLR_BATTERY_LOW_TMEP_WARN();
1248   2              CLR_BATTERY_HIGH_TMEP_WARN();
1249   2      
1250   2            }
1251   2          */
1252   2          SET_BTH_STATE(TEMP_STAT);
1253   2      
1254   2      
1255   2            if((BatteryBTH<=CHARGE_TEMP_HIGH)||(BatteryBTH>CHARGE_TEMP_LOW))  
1256   2              {
1257   3              CHARGE_TEMP_ABNORMAL++;
1258   3              CHARGE_TEMP_NORMAL=0;
1259   3              }
1260   2              else
1261   2              {
1262   3              CHARGE_TEMP_ABNORMAL=0;
1263   3              CHARGE_TEMP_NORMAL++;
1264   3              //CLR_CHARGE_TMEP_ABNORMAL();
1265   3              }
1266   2              
1267   2              if(CHARGE_TEMP_ABNORMAL==TempADC_Counts)
1268   2                {
1269   3                CHARGE_TEMP_ABNORMAL=0;
1270   3                  if((GET_AC_PLUG()==_TRUE)&&(GET_NO_BATTERY()==_FALSE))      
1271   3                  SET_CHARGE_TMEP_ABNORMAL();
1272   3                
1273   3                //  if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
1274   3                //    CLR_CHARGE_TMEP_ABNORMAL();                     
1275   3                }
1276   2              else  if(CHARGE_TEMP_NORMAL==TempADC_Counts)
1277   2                {
1278   3                CHARGE_TEMP_NORMAL=0;
1279   3                CLR_CHARGE_TMEP_ABNORMAL();
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 22  

1280   3                }
1281   2          #else
                      if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //>55
                      SET_BTH_STATE(_BATT_STATUS_TEMP_HIGH);          
                    else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
                      {
                      SET_BATTERY_HIGH_TMEP_WARN();   
                      CLR_BATTERY_LOW_TMEP_WARN();  
                      }
                    else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
                      {
                      SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);        
                      CLR_BATTERY_LOW_TMEP_WARN();
                      CLR_BATTERY_HIGH_TMEP_WARN();
                      }
                    else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
                      {
                      //SET_BATTERY_LOW_TMEP_WARN();
                      //CLR_BATTERY_HIGH_TMEP_WARN(); 
                      }
                    else if(BatteryBTH>BTH_TEMP_LOW)  //-5~-10 warnning
                      {
                      SET_BTH_STATE(_BATT_STATUS_TEMP_LOW);       
                      CLR_BATTERY_LOW_TMEP_WARN();
                      CLR_BATTERY_HIGH_TMEP_WARN();
                      }
                    else 
                      SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);
                    
              
                    #endif  
1311   2          //}
1312   2            if(PowerFlag==OFF)
1313   2              MCUTimerActiveTimerEvent(SEC(0.1/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
1314   2              else
1315   2          MCUTimerActiveTimerEvent(SEC(0.2/*0.3*//*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
1316   2          break;
1317   2      
1318   2          case _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO:
1319   2      
1320   2      
1321   2            if(GET_DVR_WDTkickDisable()==_FALSE)
1322   2            {
1323   3            #if(_DEBUG_MESSAGE_WDT_KICK_CHECK == ON)    
                    GraphicsPrint(RED,"\r\n(WDT kick over 10 seconds, Try to reboot the DVR)"); 
                    #endif
1326   3            SET_DVR_Reboot();
1327   3            SET_DVR_RebootAndPower();
1328   3            MCUTimerActiveTimerEvent(SEC(1), _USER_TIMER_EVENT_OSD_DVR_REBOOT);
1329   3            }
1330   2          break;
1331   2      
1332   2          case _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE:
1333   2          
1334   2              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                      GraphicsPrint(CYAN,"(AC)");
                      if(GET_STAT1()==ON)
                        GraphicsPrint(GREEN,"(S1=1)");
                      else
                        GraphicsPrint(GREEN,"(S1=0)");
                      
                      if(GET_STAT2()==ON)
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 23  

                        GraphicsPrint(MAGENTA,"(S2=1)");
                      else
                        GraphicsPrint(MAGENTA,"(S2=0)");
                        
                      #endif
1347   2              
1348   2                  if(Check_ADAP_IN()==_TRUE)
1349   2                  {
1350   3                    if(GET_AC_PLUG()!=_TRUE)
1351   3                    {
1352   4                      SET_AC_PLUG();
1353   4                      //SET_AC_MODE();  // turn on AC mode
1354   4                      CLR_AC_MODE();  // turn on AC mode
1355   4                      //MCUTimerDelayXms(100);//delay 50ms    
1356   4                      //CLR_BAT_SYS();// turn off battery output              
1357   4                      //SET_PWM(_CHG_CURR,Low_Current);
1358   4      
1359   4                      STAT1_temp=GET_STAT1(); 
1360   4                      if(STAT1_Flag!=STAT1_temp)
1361   4                      STAT1_Flag=STAT1_temp;
1362   4                      
1363   4                      STAT2_temp=GET_STAT2(); 
1364   4                      if(STAT2_Flag!=STAT2_temp)
1365   4                      STAT2_Flag=STAT2_temp;
1366   4      
1367   4                    }         
1368   3                  
1369   3                  if(GET_NO_BATTERY()==_TRUE)
1370   3                    {
1371   4                  MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT);                
1372   4                    }
1373   3                  else
1374   3                    {
1375   4                    
1376   4                  if(GET_POWER_STATUS()==_POWER_STATUS_NORMAL)
1377   4                  {
1378   5                    
1379   5                    if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_BA
             -TTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1380   5                      {
1381   6                        if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1382   6                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE);                   
1383   6                        else
1384   6                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);  
1385   6                      }
1386   5                    else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1387   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1388   5                    else
1389   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);   
1390   5                  }
1391   4                  else if(GET_POWER_STATUS()==_POWER_STATUS_SAVING)
1392   4                    {
1393   5                    
1394   5                    if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_BA
             -TTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1395   5                      {
1396   6                      if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1397   6                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE);                   
1398   6                      else
1399   6                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);
1400   6                      }
1401   5                      else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 24  

1402   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1403   5                      else
1404   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE); 
1405   5                    }
1406   4                  else if(GET_POWER_STATUS()==_POWER_STATUS_OFF)
1407   4                    {
1408   5                      
1409   5                      if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_B
             -ATTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1410   5                        {
1411   6                        if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1412   6                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_HIGH_CHARGE); 
1413   6                        else
1414   6                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);  
1415   6                        }
1416   5                      else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1417   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1418   5                      else
1419   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE); 
1420   5                    }
1421   4                          
1422   4                  
1423   4                    }
1424   3                
1425   3                  MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);   //repeat on AC mode
1426   3      
1427   3      
1428   3                  }
1429   2                else
1430   2                  {
1431   3                  CLR_AC_PLUG();
1432   3                  CLR_AC_MODE();  // turn off AC mode
1433   3                  SET_AC_PLUG_OUT();
1434   3                  CLR_BATTERY_CAPACITY_HIGH_FLAG(); 
1435   3                  if((PWR_START_flag==ON)&&(PowerFlag==ON))
1436   3                  MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN);///SET_AC_PLUG_OUT             
1437   3                  MCUTimerActiveTimerEvent(SEC(0.5), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);  //change battery mode          
1438   3                  MCUTimerActiveTimerEvent(SEC(0.5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  //going to battery mode
1439   3                  }
1440   2      
1441   2                CLR_AC_MODE();  
1442   2                    //CLR_BAT_SYS();
1443   2          break;
1444   2                      case _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE:
1445   2      
1446   2                    STAT1_temp=GET_STAT1();
1447   2                    STAT2_temp=GET_STAT2();
1448   2                  
1449   2                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(YELLOW,"(STAT1_temp=%02x)",(WORD)STAT1_temp);
                            #endif  
1452   2                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                            GraphicsPrint(GREEN,"(STAT2_temp=%02x)",(WORD)STAT2_temp);
                            #endif  
1455   2                    
1456   2                    if((STAT1_Flag!=STAT1_temp)&&(GET_NO_BATTERY()==_FALSE))
1457   2                      {
1458   3                      STAT1_Flag=STAT1_temp;
1459   3                      SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.              
1460   3                      }
1461   2                    
1462   2                      if((STAT2_Flag!=STAT2_temp)&&(GET_NO_BATTERY()==_FALSE))
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 25  

1463   2                      {
1464   3                      STAT2_Flag=STAT2_temp;
1465   3                      SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.              
1466   3                      }
1467   2            
1468   2                #if 1
1469   2                    if(GET_BATTERY_ABNORMAL()==_FALSE)
1470   2                    { 
1471   3                        if(GET_BATTERY_CAPACITY()>=BATTERY_ACD_MAX)//>17    
1472   3                        {
1473   4                        #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                GraphicsPrint(RED,"( HigH Voltage >17V shut down)");
                                #endif
1476   4                        SET_BATTERY_ABNORMAL();
1477   4                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
1478   4                        }
1479   3                  
1480   3                    }
1481   2      
1482   2                        switch(GET_BATTERY_STATE())
1483   2                        {
1484   3      
1485   3                      case _BATT_STATUS_CAPACITY_MAX_STOP:
1486   3                        
1487   3                          if(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)
1488   3                          {
1489   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                  GraphicsPrint(RED,"(HIGH Voltage >16.4V stop charge)");
                                  #endif  
1492   4                          SET_BATTERY_CAPACITY_HIGH_FLAG();   
1493   4                          }
1494   3                          
1495   3                         if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1496   3                         {     
1497   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                   GraphicsPrint(RED,"(2.Normal Voltage Charge >12V)");
                                  #endif
1500   4                         CLR_BATTERY_CAPACITY_LOW_FLAG();  
1501   4                         SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1502   4                          if(ReadEEP(EEP_LowBattery_Flag))
1503   4                            WriteEEP(EEP_LowBattery_Flag,OFF);
1504   4                         }
1505   3                         CLR_CHARGE_START_FLAG();
1506   3                        break;
1507   3                      case _BATT_STATUS_CAPACITY_MIN:
1508   3                      case _BATT_STATUS_CAPACITY_NO_STARTUP:
1509   3                          if((GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)&&(GET_DVR_SystemReadyNotic()==_FALSE)&&(GET_AC_PLUG
             -()==_FALSE))
1510   3                          {
1511   4                          SET_BATTERY_CAPACITY_LOW_FLAG();  
1512   4                          
1513   4                          if(ReadEEP(EEP_LowBattery_Flag)==OFF)
1514   4                          WriteEEP(EEP_LowBattery_Flag,ON);
1515   4                          
1516   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                  GraphicsPrint(RED,"( Low Voltage <11.8V or < 11.6V shut down)");
                                  #endif  
1519   4                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);  
1520   4                          }
1521   3                          else  if((GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)&&(PowerFlag==ON)&&(GET_AC_PLUG()==_FALS
             -E))
1522   3                          {
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 26  

1523   4                          PowerFlag=OFF;
1524   4                          WriteEEP(EEP_Powerflag,PowerFlag);
1525   4                        
1526   4                          if(GET_DVR_EntrySleepMode()==TRUE)
1527   4                          CLR_DVR_EntrySleepMode();
1528   4                          }
1529   3      
1530   3                          if(GET_DVR_EntrySleepMode()==_TRUE)
1531   3                          {
1532   4                          SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1533   4                          #if (_DEBUG_MESSAGE_SysTimerEvent==ON)
                                    GraphicsPrint(RED,"(MCU_SLEEP_TO_NORMAL_MODE: Low Voltage <12V)");    
                                  #endif  
1536   4                          }
1537   3                          
1538   3                          CLR_BATTERY_CAPACITY_HIGH_FLAG();       
1539   3                          SET_CHARGE_START_FLAG();
1540   3                        break;
1541   3      
1542   3                       case _BATT_STATUS_CAPACITY_LEVEL0:
1543   3                         CLR_BATTERY_CAPACITY_HIGH_FLAG();   
1544   3                        //  CLR_BATTERY_CAPACITY_LOW_FLAG();  
1545   3                          if(GET_DVR_EntrySleepMode()==_TRUE)
1546   3                          {
1547   4                          SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1548   4                          #if (_DEBUG_MESSAGE_SysTimerEvent==ON)
                                    GraphicsPrint(RED,"(MCU_SLEEP_TO_NORMAL_MODE: Low Voltage <12V)");    
                                  #endif  
1551   4                          }
1552   3                        break;
1553   3                       case _BATT_STATUS_CAPACITY_LEVEL1:                 
1554   3                       case _BATT_STATUS_CAPACITY_LEVEL2:
1555   3                       case _BATT_STATUS_CAPACITY_LEVEL3:
1556   3                       case _BATT_STATUS_CAPACITY_LEVEL4:
1557   3                       case _BATT_STATUS_CAPACITY_MAX:
1558   3      
1559   3                         SET_CHARGE_START_FLAG();
1560   3                         /*
1561   3                         if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1562   3                         {     
1563   3                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1564   3                           GraphicsPrint(RED,"(Normal Voltage Charge >12V)");
1565   3                          #endif
1566   3                         CLR_BATTERY_CAPACITY_LOW_FLAG();  
1567   3                         SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1568   3                         }  
1569   3                         */
1570   3                         CLR_BATTERY_CAPACITY_HIGH_FLAG();   
1571   3                          break;
1572   3                      //case _BATT_STATUS_CAPACITY_MAX:
1573   3                      //  CLR_CHARGE_START_FLAG();
1574   3                        
1575   3                        //break;
1576   3                        }
1577   2            #else
                            if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
                            { 
                              if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)//<11.6V    
                              {
                              SET_BATTERY_CAPACITY_LOW_FLAG();                                      
                              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                              GraphicsPrint(RED,"( Low Voltage <11.6V shut down)");
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 27  

                              #endif                                      
                              MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
                              }             
                              
                            }
              
                
                            if(GET_BATTERY_ABNORMAL()==_FALSE)
                            { 
                                if(GET_BATTERY_CAPACITY()>=BATTERY_ACD_MAX)//>17    
                                {
                                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                GraphicsPrint(RED,"( HigH Voltage >17V shut down)");
                                #endif
                                SET_BATTERY_ABNORMAL();
                                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
                                }
                          
                            }
                      //}
              
                              if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
                              {   
                                if(GET_BATTERY_STATE()!=_BATT_STATUS_CAPACITY_MIN)//<11.6V    
                                {
                                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                GraphicsPrint(RED,"(Normal Voltage Charge >12V)");
                                #endif
                                CLR_BATTERY_CAPACITY_LOW_FLAG();  
                                SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
                                }         
                              }
                          //  if(((GET_BATTERY_CAPACITY()>675)||(GET_BATTERY_CAPACITY()<1023))&&(GET_BATTERY_ABNORMAL()==_TRUE)
             -)    
                            //      CLR_BATTERY_ABNORMAL();
              
                            if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)//>16.4V
                            {
                                  if(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)
                                  {
                                  #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                  GraphicsPrint(RED,"(HIGH Voltage >15.5V stop charge)");
                                  #endif  
                                  SET_BATTERY_CAPACITY_HIGH_FLAG();   
                                  //SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
                                  }
                                  
                            }
                            else
                              CLR_BATTERY_CAPACITY_HIGH_FLAG(); 
                            
                    #endif        
1636   2                MCUTimerActiveTimerEvent(SEC(10-5), _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE);  //check charge
1637   2                break;
1638   2          case     _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE:
1639   2            #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                    GraphicsPrint(CYAN,"(BATT)");
                      if(GET_STAT1()==ON)
                        GraphicsPrint(MAGENTA,"(S1=1)");
                      else
                        GraphicsPrint(GREEN,"(S1=0)");
                      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 28  

                      if(GET_STAT2()==ON)
                        GraphicsPrint(MAGENTA,"(S2=1)");
                      else
                        GraphicsPrint(GREEN,"(S2=0)");
                    #endif
1651   2          
1652   2            if(Check_ADAP_IN()==_TRUE)
1653   2              {
1654   3      
1655   3                if((PWR_START_flag==ON)&&(PowerFlag==OFF))
1656   3                {
1657   4                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);
1658   4                }
1659   3      
1660   3              SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
1661   3              MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
1662   3              }
1663   2            else 
1664   2              {
1665   3              if(GET_BAT_SYS()!=ON)
1666   3                {
1667   4                //SET_BAT_SYS();   // turn on  battery mode
1668   4                //CLR_BAT_SYS();   // turn on  battery mode
1669   4                //MCUTimerDelayXms(100);//delay 50ms          
1670   4                CLR_AC_MODE();  // turn off AC mode
1671   4                }
1672   3      
1673   3                //if((GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)&&(PowerFlag==ON))
1674   3                //MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1675   3      
1676   3                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);       
1677   3      
1678   3      
1679   3              MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);
1680   3              }
1681   2      
1682   2                CLR_AC_MODE();  
1683   2                    //CLR_BAT_SYS();
1684   2            break;
1685   2      
1686   2            case _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE: 
1687   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_LOW_CHARGE)
1688   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_LOW_CHARGE);
1689   2          break;
1690   2      
1691   2        case  _SYSTEM_TIMER_EVENT_BATT_HIGH_CHARGE:   
1692   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_HIGH_CHARGE)
1693   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_HIGH_CHARGE);         
1694   2              break;
1695   2        case  _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE:   
1696   2            if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_NORMAL_CHARGE)
1697   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_NORMAL_CHARGE);             
1698   2            break;
1699   2      
1700   2        case  _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE:   
1701   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_STOP_CHARGE)
1702   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_STOP_CHARGE);         
1703   2            break;
1704   2      
1705   2      
1706   2        case  _SYSTEM_TIMER_EVENT_NO_BATT:  
1707   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_NO_BATT)
C51 COMPILER V9.60.0.0   SYSTIMER                                                          03/23/2021 14:24:38 PAGE 29  

1708   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_NO_BATT);         
1709   2              break;
1710   2            
1711   2      
1712   2              case _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER:
1713   2        
1714   2            second+=10;
1715   2          
1716   2            if(second==60)
1717   2            {
1718   3              second=0;
1719   3              minute++;
1720   3            }
1721   2        
1722   2            if(minute==60)
1723   2            {
1724   3              minute=0;
1725   3              hour++;
1726   3            }
1727   2        
1728   2            if(hour==24)
1729   2            {
1730   3              hour=0;
1731   3              day++;
1732   3            } 
1733   2      
1734   2          ShowWorkingTimer();
1735   2      
1736   2          MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);
1737   2             break;
1738   2      #if (_POWER_DOWN_ENABLE==ON)
1739   2          case _SYSTEM_TIMER_POWER_DOWN_MODE:
1740   2          //SET_MCU_POWER_DOWN_MODE();
1741   2          Power_down_mode=2;
1742   2              
1743   2          break;
1744   2      #endif
1745   2         default:
1746   2                  break;
1747   2       }
1748   1      }
1749          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5040    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     92      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
