C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SYSTIMER
OBJECT MODULE PLACED IN .\Output\SysTimer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SysTimer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECT
                    -EXTEND PRINT(.\Listings\SysTimer.lst) TABS(2) OBJECT(.\Output\SysTimer.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  SysTimer.c                                                                */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          
   9          
  10          #include <math.h>
  11          #include <stdio.h>
  12          
  13          #include "Config.h"
  14          
  15          #include "reg.h"
  16          #include "typedefs.h"
  17          #include "main.h"
  18          #include "i2c.h"
  19          #include "adc.h"
  20          #include "etc_eep.h"
  21          #include "Printf.h"
*** WARNING C320 IN LINE 44 OF .\Include\Printf.h: DEBUG is defined 
  22          #include "KeyRemo.h"
  23          #include "Monitor.h"
  24          #include "CPU.h"
  25          #include "HS_DVRProtocol.h"
  26          
  27          
  28          //****************************************************************************
  29          // DEFINITIONS / MACROS
  30          //****************************************************************************
  31          #define GET_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid)
  32          #define SET_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid = _TRUE)
  33          #define CLR_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid = _FALSE)
  34          
  35          #define GET_EVENT_ID(x)                         (g_stTimerEvent[x].b7EventID)
  36          #define SET_EVENT_ID(x, y)                      (g_stTimerEvent[x].b7EventID = y)
  37          
  38          #define GET_EVENT_TIME(x)                       (g_stTimerEvent[x].usTime)
  39          #define SET_EVENT_TIME(x, y)                    (g_stTimerEvent[x].usTime = y)
  40          
  41          
  42          //****************************************************************************
  43          // VARIABLE DECLARATIONS
  44          //****************************************************************************
  45          bit g_bNotifyTimer0Int = _FALSE;
  46          volatile WORD  g_usTimerCounter = 0;
  47          StructTimerEventTableType g_stTimerEvent[_TIMER_EVENT_COUNT];
  48          WORD BatteryBTH=549/*156*//*650*//*880*/,BatteryVoltage=880;
  49          BYTE WDT_Echo_Count=0;
  50          BYTE STAT1_temp=OFF, STAT2_temp=ON,STAT1_Flag=OFF,STAT2_Flag=ON;
  51          
  52          BYTE BattDetect1_COUNT=0, BattDetect2_COUNT=0, BattDetect3_COUNT=0, BattDetect4_COUNT=0,BattDetect5_COUNT=
             -0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 2   

  53          BYTE BattDetectMin_COUNT=0, BattDetectHigh_COUNT=0,BattDetectHighStop_COUNT=0,BattDetectNoStartUp_COUNT=0,
             -BattDetectStartUp_COUNT=0;
  54          BYTE  BATERY_STAT=0xFF,BATERY_STAT_TEMP=0xFE;
  55          BYTE TEMP_NORMAL_COUNT=0,TEMP_LOW_COUNT=0, TEMP_LOW_WARN_COUNT=0, TEMP_HIGH_COUNT=0,TEMP_HIGH_WARN_COUNT=0
             -;
  56          BYTE TEMP_STAT=0xFF;
  57          BYTE PWM_TEMP=0;  
  58          BYTE CHARGE_TEMP_ABNORMAL=0;
  59          BYTE CHARGE_TEMP_NORMAL=0;
  60          BYTE _BATT_STATUS_CAPACITY_MAX_STOP_Count=0;
  61          
  62          #if (_DEBUG_MESSAGE_Monitor==ON)
  63          bit Monitor_flag=OFF;
  64          #endif
  65          
  66          extern BYTE PowerFlag;
  67          extern BYTE CameraVolt;
  68          extern BYTE PWR_START_flag;
  69          extern StructBatteryInfoType g_stBatteryInfo;
  70          extern BYTE EncorderCountPN;
  71          extern BYTE EncorderLenint;
  72          extern short EncorderCount;
  73          extern WORD EncorderLenfloaat;
  74          extern StructPowerInfoType idata g_stPowerInfo;
  75          extern BYTE day,hour,minute,second;
  76          extern StructDVRInfoType g_stDVRInfo;
  77          extern BYTE Power_down_mode;
  78          extern DWORD ulongRotateNumber;
  79          extern BYTE bytFastEncoderMode;
  80          extern BYTE bytBatteryStopCharge;
  81          extern BYTE bytBatteryStopChargeCount;
  82          
  83          
  84          //--------------------------------------------------
  85          // Definitions of Timer2
  86          //--------------------------------------------------
  87          #define _EVENT_TIME_MAX                         61000 // Please do not modify this value.
  88          
  89          //****************************************************************************
  90          // CODE TABLES
  91          //****************************************************************************
  92          
  93          
  94          //****************************************************************************
  95          // FUNCTION DECLARATIONS
  96          //****************************************************************************
  97          void SysTimerHandler(void);
  98          void SysTimerEventProc(EnumSystemTimerEventID enumEventID);
  99          void MCUTimerInitialTimerEvent(void);
 100          void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID);
 101          void MCUTimerCancelTimerEvent(BYTE ucEventID);
 102          void MCUTimerDelayXms(WORD usNum);
 103          extern WORD GetBatteryBTH(void);
 104          extern WORD GetBatteryVoltage(void);
 105          extern void SetAD5110Step(BYTE newv) ;
 106          extern void UserInterfacePowerSwitch(EnumPowerAction enumSwitch);
 107          extern void SysPowerSwitch(EnumPowerAction enumSwitch);
 108          extern void UserInterfaceBatteryChargeMode(EnumBatteryStatus enumSwitch);
 109          extern void SET_MCU_POWER_DOWN_MODE(void);
 110          
 111          
 112          //****************************************************************************
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 3   

 113          // FUNCTION DEFINITIONS
 114          //****************************************************************************
 115          //--------------------------------------------------
 116          // Description  : Timer Delay
 117          // Input Value  : usNum --> Delay in ms
 118          // Output Value : None
 119          //--------------------------------------------------
 120          void MCUTimerDelayXms(WORD usNum)
 121          {
 122   1          if(usNum)
 123   1          {
 124   2              g_bNotifyTimer0Int = _FALSE;
 125   2      
 126   2              while(_TRUE)
 127   2              {
 128   3                  if(g_bNotifyTimer0Int)
 129   3                  {
 130   4                      g_bNotifyTimer0Int = _FALSE;
 131   4      
 132   4                      if(--usNum)
 133   4                      {
 134   5                      }
 135   4                      else
 136   4                      {
 137   5                          return;
 138   5                      }
 139   4                  }
 140   3              }
 141   2          }
 142   1      }
 143          
 144          //--------------------------------------------------
 145          // Description  : Get Event Time
 146          // Input Value  : ucEventIndex --> Event which time is needed
 147          // Output Value : Event Time
 148          //--------------------------------------------------
 149          WORD MCUTimerGetEventTime(BYTE ucEventIndex)
 150          {
 151   1          return GET_EVENT_TIME(ucEventIndex);
 152   1      }
 153          
 154          //--------------------------------------------------
 155          // Description  : Get Event ID
 156          // Input Value  : Referenced Event Index
 157          // Output Value : Stored Event ID
 158          //--------------------------------------------------
 159          BYTE MCUTimerGetEventID(BYTE ucEventIndex)
 160          {
 161   1          return GET_EVENT_ID(ucEventIndex);
 162   1      }
 163          
 164          //--------------------------------------------------
 165          // Description  : Clear Event Time
 166          // Input Value  : ucEventIndex --> Event which time is needed to be cleared
 167          // Output Value : None
 168          //--------------------------------------------------
 169          
 170          
 171          void MCUTimerClrEventValid(BYTE ucEventIndex)
 172          {
 173   1          CLR_EVENT_VALID(ucEventIndex);
 174   1      }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 4   

 175          
 176          //--------------------------------------------------
 177          // Description  : Check if Event is Valid
 178          // Input Value  : ucEventIndex --> Event to be checked
 179          // Output Value : Validity(_TRUE/_FALSE)
 180          //--------------------------------------------------
 181          bit MCUTimerCheckEventValid(BYTE ucEventIndex)
 182          {
 183   1          return GET_EVENT_VALID(ucEventIndex);;
 184   1      }
 185          
 186          //--------------------------------------------------
 187          // Description  : Get Timer Counter.
 188          // Input Value  : None
 189          // Output Value : Timer Counter
 190          //--------------------------------------------------
 191          WORD MCUTimerGetTimerCounter(void)
 192          {
 193   1          WORD usPresentTime = g_usTimerCounter;
 194   1         
 195   1          // When get counter,timer interrupt maybe change counter.
 196   1          // Get twice to avoid it.
 197   1          if(abs(g_usTimerCounter - usPresentTime) > 0x7F)
 198   1          {
 199   2              usPresentTime = g_usTimerCounter;
 200   2          } 
 201   1      
 202   1          return usPresentTime;
 203   1      }
 204          //--------------------------------------------------
 205          // Description  : Check timer and events. We have to run this function when setting up a timer for an even
             -t.
 206          // Input Value  : usTime    --> Unit in 1ms, range in 0.001 ~ 61sec
 207          // Output Value : Return usPresentTime
 208          //--------------------------------------------------
 209          WORD MCUTimerCheckTimerEvent(WORD usTime)
 210          {
 211   1          BYTE ucTimerEventCnt = 0;
 212   1          WORD usPresentTime = 0;
 213   1      
 214   1          usPresentTime = MCUTimerGetTimerCounter();
 215   1          
 216   1          if(usTime > _EVENT_TIME_MAX) 
 217   1          {
 218   2              usTime = _EVENT_TIME_MAX;
 219   2          }
 220   1         
 221   1          if(((usPresentTime + usTime) > _EVENT_TIME_MAX) || // Size Limit of Timer Counter             
 222   1             ((usPresentTime + usTime) < usPresentTime)) // Timer Counter Overflow
 223   1          { 
 224   2              g_usTimerCounter = 0;
 225   2          
 226   2              // Reset Timer Event Counter
 227   2              for(ucTimerEventCnt = 0; ucTimerEventCnt < _TIMER_EVENT_COUNT; ucTimerEventCnt++)
 228   2              {
 229   3                  if(GET_EVENT_VALID(ucTimerEventCnt) == _TRUE)
 230   3                  {
 231   4                      if(GET_EVENT_TIME(ucTimerEventCnt) > usPresentTime)
 232   4                      {
 233   5                          SET_EVENT_TIME(ucTimerEventCnt, (GET_EVENT_TIME(ucTimerEventCnt) - usPresentTime));
 234   5                      }
 235   4                      else
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 5   

 236   4                      {
 237   5                          SET_EVENT_TIME(ucTimerEventCnt, 0);
 238   5                      }
 239   4                  }
 240   3              }
 241   2              
 242   2              usPresentTime = 0;
 243   2          }    
 244   1      
 245   1          return usPresentTime;
 246   1      }
 247          
 248          //--------------------------------------------------
 249          // Description  : Initial timer and events. We have to run this function at firmware startup
 250          // Input Value  : None
 251          // Output Value : None
 252          //--------------------------------------------------
 253          void MCUTimerInitialTimerEvent(void)
 254          {
 255   1          BYTE ucTimerEventCnt = 0;
 256   1      
 257   1          for(ucTimerEventCnt = 0; ucTimerEventCnt < _TIMER_EVENT_COUNT; ucTimerEventCnt++)
 258   1          {
 259   2              CLR_EVENT_VALID(ucTimerEventCnt);
 260   2          }
 261   1      
 262   1         // TR2 = 1;
 263   1      }
 264          
 265          //--------------------------------------------------
 266          // Description  : Active Timer Event
 267          // Input Value  : usTime --> Time to active Timer Event
 268          //          ucEventID --> Event to be actived
 269          // Output Value : None
 270          //--------------------------------------------------
 271          void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID)
 272          {
 273   1          BYTE ucEventIndex = 0;
 274   1      
 275   1          // Search for Existing Event with the same Event ID
 276   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 277   1          {
 278   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 279   2              {
 280   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 281   3                  {
 282   4                      return;
 283   4                  }
 284   3              }
 285   2          }
 286   1      
 287   1          // Choose any Vacant Storage for Event
 288   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 289   1          {
 290   2              if(GET_EVENT_VALID(ucEventIndex) == _FALSE)
 291   2              {
 292   3                  SET_EVENT_VALID(ucEventIndex);
 293   3                  SET_EVENT_ID(ucEventIndex, ucEventID);
 294   3                  SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 295   3                  return;
 296   3              }
 297   2          }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 6   

 298   1      
 299   1          //Printf("No More Available Storage for Simultaneous Event!!!!!!");
 300   1      }
 301          
 302          //--------------------------------------------------
 303          // Description  : Cancel an event
 304          // Input Value  : Event     --> Event which we want to cancel
 305          // Output Value : None
 306          //--------------------------------------------------
 307          void MCUTimerCancelTimerEvent(BYTE ucEventID)
 308          {
 309   1          BYTE ucEventIndex = 0;
 310   1          
 311   1          // Search for Existing Event with the same Event ID
 312   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 313   1          {
 314   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 315   2              {
 316   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 317   3                  {
 318   4                      CLR_EVENT_VALID(ucEventIndex);
 319   4                      return;
 320   4                  }
 321   3              }
 322   2          }      
 323   1      }
 324          
 325          //--------------------------------------------------
 326          // Description  : Reactive a timer for an event. If the event is exist,
 327          //                this function will reset the executing time and restart.
 328          // Input Value  : usTime    --> Unit in 1ms, range in 0.01 ~ 61 sec
 329          //                Event     --> Execute Event while timeup
 330          // Output Value : None
 331          //--------------------------------------------------
 332          void MCUTimerReactiveTimerEvent(WORD usTime, BYTE ucEventID)
 333          {
 334   1          BYTE ucEventIndex = 0;
 335   1      
 336   1          // Search for Existing Event with the same Event ID
 337   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 338   1          {
 339   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 340   2              {
 341   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 342   3                  {
 343   4                      SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 344   4                      return;
 345   4                  }
 346   3              }
 347   2          }    
 348   1      
 349   1          // Choose any Vacant Storage for Event
 350   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 351   1          {
 352   2              if(GET_EVENT_VALID(ucEventIndex) == _FALSE)
 353   2              {
 354   3                  SET_EVENT_VALID(ucEventIndex);
 355   3                  SET_EVENT_ID(ucEventIndex, ucEventID);
 356   3                  SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 357   3                  return;
 358   3              }
 359   2          }   
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 7   

 360   1      }
 361          
 362          
 363          void UserInterfaceTimerEventProc(BYTE ucEventID)
 364          {
 365   1      
 366   1      switch(ucEventID)
 367   1      {
 368   2      
 369   2        case _USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_INC:
 370   2            SetAD5110Step(CameraVolt);
 371   2            WriteEEP(EEP_CameraVolt, CameraVolt);  
 372   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 373   2            GraphicsPrint(YELLOW,"(CAM_INC %d)",(WORD)(CameraVolt));  
 374   2            #endif
 375   2              break;
 376   2      
 377   2        case _USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_DEC:
 378   2            SetAD5110Step(CameraVolt);  
 379   2            WriteEEP(EEP_CameraVolt, CameraVolt);  
 380   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 381   2            GraphicsPrint(YELLOW,"(CAM_DEC %d)",(WORD)(CameraVolt));  
 382   2            #endif
 383   2            break;
 384   2              case _USER_TIMER_EVENT_OSD_SET_CAMERA_VOLTAGE:
 385   2            SetAD5110Step(CameraVolt);  
 386   2            WriteEEP(EEP_CameraVolt, CameraVolt);     
 387   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 388   2            GraphicsPrint(MAGENTA,"(CAM_VOLT_LEVEL=%d)",(WORD)(CameraVolt));  
 389   2            #endif
 390   2            break;
 391   2              case _USER_TIMER_EVENT_OSD_GET_MCU_VERSION:
 392   2            MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REPLY_MCU_FW);  
 393   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 394   2            GraphicsPrint(YELLOW,"(GET_MCU_VERSION)");  
 395   2            #endif
 396   2            break;
 397   2        case _USER_TIMER_EVENT_REPLY_ENCODER_COUNT:
 398   2            MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REPLY_ENCODER_COUNT); 
 399   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 400   2            GraphicsPrint(YELLOW,"(REPLY_ENCODER_COUNT)");  
 401   2            #endif
 402   2            break;
 403   2        case _USER_TIMER_EVENT_RESET_ENCODER_COUNT:
 404   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 405   2            GraphicsPrint(YELLOW,"(RESET_ENCODER_COUNT)");  
 406   2            #endif
 407   2            if(bytFastEncoderMode==ON)
 408   2              {
 409   3            WriteEEP(EEP_RotateNumberL,0);
 410   3            WriteEEP(EEP_RotateNumberM,0);
 411   3            WriteEEP(EEP_RotateNumberH,0);
 412   3            ulongRotateNumber=0;
 413   3              }
 414   2            else
 415   2              {
 416   3              WriteEEP(EEP_RotateNumberRL,0);
 417   3              WriteEEP(EEP_RotateNumberRM,0);
 418   3              WriteEEP(EEP_RotateNumberRH,0);
 419   3              ulongRotateNumber=0;
 420   3              }
 421   2            break;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 8   

 422   2        case _USER_TIMER_EVENT_OSD_DVR_FACTORY_MODE:
 423   2      
 424   2              if(GET_AC_PLUG()==_TRUE)
 425   2              {
 426   3              MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_ENTRY_FACTORY);     
 427   3              #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 428   3              GraphicsPrint(RED,"(DVR_FACTORY_MODE)");  
 429   3              #endif
 430   3              }
 431   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 432   2            else
 433   2              {
 434   3              GraphicsPrint(RED,"(DVR_FACTORY_FAIL)");      
 435   3              }
 436   2            #endif
 437   2            
 438   2            break;
 439   2      
 440   2             case _USER_TIMER_EVENT_OSD_MCU_ENTRY_SLEEP_MODE:
 441   2          
 442   2              if(GET_DVR_EntrySleepMode()==_FALSE)
 443   2              {
 444   3              SET_TARGET_POWER_STATUS(_POWER_STATUS_SAVING);
 445   3              SET_DVR_EntrySleepMode();
 446   3              #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 447   3                GraphicsPrint(YELLOW,"(MCU_NORMAL_TO_SLEEP_MODE)");    
 448   3              #endif        
 449   3              }
 450   2              break;
 451   2      
 452   2        case _USER_TIMER_EVENT_OSD_DISTANCE_RESET:
 453   2          EncorderCount=0;
 454   2          EncorderLenint=0;
 455   2          EncorderLenfloaat=0;
 456   2          EncorderCountPN=0;
 457   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 458   2          GraphicsPrint(YELLOW,"\r\n ClearEncorder ",0);
 459   2          #endif
 460   2             //Printf("(DISTANCE_RESET)");   
 461   2             break;
 462   2      
 463   2         case _USER_TIMER_EVENT_OSD_DVR_REBOOT:
 464   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 465   2             GraphicsPrint(YELLOW,"(DVR_REBOOT)");  
 466   2             #endif
 467   2              if(GET_DVR_Reboot()==_TRUE) 
 468   2                {
 469   3                CLR_DVR_Reboot();
 470   3                CLR_DVR_SystemReadyNotic();
 471   3                 UserInterfaceBatteryChargeMode(_BATT_STATUS_DVR_OFF);
 472   3                MCUTimerActiveTimerEvent(SEC(3), _USER_TIMER_EVENT_OSD_DVR_REBOOT);
 473   3      
 474   3                P3M1=0x00;//p3.4 and P3.5 set output ryan@20210226
 475   3                }
 476   2              else
 477   2              {
 478   3                 UserInterfaceBatteryChargeMode(_BATT_STATUS_DVR_ON);
 479   3              }
 480   2              break;
 481   2      
 482   2         case _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN:
 483   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 9   

 484   2             GraphicsPrint(YELLOW,"(DVR_SHUTDOWN)");  
 485   2            #endif
 486   2            SET_DVR_Shutdown();
 487   2            MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN);
 488   2             MCUTimerActiveTimerEvent(SEC(15), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
 489   2             break;
 490   2      
 491   2            case  _USER_TIMER_EVENT_OSD_DVR_ENTER_ISP_MODE:
 492   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 493   2             GraphicsPrint(YELLOW,"(MCU_ENTER_ISP_MODE)");      
 494   2          #endif
 495   2              enter_isp();
 496   2             break;
 497   2      
 498   2        case _USER_TIMER_EVENT_OSD_ENCODER_DEVIATION_SETTING:     
 499   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 500   2            GraphicsPrint(YELLOW,"(ENCODER_SET)");  
 501   2            #endif
 502   2            break;
 503   2      
 504   2        case _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON:
 505   2          SET_PWCTRL();
 506   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 507   2          GraphicsPrint(YELLOW,"(Panel_ON)"); 
 508   2          #endif
 509   2             UserInterfacePowerSwitch(_POWER_ACTION_PANEL_POWER_ON);    
 510   2          break;
 511   2      
 512   2        case _USER_TIMER_EVENT_OSD_DVR_STOP_REBOOT:
 513   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 514   2          GraphicsPrint(YELLOW,"(DVR STOP REBOOT)");  
 515   2          #endif
 516   2          break;
 517   2      
 518   2        #if (_DEBUG_MESSAGE_Monitor==ON)
 519   2        case _USER_TIMER_EVENT_Monitor_ON:
 520   2         Monitor_flag=_FALSE;
 521   2          break;
 522   2        #endif
 523   2      
 524   2         default:   break;
 525   2         
 526   2      
 527   2      }
 528   1        
 529   1      }
 530          
 531          //--------------------------------------------------
 532          // Description  : Timer Handler
 533          // Input Value  : None
 534          // Output Value : None
 535          //--------------------------------------------------
 536          void SysTimerHandler(void)
 537          {
 538   1          BYTE ucTimerEventIndex = 0;
 539   1          BYTE ucTimerEventID = 0;    
 540   1          WORD usPresentTime = 0;
 541   1      
 542   1          for(ucTimerEventIndex = 0; ucTimerEventIndex < _TIMER_EVENT_COUNT; ucTimerEventIndex++)
 543   1          {
 544   2              usPresentTime = MCUTimerGetTimerCounter();
 545   2      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 10  

 546   2              if(MCUTimerCheckEventValid(ucTimerEventIndex) == _FALSE)
 547   2              {
 548   3                  continue;
 549   3              }         
 550   2              
 551   2              if(usPresentTime > MCUTimerGetEventTime(ucTimerEventIndex))
 552   2              {
 553   3                  MCUTimerClrEventValid(ucTimerEventIndex);
 554   3      
 555   3                  // Get Event ID From Event Index
 556   3                  ucTimerEventID = MCUTimerGetEventID(ucTimerEventIndex);
 557   3                  
 558   3                  if(ucTimerEventID < _USER_TIMER_EVENT_END)
 559   3                  {
 560   4                      UserInterfaceTimerEventProc(ucTimerEventID);
 561   4                      
 562   4                      continue;
 563   4                  }
 564   3      
 565   3                  if(ucTimerEventID < _SYSTEM_TIMER_EVENT_END)
 566   3                  {
 567   4                      SysTimerEventProc(ucTimerEventID);
 568   4                      
 569   4                      continue;
 570   4                  }
 571   3                  
 572   3               //   MCUTimerEventProc(ucTimerEventID);
 573   3              }
 574   2          }
 575   1      
 576   1      }
 577          
 578          //--------------------------------------------------
 579          // Description  : Timer Event Process
 580          // Input Value  : enumEventID --> Event to be processed
 581          // Output Value : None
 582          //--------------------------------------------------
 583          void SysTimerEventProc(EnumSystemTimerEventID enumEventID)
 584          {
 585   1      
 586   1      switch(enumEventID)
 587   1         { 
 588   2         case _SYSTEM_TIMER_EVENT_GRN_RED_OFF:
 589   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 590   2        break;
 591   2      
 592   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF:
 593   2         PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF);
 594   2        break;
 595   2      
 596   2         case _SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON: 
 597   2          PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 598   2        break;
 599   2      
 600   2         case _SYSTEM_TIMER_EVENT_GRN_RED_ON:
 601   2            PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_ON);
 602   2          break;
 603   2      
 604   2         case _SYSTEM_TIMER_EVENT_GRN_BLINK:
 605   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_BLINK);
 606   2           MCUTimerActiveTimerEvent(SEC(0.25), _SYSTEM_TIMER_EVENT_GRN_BLINK);
 607   2          break;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 11  

 608   2      
 609   2         case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK:
 610   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_BLINK);
 611   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_2S_BLINK);
 612   2          break;
 613   2      
 614   2         case _SYSTEM_TIMER_EVENT_RED_BLINK:
 615   2           PowerLED(_SYSTEM_TIMER_EVENT_RED_BLINK);
 616   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_RED_BLINK);
 617   2      
 618   2          break;  
 619   2      
 620   2        case _SYSTEM_TIMER_EVENT_GRN_RED_BLINK:
 621   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
 622   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
 623   2      
 624   2         break; 
 625   2      
 626   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK:
 627   2          PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
 628   2          MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
 629   2          break; 
 630   2          break;
 631   2      
 632   2         case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON:
 633   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON);
 634   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON);
 635   2              break;
 636   2       case _SYSTEM_TIMER_EVENT_BATT_LOW_RED_BLINK:
 637   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 638   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 639   2        MCUTimerDelayXms(500);
 640   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 641   2        MCUTimerDelayXms(500);
 642   2      
 643   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 644   2        MCUTimerDelayXms(500);
 645   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 646   2        MCUTimerDelayXms(500);
 647   2      
 648   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 649   2        MCUTimerDelayXms(500);
 650   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 651   2        MCUTimerDelayXms(500);
 652   2      
 653   2        SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
 654   2        break;
 655   2        
 656   2         case _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE:
 657   2        
 658   2          if(Check_ADAP_IN()==_TRUE)    
 659   2          {
 660   3            
 661   3                  if(GET_AC_PLUG()==_FALSE)
 662   3                  { 
 663   4          
 664   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE)==_TRUE)
 665   4                    {
 666   5                      #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 667   5                      GraphicsPrint(BLUE,"(AC1)");
 668   5                      #endif  
 669   5      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 12  

 670   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  
 671   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE); 
 672   5                    }
 673   4          
 674   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_AC_MODE)==_TRUE)
 675   4                    {
 676   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
 677   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE); 
 678   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 679   5                    GraphicsPrint(BLUE,"(AC2)");
 680   5                    #endif  
 681   5                    }
 682   4          
 683   4                  }
 684   3            
 685   3          }
 686   2          else
 687   2            {
 688   3              if(GET_AC_PLUG()==_TRUE)
 689   3              {
 690   4                    if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE)==_TRUE)
 691   4                    {
 692   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  
 693   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE); 
 694   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 695   5                    GraphicsPrint(BLUE,"(AC3)");
 696   5                    #endif
 697   5                    }
 698   4          
 699   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_AC_MODE)==_TRUE)
 700   4                    {
 701   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 702   5                    GraphicsPrint(BLUE,"(AC4)");
 703   5                    #endif  
 704   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
 705   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE); 
 706   5                    }
 707   4              }
 708   3            }
 709   2                
 710   2            MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE);   
 711   2            break;
 712   2       case _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA:
 713   2      
 714   2          if(GET_DVR_SystemReadyNotic()==_TRUE)          
 715   2           MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
 716   2          
 717   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 718   2           
 719   2        break;
 720   2        case _SYSTEM_TIMER_EVENT_POWER_OFF_ON_DELAY:
 721   2              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 722   2              GraphicsPrint(RED,"(CLR_DVR_PowerOFFDelay)");
 723   2              #endif
 724   2            CLR_DVR_PowerOFFDelay();
 725   2          break;
 726   2          case _SYSTEM_TIMER_EVENT_JUDGE_FIRST_GET_BATT_BTH_STATE:
 727   2            #if (_DEBUG_MESSAGE_BATTERY_TEST)
                    #else
 729   2            BatteryVoltage=GetBatteryVoltage();
 730   2      //      BatteryBTH=GetBatteryBTH()+7;
 731   2            BatteryBTH=GetBatteryBTH();
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 13  

 732   2            #endif
 733   2      
 734   2            if(BatteryVoltage<=BATTERY_CAPACITY_MIN) //<11.6V
 735   2              BATERY_STAT=_BATT_STATUS_CAPACITY_MIN;
 736   2              else if((BatteryVoltage>BATTERY_CAPACITY_MIN)&&(BatteryVoltage<=BATTERY_CAPACITY_NO_STARTUP))
 737   2                BATERY_STAT=_BATT_STATUS_CAPACITY_NO_STARTUP;       
 738   2              else if((BatteryVoltage>BATTERY_CAPACITY_NO_STARTUP)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL0))
 739   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL0;
 740   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL0)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL1))
 741   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL1;
 742   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL1)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL2))
 743   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL2;
 744   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL2)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL3))
 745   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL3;
 746   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL3)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH))
 747   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 748   2              else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH_STOP)&&(PowerFl
             -ag==ON))
 749   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 750   2              else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=(BATTERY_CAPACITY_HIGH_STOP+9))&&(Pow
             -erFlag==OFF))
 751   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 752   2              else          
 753   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX_STOP;
 754   2      
 755   2            SET_BATTERY_STATE(BATERY_STAT);
 756   2          
 757   2            SET_BATTERY_CAPACITY(BatteryVoltage);
 758   2      
 759   2      
 760   2            if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //High temperature.
 761   2              TEMP_STAT=_BATT_STATUS_TEMP_HIGH;
 762   2              else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
 763   2                TEMP_STAT=_BATT_STATUS_TEMP_HIGH_WARN;
 764   2              else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
 765   2                TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
 766   2              else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
 767   2                TEMP_STAT=_BATT_STATUS_TEMP_LOW_WARN;
 768   2              else if((BatteryBTH>BTH_TEMP_LOW)&&(BatteryBTH<=BATTERY_ACD_no_battery)) /// if(BatteryBTH>BTH_TEMP_LO
             -W)  //-5~-10 warnning
 769   2                TEMP_STAT=_BATT_STATUS_TEMP_LOW;
 770   2              else{
 771   3                SET_NO_BATTERY();
 772   3                SET_BATTERY_STATE(_BATT_STATUS_NO_BATT);
 773   3                TEMP_STAT=_BATT_STATUS_TEMP_NORMAL; ///no DC12V input
 774   3                }
 775   2      
 776   2              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
 777   2              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
 778   2      
 779   2              SET_BTH_STATE(TEMP_STAT); 
 780   2      
 781   2              STAT1_temp=GET_STAT1(); 
 782   2              if(STAT1_Flag!=STAT1_temp)
 783   2              STAT1_Flag=STAT1_temp;
 784   2                    
 785   2              STAT2_temp=GET_STAT2(); 
 786   2              if(STAT2_Flag!=STAT2_temp)
 787   2              STAT2_Flag=STAT2_temp;        
 788   2      
 789   2            /*
 790   2            if((BatteryBTH<=CHARGE_TEMP_HIGH)&&(BatteryBTH>CHARGE_TEMP_LOW))  
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 14  

 791   2              {
 792   2              if(GET_AC_PLUG()==_TRUE)  
 793   2                SET_CHARGE_TMEP_ABNORMAL();
 794   2      
 795   2              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
 796   2                    CLR_CHARGE_TMEP_ABNORMAL();
 797   2              }
 798   2            */
 799   2            break;
 800   2          case _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE:  
 801   2      
 802   2          #if (_DEBUG_MESSAGE_BATTERY_TEST)
                  #else
 804   2            BatteryVoltage=GetBatteryVoltage();
 805   2          #endif
 806   2          
 807   2            #if 1
 808   2          SET_BATTERY_CAPACITY(BatteryVoltage);
 809   2            
 810   2      //   if((GET_BATTERY_CAPACITY()<200)||(BatteryBTH>=935)) //no battery  <3.3V
 811   2      //     if(((GET_BATTERY_CAPACITY()<BATTERY_ACD_MIN)||(STAT1_Flag==1))&&(GET_AC_PLUG()==_TRUE)) //no battery
             -  <3.3V
 812   2      /*     if((GET_BATTERY_CAPACITY()<BATTERY_ACD_MIN)&&(GET_AC_PLUG()==_TRUE)) //no battery  <3.3V
 813   2              {
 814   2            SET_NO_BATTERY();
 815   2            SET_BATTERY_STATE(_BATT_STATUS_NO_BATT); 
 816   2              }
 817   2          else 
 818   2          */  
 819   2          {
 820   3            if(GET_NO_BATTERY()==_TRUE)
 821   3              {
 822   4              BattDetect1_COUNT=0;
 823   4              BattDetect2_COUNT=0;
 824   4              BattDetect3_COUNT=0;
 825   4              BattDetect4_COUNT=0;
 826   4              BattDetect5_COUNT=0;
 827   4              BattDetectMin_COUNT=0;
 828   4              BattDetectHigh_COUNT=0;
 829   4              BattDetectHighStop_COUNT=0;
 830   4              BattDetectNoStartUp_COUNT=0;
 831   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 832   4              }
 833   3              #if (_DEBUG_MESSAGE_Power_Supply_TEST==ON)
                      CLR_NO_BATTERY(); 
                      #endif
 836   3            if(BatteryVoltage<=BATTERY_CAPACITY_MIN) //<11.6V
 837   3            {
 838   4                  BattDetect1_COUNT=0;
 839   4                  BattDetect2_COUNT=0;
 840   4              BattDetect3_COUNT=0;
 841   4              BattDetect4_COUNT=0;
 842   4              BattDetect5_COUNT=0;              
 843   4              BattDetectMin_COUNT++;
 844   4              BattDetectHigh_COUNT=0;
 845   4              BattDetectHighStop_COUNT=0;
 846   4              BattDetectNoStartUp_COUNT=0;
 847   4            }
 848   3            else if((BatteryVoltage>BATTERY_CAPACITY_MIN)&&(BatteryVoltage<=BATTERY_CAPACITY_NO_STARTUP))
 849   3            {
 850   4            //_BATT_STATUS_CAPACITY_NO_STARTUP
 851   4                  BattDetect1_COUNT=0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 15  

 852   4                  BattDetect2_COUNT=0;
 853   4              BattDetect3_COUNT=0;
 854   4              BattDetect4_COUNT=0;
 855   4              BattDetect5_COUNT=0;              
 856   4              BattDetectMin_COUNT=0;
 857   4              BattDetectHigh_COUNT=0;
 858   4              BattDetectHighStop_COUNT=0;               
 859   4              BattDetectNoStartUp_COUNT++;
 860   4            } 
 861   3            else if((BatteryVoltage>BATTERY_CAPACITY_NO_STARTUP)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL0))
 862   3            {
 863   4            //_BATT_STATUS_CAPACITY_LEVEL0
 864   4                  BattDetect1_COUNT++;
 865   4                  BattDetect2_COUNT=0;
 866   4              BattDetect3_COUNT=0;
 867   4              BattDetect4_COUNT=0;
 868   4              BattDetect5_COUNT=0;              
 869   4              BattDetectMin_COUNT=0;
 870   4              BattDetectHigh_COUNT=0;
 871   4              BattDetectHighStop_COUNT=0;               
 872   4              BattDetectNoStartUp_COUNT=0;
 873   4            }     
 874   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL0)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL1))
 875   3            {
 876   4              // _BATT_STATUS_CAPACITY_LEVEL1
 877   4                BattDetect1_COUNT=0;
 878   4                    BattDetect2_COUNT++;
 879   4              BattDetect3_COUNT=0;
 880   4              BattDetect4_COUNT=0;
 881   4              BattDetect5_COUNT=0;
 882   4              BattDetectMin_COUNT=0;
 883   4              BattDetectHigh_COUNT=0;
 884   4              BattDetectNoStartUp_COUNT=0;
 885   4              
 886   4            }
 887   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL1)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL2))
 888   3            {
 889   4            //_BATT_STATUS_CAPACITY_LEVEL2
 890   4                BattDetect1_COUNT=0;
 891   4                    BattDetect2_COUNT=0;
 892   4              BattDetect3_COUNT++;
 893   4              BattDetect4_COUNT=0;
 894   4              BattDetect5_COUNT=0;
 895   4              BattDetectMin_COUNT=0;
 896   4              BattDetectHigh_COUNT=0;
 897   4              BattDetectHighStop_COUNT=0;
 898   4              BattDetectNoStartUp_COUNT=0;
 899   4              
 900   4            }
 901   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL2)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL3))
 902   3            {
 903   4              //_BATT_STATUS_CAPACITY_LEVEL3
 904   4                BattDetect1_COUNT=0;
 905   4                  BattDetect2_COUNT=0;
 906   4              BattDetect3_COUNT=0;
 907   4              BattDetect4_COUNT++;
 908   4              BattDetect5_COUNT=0;
 909   4              BattDetectMin_COUNT=0;
 910   4              BattDetectHigh_COUNT=0;
 911   4              BattDetectHighStop_COUNT=0;
 912   4              BattDetectNoStartUp_COUNT=0;
 913   4              
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 16  

 914   4            }
 915   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL4)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH))
 916   3            {
 917   4              //_BATT_STATUS_CAPACITY_LEVEL4
 918   4                BattDetect1_COUNT=0;
 919   4              BattDetect2_COUNT=0;
 920   4              BattDetect3_COUNT=0;
 921   4              BattDetect4_COUNT=0;
 922   4              BattDetect5_COUNT++;
 923   4              BattDetectMin_COUNT=0;
 924   4              BattDetectHigh_COUNT=0;
 925   4              BattDetectHighStop_COUNT=0;
 926   4              BattDetectNoStartUp_COUNT=0;
 927   4              
 928   4          
 929   4            }
 930   3            else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH_STOP)&&(PowerFla
             -g==ON))      
 931   3            {
 932   4              BattDetect1_COUNT=0;
 933   4              BattDetect2_COUNT=0;
 934   4              BattDetect3_COUNT=0;
 935   4              BattDetect4_COUNT=0;
 936   4              BattDetect5_COUNT=0;
 937   4              BattDetectMin_COUNT=0;
 938   4              BattDetectHigh_COUNT++; 
 939   4              BattDetectHighStop_COUNT=0;
 940   4              BattDetectNoStartUp_COUNT=0;
 941   4              
 942   4            }
 943   3            else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=(BATTERY_CAPACITY_HIGH_STOP+9))&&(Powe
             -rFlag==OFF))      
 944   3            {
 945   4              BattDetect1_COUNT=0;
 946   4              BattDetect2_COUNT=0;
 947   4              BattDetect3_COUNT=0;
 948   4              BattDetect4_COUNT=0;
 949   4              BattDetect5_COUNT=0;
 950   4              BattDetectMin_COUNT=0;
 951   4              BattDetectHigh_COUNT++; 
 952   4              BattDetectHighStop_COUNT=0;
 953   4              BattDetectNoStartUp_COUNT=0;
 954   4              
 955   4            }
 956   3            else///>BATTERY_CAPACITY_HIGH_STOP
 957   3            {
 958   4              BattDetect1_COUNT=0;
 959   4              BattDetect2_COUNT=0;
 960   4              BattDetect3_COUNT=0;
 961   4              BattDetect4_COUNT=0;
 962   4              BattDetect5_COUNT=0;
 963   4              BattDetectMin_COUNT=0;
 964   4              BattDetectHigh_COUNT=0; 
 965   4              BattDetectHighStop_COUNT++;
 966   4              BattDetectNoStartUp_COUNT=0;
 967   4            }
 968   3      
 969   3            if(BatteryVoltage>=BATTERY_CAPACITY_STARTUP)
 970   3            BattDetectStartUp_COUNT++;
 971   3            else    
 972   3            BattDetectStartUp_COUNT=0;
 973   3            
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 17  

 974   3            if(BattDetect1_COUNT==20)
 975   3            {
 976   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL0;
 977   4              BattDetect1_COUNT=0;
 978   4            }
 979   3            if(BattDetect2_COUNT==20)
 980   3            {
 981   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL1;
 982   4              BattDetect2_COUNT=0;
 983   4            }
 984   3            if(BattDetect3_COUNT==20)
 985   3            {
 986   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL2;
 987   4              BattDetect3_COUNT=0;
 988   4            }
 989   3            if(BattDetect4_COUNT==20)
 990   3            {
 991   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL3;
 992   4              BattDetect4_COUNT=0;
 993   4            }
 994   3            if(BattDetect5_COUNT==20)
 995   3            {
 996   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 997   4              BattDetect5_COUNT=0;
 998   4              /*
 999   4                if(bytBatteryStopCharge==_TRUE)
1000   4                {
1001   4                    bytBatteryStopCharge=_FALSE;
1002   4                  if(ReadEEP(EEP_BatteryStopCharge)==ON)
1003   4                    WriteEEP(EEP_BatteryStopCharge,OFF);
1004   4                  
1005   4                #if(_DEBUG_MESSAGE_Battery_Charge_Debug==ON)
1006   4                 GraphicsPrint(RED,"(bytBatteryStopCharge=0)");
1007   4                #endif
1008   4                }
1009   4              */
1010   4            }
1011   3      
1012   3            if(BattDetectMin_COUNT==20)
1013   3            {
1014   4            BATERY_STAT=_BATT_STATUS_CAPACITY_MIN;
1015   4            BattDetectMin_COUNT=0;
1016   4            }
1017   3            
1018   3            if(BattDetectHigh_COUNT==20)
1019   3            {
1020   4            BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
1021   4            BattDetectHigh_COUNT=0;
1022   4            }
1023   3      
1024   3            if(BattDetectNoStartUp_COUNT==20)
1025   3            {
1026   4            BATERY_STAT=_BATT_STATUS_CAPACITY_NO_STARTUP;
1027   4            BattDetectNoStartUp_COUNT=0;
1028   4            }
1029   3      
1030   3                if(BattDetectHigh_COUNT==20)
1031   3                {
1032   4                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
1033   4                BattDetectHigh_COUNT=0;
1034   4                }
1035   3      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 18  

1036   3              if(BattDetectHighStop_COUNT==20)
1037   3              {
1038   4              BATERY_STAT=_BATT_STATUS_CAPACITY_MAX_STOP;
1039   4              BattDetectHighStop_COUNT=0;
1040   4              }
1041   3      
1042   3              if(BATERY_STAT_TEMP!=BATERY_STAT)
1043   3              {
1044   4              BATERY_STAT_TEMP=BATERY_STAT;
1045   4              SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state. 
1046   4              }
1047   3      
1048   3            if(BattDetectStartUp_COUNT==20)
1049   3            { 
1050   4              if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1051   4                {
1052   5                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1053   5                 GraphicsPrint(RED,"(Normal Voltage Charge >12.5V)");
1054   5                #endif
1055   5                CLR_BATTERY_CAPACITY_LOW_FLAG();
1056   5                SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1057   5      
1058   5                  if(ReadEEP(EEP_LowBattery_Flag))
1059   5                    WriteEEP(EEP_LowBattery_Flag,OFF);
1060   5                }
1061   4              
1062   4            BattDetectStartUp_COUNT=0;
1063   4            }
1064   3      
1065   3            SET_BATTERY_STATE(BATERY_STAT);
1066   3        }
1067   2          //#if (_DEBUG_MESSAGE_SysTimerEvent==ON)
1068   2          //GraphicsPrint(CYAN,">");
1069   2          //#endif
1070   2              if(PowerFlag==OFF)
1071   2              MCUTimerActiveTimerEvent(SEC(0.1/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
1072   2              else
1073   2          MCUTimerActiveTimerEvent(SEC(0.3/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
1074   2            #else
                    SET_BATTERY_CAPACITY(BatteryVoltage);
                
                      
                     if((GET_BATTERY_CAPACITY()<200)||(BatteryBTH>=935)) //no battery  <3.3V
                      {
                    SET_NO_BATTERY();
                    SET_BATTERY_STATE(_BATT_STATUS_NO_BATT); 
                      }
                  else 
                    {
                    CLR_NO_BATTERY();   
                    
                  if(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVEL0)//<12V
                       SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL0);        
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL0)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L1))//12V-13.5V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL1);      
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL1)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L2))//14.2V-13.5V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL2);
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL2)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L3))//15V-14.2V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL3);  
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 19  

                  else    
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL4);//>15V
                    }   
              
                  MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
              
                  #endif
1102   2      
1103   2          break;
1104   2      
1105   2          case _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE:
1106   2          #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
1107   2          GraphicsPrint(CYAN,"\r\nPOWER key pressed");
1108   2          #endif
1109   2      
1110   2            if(GET_DVR_EntrySleepMode()==_TRUE)
1111   2            {
1112   3              SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1113   3              //CLR_DVR_EntrySleepMode();
1114   3              //MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SLEEP_WAKE_UP);
1115   3              #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
1116   3                GraphicsPrint(YELLOW,"(MCU_SLEEP_TO_NORMAL_MODE)");    
1117   3              #endif        
1118   3      
1119   3            }
1120   2            #if 0 //for test
                    else if(PowerFlag==ON)    
                      {
                    MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
                    PowerFlag=OFF;
                    WriteEEP(EEP_Powerflag,PowerFlag);
                      }
                    #else
1128   2            else if(PowerFlag==ON)    
1129   2            MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1130   2            #endif
1131   2            else
1132   2            {
1133   3                if(GET_DVR_PowerOFFDelay()==_FALSE)
1134   3                {
1135   4                  if((GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)||(Check_ADAP_IN()/*GET_AC_PLUG()*/==_TRUE))
1136   4                  {
1137   5                  PowerFlag=ON;
1138   5                  WriteEEP(EEP_Powerflag,PowerFlag);
1139   5                  }
1140   4                  else
1141   4                    {
1142   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1143   5                    GraphicsPrint(RED,"\r\n(Battery voltage low <12.5V...)");
1144   5                    #endif
1145   5                    MCUTimerActiveTimerEvent(SEC(0.01), _SYSTEM_TIMER_EVENT_BATT_LOW_RED_BLINK);
1146   5                    }
1147   4                  
1148   4                #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
1149   4                if(PWR_START_flag==ON)
1150   4                    GraphicsPrint(YELLOW,"(DC12V to Power on)");    
1151   4                #endif
1152   4                }
1153   3                else
1154   3                MCUTimerActiveTimerEvent(SEC(3), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);
1155   3                
1156   3            }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 20  

1157   2          
1158   2            break;
1159   2      case _SYSTEM_TIMER_EVENT_BATTERY_LOW_PWR_OFF:
1160   2           if(PowerFlag==ON)  
1161   2          MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1162   2        break;
1163   2          case _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE:
1164   2        
1165   2          #if (_DEBUG_MESSAGE_BATTERY_TEST)
                  #else
1167   2          BatteryBTH=GetBatteryBTH();
1168   2      
1169   2      //    if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1170   2      //      BatteryBTH=549;
1171   2          #endif
1172   2          
1173   2          //if((GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_STOP_CHARGE)&&(GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)
             -)
1174   2          //SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);
1175   2          //else
1176   2          //{
1177   2      
1178   2          #if 1
1179   2          if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //<11.6V
1180   2            {     
1181   3            TEMP_NORMAL_COUNT=0;
1182   3              TEMP_LOW_COUNT=0;
1183   3            TEMP_LOW_WARN_COUNT=0;
1184   3            TEMP_HIGH_COUNT++;
1185   3            TEMP_HIGH_WARN_COUNT=0;
1186   3            }
1187   2            else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
1188   2            {
1189   3            TEMP_NORMAL_COUNT=0;
1190   3              TEMP_LOW_COUNT=0;
1191   3            TEMP_LOW_WARN_COUNT=0;
1192   3            TEMP_HIGH_COUNT=0;
1193   3            TEMP_HIGH_WARN_COUNT++;
1194   3            }   
1195   2            else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
1196   2            {
1197   3            TEMP_NORMAL_COUNT++;
1198   3            TEMP_LOW_COUNT=0;
1199   3            TEMP_LOW_WARN_COUNT=0;
1200   3            TEMP_HIGH_COUNT=0;
1201   3            TEMP_HIGH_WARN_COUNT=0;
1202   3            }
1203   2            else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
1204   2              {
1205   3              TEMP_NORMAL_COUNT=0;
1206   3              TEMP_LOW_COUNT=0;
1207   3              TEMP_LOW_WARN_COUNT++;
1208   3              TEMP_HIGH_COUNT=0;
1209   3              TEMP_HIGH_WARN_COUNT=0;
1210   3      
1211   3              }
1212   2            else if((BatteryBTH>BTH_TEMP_LOW)&&(BatteryBTH<=BATTERY_ACD_no_battery))  //-5~-10 warnning
1213   2              {
1214   3              TEMP_NORMAL_COUNT=0;
1215   3              TEMP_LOW_COUNT++;
1216   3              TEMP_LOW_WARN_COUNT=0;
1217   3              TEMP_HIGH_COUNT=0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 21  

1218   3              TEMP_HIGH_WARN_COUNT=0;
1219   3              }
1220   2            else
1221   2              {
1222   3              #if (_DEBUG_MESSAGE_Power_Supply_TEST==ON)
                      #else
1224   3              SET_NO_BATTERY();
1225   3              SET_BATTERY_STATE(_BATT_STATUS_NO_BATT);
1226   3              #endif
1227   3              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL; ///no DC12V input
1228   3            TEMP_NORMAL_COUNT=0;
1229   3              TEMP_LOW_COUNT=0;
1230   3            TEMP_LOW_WARN_COUNT=0;
1231   3            TEMP_HIGH_COUNT=0;
1232   3            TEMP_HIGH_WARN_COUNT=0;         
1233   3              }
1234   2      
1235   2          if(((TEMP_NORMAL_COUNT>3)||(TEMP_LOW_COUNT>3)||(TEMP_LOW_WARN_COUNT>3)||(TEMP_HIGH_COUNT>3)||(TEMP_HIGH_
             -WARN_COUNT>3)\
1236   2            )&&(PWR_START_flag==ON)&&(PowerFlag==OFF)&&(GET_NO_BATTERY()==_TRUE))
1237   2          PowerFlag=ON;
1238   2      
1239   2            
1240   2          if(TEMP_HIGH_COUNT==TempADC_Counts)
1241   2          {
1242   3            TEMP_STAT=_BATT_STATUS_TEMP_HIGH;
1243   3            TEMP_HIGH_COUNT=0;
1244   3            CLR_BATTERY_HIGH_TMEP_WARN();
1245   3            CLR_BATTERY_LOW_TMEP_WARN();  
1246   3            CLR_NO_BATTERY();
1247   3          }
1248   2      
1249   2          if(TEMP_HIGH_WARN_COUNT==TempADC_Counts)
1250   2          {
1251   3            TEMP_STAT=_BATT_STATUS_TEMP_HIGH_WARN;
1252   3            TEMP_HIGH_WARN_COUNT=0;
1253   3            SET_BATTERY_HIGH_TMEP_WARN();
1254   3            CLR_BATTERY_LOW_TMEP_WARN();
1255   3            CLR_NO_BATTERY();   
1256   3          }
1257   2      
1258   2          if(TEMP_NORMAL_COUNT==TempADC_Counts)
1259   2          {
1260   3            TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
1261   3            TEMP_NORMAL_COUNT=0;
1262   3            CLR_BATTERY_LOW_TMEP_WARN();
1263   3            CLR_BATTERY_HIGH_TMEP_WARN();
1264   3            CLR_NO_BATTERY();   
1265   3          }
1266   2      
1267   2          if(TEMP_LOW_WARN_COUNT==TempADC_Counts)
1268   2          {
1269   3            TEMP_STAT=_BATT_STATUS_TEMP_LOW_WARN;
1270   3            TEMP_LOW_WARN_COUNT=0;
1271   3            SET_BATTERY_LOW_TMEP_WARN();
1272   3            CLR_BATTERY_HIGH_TMEP_WARN();
1273   3            CLR_NO_BATTERY();     
1274   3          }
1275   2      
1276   2          if(TEMP_LOW_COUNT==TempADC_Counts)
1277   2          {
1278   3            TEMP_STAT=_BATT_STATUS_TEMP_LOW;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 22  

1279   3            TEMP_LOW_COUNT=0;
1280   3            CLR_BATTERY_LOW_TMEP_WARN();
1281   3            CLR_BATTERY_HIGH_TMEP_WARN(); 
1282   3            CLR_NO_BATTERY();   
1283   3          }
1284   2      /*
1285   2          if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1286   2            {
1287   2              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
1288   2              CLR_BATTERY_LOW_TMEP_WARN();
1289   2              CLR_BATTERY_HIGH_TMEP_WARN();
1290   2      
1291   2            }
1292   2          */
1293   2          SET_BTH_STATE(TEMP_STAT);
1294   2      
1295   2      
1296   2            if((BatteryBTH<=CHARGE_TEMP_HIGH)||(BatteryBTH>CHARGE_TEMP_LOW))  
1297   2              {
1298   3              CHARGE_TEMP_ABNORMAL++;
1299   3              CHARGE_TEMP_NORMAL=0;
1300   3              }
1301   2              else
1302   2              {
1303   3              CHARGE_TEMP_ABNORMAL=0;
1304   3              CHARGE_TEMP_NORMAL++;
1305   3              //CLR_CHARGE_TMEP_ABNORMAL();
1306   3              }
1307   2              
1308   2              if(CHARGE_TEMP_ABNORMAL==TempADC_Counts)
1309   2                {
1310   3                CHARGE_TEMP_ABNORMAL=0;
1311   3                  if((GET_AC_PLUG()==_TRUE)&&(GET_NO_BATTERY()==_FALSE))      
1312   3                  SET_CHARGE_TMEP_ABNORMAL();
1313   3                
1314   3                //  if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
1315   3                //    CLR_CHARGE_TMEP_ABNORMAL();                     
1316   3                }
1317   2              else  if(CHARGE_TEMP_NORMAL==TempADC_Counts)
1318   2                {
1319   3                CHARGE_TEMP_NORMAL=0;
1320   3                CLR_CHARGE_TMEP_ABNORMAL();
1321   3                }
1322   2          #else
                      if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //>55
                      SET_BTH_STATE(_BATT_STATUS_TEMP_HIGH);          
                    else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
                      {
                      SET_BATTERY_HIGH_TMEP_WARN();   
                      CLR_BATTERY_LOW_TMEP_WARN();  
                      }
                    else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
                      {
                      SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);        
                      CLR_BATTERY_LOW_TMEP_WARN();
                      CLR_BATTERY_HIGH_TMEP_WARN();
                      }
                    else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
                      {
                      //SET_BATTERY_LOW_TMEP_WARN();
                      //CLR_BATTERY_HIGH_TMEP_WARN(); 
                      }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 23  

                    else if(BatteryBTH>BTH_TEMP_LOW)  //-5~-10 warnning
                      {
                      SET_BTH_STATE(_BATT_STATUS_TEMP_LOW);       
                      CLR_BATTERY_LOW_TMEP_WARN();
                      CLR_BATTERY_HIGH_TMEP_WARN();
                      }
                    else 
                      SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);
                    
              
                    #endif  
1352   2          //}
1353   2            if(PowerFlag==OFF)
1354   2              MCUTimerActiveTimerEvent(SEC(0.1/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
1355   2              else
1356   2          MCUTimerActiveTimerEvent(SEC(0.2/*0.3*//*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
1357   2          break;
1358   2      
1359   2          case _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO:
1360   2      
1361   2      
1362   2            if(GET_DVR_WDTkickDisable()==_FALSE)
1363   2            {
1364   3            #if(_DEBUG_MESSAGE_WDT_KICK_CHECK == ON)    
1365   3            GraphicsPrint(RED,"\r\n(WDT kick over 10 seconds, Try to reboot the DVR)"); 
1366   3            #endif
1367   3            SET_DVR_Reboot();
1368   3            SET_DVR_RebootAndPower();
1369   3            MCUTimerActiveTimerEvent(SEC(1), _USER_TIMER_EVENT_OSD_DVR_REBOOT);
1370   3            }
1371   2          break;
1372   2      
1373   2          case _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE:
1374   2          
1375   2              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1376   2              GraphicsPrint(CYAN,"(AC)");
1377   2              if(GET_STAT1()==ON)
1378   2                GraphicsPrint(GREEN,"(S1=1)");
1379   2              else
1380   2                GraphicsPrint(GREEN,"(S1=0)");
1381   2              
1382   2              if(GET_STAT2()==ON)
1383   2                GraphicsPrint(MAGENTA,"(S2=1)");
1384   2              else
1385   2                GraphicsPrint(MAGENTA,"(S2=0)");
1386   2                
1387   2              #endif
1388   2              
1389   2                  if(Check_ADAP_IN()==_TRUE)
1390   2                  {
1391   3                    if(GET_AC_PLUG()!=_TRUE)
1392   3                    {
1393   4                      SET_AC_PLUG();
1394   4                      //SET_AC_MODE();  // turn on AC mode
1395   4                      CLR_AC_MODE();  // turn on AC mode
1396   4                      //MCUTimerDelayXms(100);//delay 50ms    
1397   4                      //CLR_BAT_SYS();// turn off battery output              
1398   4                      //SET_PWM(_CHG_CURR,Low_Current);
1399   4      
1400   4                      STAT1_temp=GET_STAT1(); 
1401   4                      if(STAT1_Flag!=STAT1_temp)
1402   4                      STAT1_Flag=STAT1_temp;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 24  

1403   4                      
1404   4                      STAT2_temp=GET_STAT2(); 
1405   4                      if(STAT2_Flag!=STAT2_temp)
1406   4                      STAT2_Flag=STAT2_temp;
1407   4      
1408   4                    }         
1409   3                  
1410   3                  if(GET_NO_BATTERY()==_TRUE)
1411   3                    {
1412   4                  MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT);                
1413   4                    }
1414   3                  else
1415   3                    {
1416   4                    
1417   4                  if(GET_POWER_STATUS()==_POWER_STATUS_NORMAL)
1418   4                  {
1419   5                    
1420   5                    if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_BA
             -TTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1421   5                      {
1422   6                        if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1423   6                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE);                   
1424   6                        else
1425   6                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);  
1426   6                      }
1427   5                    else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1428   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1429   5                    else
1430   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);   
1431   5                  }
1432   4                  else if(GET_POWER_STATUS()==_POWER_STATUS_SAVING)
1433   4                    {
1434   5                    
1435   5                    if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_BA
             -TTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1436   5                      {
1437   6                      if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1438   6                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE);                   
1439   6                      else
1440   6                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);
1441   6                      }
1442   5                      else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1443   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1444   5                      else
1445   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE); 
1446   5                    }
1447   4                  else if(GET_POWER_STATUS()==_POWER_STATUS_OFF)
1448   4                    {
1449   5                      
1450   5                      if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_B
             -ATTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1451   5                        {
1452   6                        if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1453   6                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_HIGH_CHARGE); 
1454   6                        else
1455   6                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);  
1456   6                        }
1457   5                      else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1458   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1459   5                      else
1460   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE); 
1461   5                    }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 25  

1462   4                          
1463   4                  
1464   4                    }
1465   3                
1466   3                  MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);   //repeat on AC mode
1467   3      
1468   3      
1469   3                  }
1470   2                else
1471   2                  {
1472   3                  CLR_AC_PLUG();
1473   3                  CLR_AC_MODE();  // turn off AC mode
1474   3                  SET_AC_PLUG_OUT();
1475   3                  CLR_BATTERY_CAPACITY_HIGH_FLAG(); 
1476   3                  if((PWR_START_flag==ON)&&(PowerFlag==ON))
1477   3                  MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN);///SET_AC_PLUG_OUT             
1478   3                  MCUTimerActiveTimerEvent(SEC(0.5), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);  //change battery mode          
1479   3                  MCUTimerActiveTimerEvent(SEC(0.5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  //going to battery mode
1480   3                  }
1481   2      
1482   2                CLR_AC_MODE();  
1483   2                    //CLR_BAT_SYS();
1484   2          break;
1485   2                      case _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE:
1486   2      
1487   2                    STAT1_temp=GET_STAT1();
1488   2                    STAT2_temp=GET_STAT2();
1489   2                  
1490   2                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1491   2                    GraphicsPrint(YELLOW,"(STAT1_temp=%02x)",(WORD)STAT1_temp);
1492   2                    #endif  
1493   2                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1494   2                    GraphicsPrint(GREEN,"(STAT2_temp=%02x)",(WORD)STAT2_temp);
1495   2                    #endif  
1496   2                    
1497   2                    if((STAT1_Flag!=STAT1_temp)&&(GET_NO_BATTERY()==_FALSE))
1498   2                      {
1499   3                      STAT1_Flag=STAT1_temp;
1500   3                      SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.              
1501   3                      }
1502   2                    
1503   2                      if((STAT2_Flag!=STAT2_temp)&&(GET_NO_BATTERY()==_FALSE))
1504   2                      {
1505   3                      STAT2_Flag=STAT2_temp;
1506   3                      SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.              
1507   3                      }
1508   2            
1509   2                #if 1
1510   2                    if(GET_BATTERY_ABNORMAL()==_FALSE)
1511   2                    { 
1512   3                        if(GET_BATTERY_CAPACITY()>=BATTERY_ACD_MAX)//>17    
1513   3                        {
1514   4                        #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1515   4                        GraphicsPrint(RED,"( HigH Voltage >17V shut down)");
1516   4                        #endif
1517   4                        SET_BATTERY_ABNORMAL();
1518   4                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
1519   4                        }
1520   3                  
1521   3                    }
1522   2      
1523   2                        switch(GET_BATTERY_STATE())
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 26  

1524   2                        {
1525   3      
1526   3                      case _BATT_STATUS_CAPACITY_MAX_STOP:
1527   3                        
1528   3                          if((GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)/*&&(_BATT_STATUS_CAPACITY_MAX_STOP_Count>20)*/)
1529   3                          {
1530   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1531   4                          GraphicsPrint(RED,"(HIGH Voltage >16.4V stop charge)");
1532   4                          #endif  
1533   4                          SET_BATTERY_CAPACITY_HIGH_FLAG();   
1534   4                          }
1535   3                          /*
1536   3                          else
1537   3                            {
1538   3                            _BATT_STATUS_CAPACITY_MAX_STOP_Count++;
1539   3                              if(_BATT_STATUS_CAPACITY_MAX_STOP_Count>200)
1540   3                                _BATT_STATUS_CAPACITY_MAX_STOP_Count=0;
1541   3                            }
1542   3                          */
1543   3                         if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1544   3                         {     
1545   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1546   4                           GraphicsPrint(RED,"(2.Normal Voltage Charge >12V)");
1547   4                          #endif
1548   4                         CLR_BATTERY_CAPACITY_LOW_FLAG();  
1549   4                         SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1550   4                          if(ReadEEP(EEP_LowBattery_Flag))
1551   4                            WriteEEP(EEP_LowBattery_Flag,OFF);
1552   4                         }
1553   3                         CLR_CHARGE_START_FLAG();
1554   3      
1555   3                        #if 0
                                if(bytBatteryStopCharge==_FALSE)
                                {
              
                                if(bytBatteryStopChargeCount>20)
                                  {
                                  bytBatteryStopCharge=_TRUE;
                                  if(ReadEEP(EEP_BatteryStopCharge)==OFF)
                                  WriteEEP(EEP_BatteryStopCharge,ON);
              
                                  #if(_DEBUG_MESSAGE_Battery_Charge_Debug==ON)
                                    GraphicsPrint(RED,"(bytBatteryStopCharge=1)");
                                  #endif
                                  }
                                else
                                  { 
                                  bytBatteryStopChargeCount++;
                                  if(bytBatteryStopChargeCount>200)
                                    bytBatteryStopChargeCount=0;
              
                                  #if(_DEBUG_MESSAGE_Battery_Charge_Debug==ON)
                                    GraphicsPrint(RED,"(bytBatteryStopChargeCount=%d)",(WORD)bytBatteryStopChargeCount);
                                  #endif
                                  }
                                }
                                  #endif  
1581   3                        break;
1582   3                      case _BATT_STATUS_CAPACITY_MIN:
1583   3                      case _BATT_STATUS_CAPACITY_NO_STARTUP:
1584   3                          if((GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)&&(GET_DVR_SystemReadyNotic()==_FALSE)&&(GET_AC_PLUG
             -()==_FALSE))
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 27  

1585   3                          {
1586   4                          SET_BATTERY_CAPACITY_LOW_FLAG();  
1587   4                          
1588   4                          if(ReadEEP(EEP_LowBattery_Flag)==OFF)
1589   4                          WriteEEP(EEP_LowBattery_Flag,ON);
1590   4                          
1591   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1592   4                          GraphicsPrint(RED,"( Low Voltage <11.8V or < 11.6V shut down)");
1593   4                          #endif  
1594   4                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);  
1595   4                          }
1596   3                          else  if((GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)&&(PowerFlag==ON)&&(GET_AC_PLUG()==_FALS
             -E))
1597   3                          {
1598   4                          PowerFlag=OFF;
1599   4                          WriteEEP(EEP_Powerflag,PowerFlag);
1600   4                        
1601   4                          if(GET_DVR_EntrySleepMode()==TRUE)
1602   4                          CLR_DVR_EntrySleepMode();
1603   4                          }
1604   3      
1605   3                          if(GET_DVR_EntrySleepMode()==_TRUE)
1606   3                          {
1607   4                          SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1608   4                          #if (_DEBUG_MESSAGE_SysTimerEvent==ON)
1609   4                            GraphicsPrint(RED,"(MCU_SLEEP_TO_NORMAL_MODE: Low Voltage <12V)");    
1610   4                          #endif  
1611   4                          }
1612   3                          
1613   3                          CLR_BATTERY_CAPACITY_HIGH_FLAG();       
1614   3                          SET_CHARGE_START_FLAG();
1615   3                        break;
1616   3      
1617   3                       case _BATT_STATUS_CAPACITY_LEVEL0:
1618   3                         CLR_BATTERY_CAPACITY_HIGH_FLAG();   
1619   3                        //  CLR_BATTERY_CAPACITY_LOW_FLAG();  
1620   3                          if(GET_DVR_EntrySleepMode()==_TRUE)
1621   3                          {
1622   4                          SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1623   4                          #if (_DEBUG_MESSAGE_SysTimerEvent==ON)
1624   4                            GraphicsPrint(RED,"(MCU_SLEEP_TO_NORMAL_MODE: Low Voltage <12V)");    
1625   4                          #endif  
1626   4                          }
1627   3                        break;
1628   3                       case _BATT_STATUS_CAPACITY_LEVEL1:                 
1629   3                       case _BATT_STATUS_CAPACITY_LEVEL2:
1630   3                       case _BATT_STATUS_CAPACITY_LEVEL3:
1631   3                       case _BATT_STATUS_CAPACITY_LEVEL4:
1632   3                       case _BATT_STATUS_CAPACITY_MAX:
1633   3      
1634   3                         SET_CHARGE_START_FLAG();
1635   3                         /*
1636   3                         if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1637   3                         {     
1638   3                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1639   3                           GraphicsPrint(RED,"(Normal Voltage Charge >12V)");
1640   3                          #endif
1641   3                         CLR_BATTERY_CAPACITY_LOW_FLAG();  
1642   3                         SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1643   3                         }  
1644   3                         */
1645   3                         CLR_BATTERY_CAPACITY_HIGH_FLAG();   
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 28  

1646   3                          break;
1647   3                      //case _BATT_STATUS_CAPACITY_MAX:
1648   3                      //  CLR_CHARGE_START_FLAG();
1649   3                        
1650   3                        //break;
1651   3                        }
1652   2            #else
                            if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
                            { 
                              if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)//<11.6V    
                              {
                              SET_BATTERY_CAPACITY_LOW_FLAG();                                      
                              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                              GraphicsPrint(RED,"( Low Voltage <11.6V shut down)");
                              #endif                                      
                              MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
                              }             
                              
                            }
              
                
                            if(GET_BATTERY_ABNORMAL()==_FALSE)
                            { 
                                if(GET_BATTERY_CAPACITY()>=BATTERY_ACD_MAX)//>17    
                                {
                                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                GraphicsPrint(RED,"( HigH Voltage >17V shut down)");
                                #endif
                                SET_BATTERY_ABNORMAL();
                                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
                                }
                          
                            }
                      //}
              
                              if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
                              {   
                                if(GET_BATTERY_STATE()!=_BATT_STATUS_CAPACITY_MIN)//<11.6V    
                                {
                                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                GraphicsPrint(RED,"(Normal Voltage Charge >12V)");
                                #endif
                                CLR_BATTERY_CAPACITY_LOW_FLAG();  
                                SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
                                }         
                              }
                          //  if(((GET_BATTERY_CAPACITY()>675)||(GET_BATTERY_CAPACITY()<1023))&&(GET_BATTERY_ABNORMAL()==_TRUE)
             -)    
                            //      CLR_BATTERY_ABNORMAL();
              
                            if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)//>16.4V
                            {
                                  if(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)
                                  {
                                  #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                  GraphicsPrint(RED,"(HIGH Voltage >15.5V stop charge)");
                                  #endif  
                                  SET_BATTERY_CAPACITY_HIGH_FLAG();   
                                  //SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
                                  }
                                  
                            }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 29  

                            else
                              CLR_BATTERY_CAPACITY_HIGH_FLAG(); 
                            
                    #endif        
1711   2                MCUTimerActiveTimerEvent(SEC(10-5), _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE);  //check charge
1712   2                break;
1713   2          case     _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE:
1714   2            #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1715   2            GraphicsPrint(CYAN,"(BATT)");
1716   2              if(GET_STAT1()==ON)
1717   2                GraphicsPrint(MAGENTA,"(S1=1)");
1718   2              else
1719   2                GraphicsPrint(GREEN,"(S1=0)");
1720   2              
1721   2              if(GET_STAT2()==ON)
1722   2                GraphicsPrint(MAGENTA,"(S2=1)");
1723   2              else
1724   2                GraphicsPrint(GREEN,"(S2=0)");
1725   2            #endif
1726   2          
1727   2            if(Check_ADAP_IN()==_TRUE)
1728   2              {
1729   3      
1730   3                if((PWR_START_flag==ON)&&(PowerFlag==OFF))
1731   3                {
1732   4                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);
1733   4                }
1734   3      
1735   3              SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
1736   3              MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
1737   3              }
1738   2            else 
1739   2              {
1740   3              if(GET_BAT_SYS()!=ON)
1741   3                {
1742   4                //SET_BAT_SYS();   // turn on  battery mode
1743   4                //CLR_BAT_SYS();   // turn on  battery mode
1744   4                //MCUTimerDelayXms(100);//delay 50ms          
1745   4                CLR_AC_MODE();  // turn off AC mode
1746   4                }
1747   3      
1748   3                //if((GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)&&(PowerFlag==ON))
1749   3                //MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1750   3      
1751   3                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);       
1752   3      
1753   3      
1754   3              MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);
1755   3              }
1756   2      
1757   2                CLR_AC_MODE();  
1758   2                    //CLR_BAT_SYS();
1759   2            break;
1760   2      
1761   2            case _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE: 
1762   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_LOW_CHARGE)
1763   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_LOW_CHARGE);
1764   2          break;
1765   2      
1766   2        case  _SYSTEM_TIMER_EVENT_BATT_HIGH_CHARGE:   
1767   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_HIGH_CHARGE)
1768   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_HIGH_CHARGE);         
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 30  

1769   2              break;
1770   2        case  _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE:   
1771   2            if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_NORMAL_CHARGE)
1772   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_NORMAL_CHARGE);             
1773   2            break;
1774   2      
1775   2        case  _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE:   
1776   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_STOP_CHARGE)
1777   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_STOP_CHARGE);         
1778   2            break;
1779   2      
1780   2      
1781   2        case  _SYSTEM_TIMER_EVENT_NO_BATT:  
1782   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_NO_BATT)
1783   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_NO_BATT);         
1784   2              break;
1785   2            
1786   2      
1787   2              case _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER:
1788   2        
1789   2            second+=10;
1790   2          
1791   2            if(second==60)
1792   2            {
1793   3              second=0;
1794   3              minute++;
1795   3            }
1796   2        
1797   2            if(minute==60)
1798   2            {
1799   3              minute=0;
1800   3              hour++;
1801   3            }
1802   2        
1803   2            if(hour==24)
1804   2            {
1805   3              hour=0;
1806   3              day++;
1807   3            } 
1808   2      
1809   2          ShowWorkingTimer();
1810   2      
1811   2          MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);
1812   2             break;
1813   2      #if (_POWER_DOWN_ENABLE==ON)
1814   2          case _SYSTEM_TIMER_POWER_DOWN_MODE:
1815   2          //SET_MCU_POWER_DOWN_MODE();
1816   2          Power_down_mode=2;
1817   2              
1818   2          break;
1819   2      #endif
1820   2         default:
1821   2                  break;
1822   2       }
1823   1      }
1824          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5729    ----
   CONSTANT SIZE    =    775    ----
   XDATA SIZE       =     93      19
C51 COMPILER V9.60.0.0   SYSTIMER                                                          05/04/2021 17:40:40 PAGE 31  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
