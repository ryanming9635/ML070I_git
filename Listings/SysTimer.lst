C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SYSTIMER
OBJECT MODULE PLACED IN .\Output\SysTimer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SysTimer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECT
                    -EXTEND PRINT(.\Listings\SysTimer.lst) TABS(2) OBJECT(.\Output\SysTimer.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  SysTimer.c                                                                */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          
   9          
  10          #include <math.h>
  11          #include <stdio.h>
  12          
  13          #include "Config.h"
  14          
  15          #include "reg.h"
  16          #include "typedefs.h"
  17          #include "main.h"
  18          #include "i2c.h"
  19          #include "adc.h"
  20          #include "etc_eep.h"
  21          #include "Printf.h"
*** WARNING C320 IN LINE 44 OF .\Include\Printf.h: DEBUG is defined 
  22          #include "KeyRemo.h"
  23          #include "Monitor.h"
  24          #include "CPU.h"
  25          #include "HS_DVRProtocol.h"
  26          
  27          
  28          //****************************************************************************
  29          // DEFINITIONS / MACROS
  30          //****************************************************************************
  31          #define GET_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid)
  32          #define SET_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid = _TRUE)
  33          #define CLR_EVENT_VALID(x)                      (g_stTimerEvent[x].b1EventValid = _FALSE)
  34          
  35          #define GET_EVENT_ID(x)                         (g_stTimerEvent[x].b7EventID)
  36          #define SET_EVENT_ID(x, y)                      (g_stTimerEvent[x].b7EventID = y)
  37          
  38          #define GET_EVENT_TIME(x)                       (g_stTimerEvent[x].usTime)
  39          #define SET_EVENT_TIME(x, y)                    (g_stTimerEvent[x].usTime = y)
  40          
  41          
  42          //****************************************************************************
  43          // VARIABLE DECLARATIONS
  44          //****************************************************************************
  45          bit g_bNotifyTimer0Int = _FALSE;
  46          volatile WORD  g_usTimerCounter = 0;
  47          StructTimerEventTableType g_stTimerEvent[_TIMER_EVENT_COUNT];
  48          WORD BatteryBTH=549/*156*//*650*//*880*/,BatteryVoltage=880;
  49          BYTE WDT_Echo_Count=0;
  50          BYTE STAT1_temp=OFF, STAT2_temp=ON,STAT1_Flag=OFF,STAT2_Flag=ON;
  51          
  52          BYTE BattDetect1_COUNT=0, BattDetect2_COUNT=0, BattDetect3_COUNT=0, BattDetect4_COUNT=0,BattDetect5_COUNT=
             -0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 2   

  53          BYTE BattDetectMin_COUNT=0, BattDetectHigh_COUNT=0,BattDetectHighStop_COUNT=0,BattDetectNoStartUp_COUNT=0,
             -BattDetectStartUp_COUNT=0;
  54          BYTE  BATERY_STAT=0xFF,BATERY_STAT_TEMP=0xFE;
  55          BYTE TEMP_NORMAL_COUNT=0,TEMP_LOW_COUNT=0, TEMP_LOW_WARN_COUNT=0, TEMP_HIGH_COUNT=0,TEMP_HIGH_WARN_COUNT=0
             -;
  56          BYTE TEMP_STAT=0xFF;
  57          BYTE PWM_TEMP=0;  
  58          BYTE CHARGE_TEMP_ABNORMAL=0;
  59          BYTE CHARGE_TEMP_NORMAL=0;
  60          
  61          #if (_DEBUG_MESSAGE_Monitor==ON)
  62          bit Monitor_flag=OFF;
  63          #endif
  64          
  65          extern BYTE PowerFlag;
  66          extern BYTE CameraVolt;
  67          extern BYTE PWR_START_flag;
  68          extern StructBatteryInfoType g_stBatteryInfo;
  69          extern BYTE EncorderCountPN;
  70          extern BYTE EncorderLenint;
  71          extern short EncorderCount;
  72          extern WORD EncorderLenfloaat;
  73          extern StructPowerInfoType idata g_stPowerInfo;
  74          extern BYTE day,hour,minute,second;
  75          extern StructDVRInfoType g_stDVRInfo;
  76          extern BYTE Power_down_mode;
  77          extern DWORD ulongRotateNumber;
  78          
  79          
  80          //--------------------------------------------------
  81          // Definitions of Timer2
  82          //--------------------------------------------------
  83          #define _EVENT_TIME_MAX                         61000 // Please do not modify this value.
  84          
  85          //****************************************************************************
  86          // CODE TABLES
  87          //****************************************************************************
  88          
  89          
  90          //****************************************************************************
  91          // FUNCTION DECLARATIONS
  92          //****************************************************************************
  93          void SysTimerHandler(void);
  94          void SysTimerEventProc(EnumSystemTimerEventID enumEventID);
  95          void MCUTimerInitialTimerEvent(void);
  96          void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID);
  97          void MCUTimerCancelTimerEvent(BYTE ucEventID);
  98          void MCUTimerDelayXms(WORD usNum);
  99          extern WORD GetBatteryBTH(void);
 100          extern WORD GetBatteryVoltage(void);
 101          extern void SetAD5110Step(BYTE newv) ;
 102          extern void UserInterfacePowerSwitch(EnumPowerAction enumSwitch);
 103          extern void SysPowerSwitch(EnumPowerAction enumSwitch);
 104          extern void UserInterfaceBatteryChargeMode(EnumBatteryStatus enumSwitch);
 105          extern void SET_MCU_POWER_DOWN_MODE(void);
 106          
 107          
 108          //****************************************************************************
 109          // FUNCTION DEFINITIONS
 110          //****************************************************************************
 111          //--------------------------------------------------
 112          // Description  : Timer Delay
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 3   

 113          // Input Value  : usNum --> Delay in ms
 114          // Output Value : None
 115          //--------------------------------------------------
 116          void MCUTimerDelayXms(WORD usNum)
 117          {
 118   1          if(usNum)
 119   1          {
 120   2              g_bNotifyTimer0Int = _FALSE;
 121   2      
 122   2              while(_TRUE)
 123   2              {
 124   3                  if(g_bNotifyTimer0Int)
 125   3                  {
 126   4                      g_bNotifyTimer0Int = _FALSE;
 127   4      
 128   4                      if(--usNum)
 129   4                      {
 130   5                      }
 131   4                      else
 132   4                      {
 133   5                          return;
 134   5                      }
 135   4                  }
 136   3              }
 137   2          }
 138   1      }
 139          
 140          //--------------------------------------------------
 141          // Description  : Get Event Time
 142          // Input Value  : ucEventIndex --> Event which time is needed
 143          // Output Value : Event Time
 144          //--------------------------------------------------
 145          WORD MCUTimerGetEventTime(BYTE ucEventIndex)
 146          {
 147   1          return GET_EVENT_TIME(ucEventIndex);
 148   1      }
 149          
 150          //--------------------------------------------------
 151          // Description  : Get Event ID
 152          // Input Value  : Referenced Event Index
 153          // Output Value : Stored Event ID
 154          //--------------------------------------------------
 155          BYTE MCUTimerGetEventID(BYTE ucEventIndex)
 156          {
 157   1          return GET_EVENT_ID(ucEventIndex);
 158   1      }
 159          
 160          //--------------------------------------------------
 161          // Description  : Clear Event Time
 162          // Input Value  : ucEventIndex --> Event which time is needed to be cleared
 163          // Output Value : None
 164          //--------------------------------------------------
 165          
 166          
 167          void MCUTimerClrEventValid(BYTE ucEventIndex)
 168          {
 169   1          CLR_EVENT_VALID(ucEventIndex);
 170   1      }
 171          
 172          //--------------------------------------------------
 173          // Description  : Check if Event is Valid
 174          // Input Value  : ucEventIndex --> Event to be checked
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 4   

 175          // Output Value : Validity(_TRUE/_FALSE)
 176          //--------------------------------------------------
 177          bit MCUTimerCheckEventValid(BYTE ucEventIndex)
 178          {
 179   1          return GET_EVENT_VALID(ucEventIndex);;
 180   1      }
 181          
 182          //--------------------------------------------------
 183          // Description  : Get Timer Counter.
 184          // Input Value  : None
 185          // Output Value : Timer Counter
 186          //--------------------------------------------------
 187          WORD MCUTimerGetTimerCounter(void)
 188          {
 189   1          WORD usPresentTime = g_usTimerCounter;
 190   1         
 191   1          // When get counter,timer interrupt maybe change counter.
 192   1          // Get twice to avoid it.
 193   1          if(abs(g_usTimerCounter - usPresentTime) > 0x7F)
 194   1          {
 195   2              usPresentTime = g_usTimerCounter;
 196   2          } 
 197   1      
 198   1          return usPresentTime;
 199   1      }
 200          //--------------------------------------------------
 201          // Description  : Check timer and events. We have to run this function when setting up a timer for an even
             -t.
 202          // Input Value  : usTime    --> Unit in 1ms, range in 0.001 ~ 61sec
 203          // Output Value : Return usPresentTime
 204          //--------------------------------------------------
 205          WORD MCUTimerCheckTimerEvent(WORD usTime)
 206          {
 207   1          BYTE ucTimerEventCnt = 0;
 208   1          WORD usPresentTime = 0;
 209   1      
 210   1          usPresentTime = MCUTimerGetTimerCounter();
 211   1          
 212   1          if(usTime > _EVENT_TIME_MAX) 
 213   1          {
 214   2              usTime = _EVENT_TIME_MAX;
 215   2          }
 216   1         
 217   1          if(((usPresentTime + usTime) > _EVENT_TIME_MAX) || // Size Limit of Timer Counter             
 218   1             ((usPresentTime + usTime) < usPresentTime)) // Timer Counter Overflow
 219   1          { 
 220   2              g_usTimerCounter = 0;
 221   2          
 222   2              // Reset Timer Event Counter
 223   2              for(ucTimerEventCnt = 0; ucTimerEventCnt < _TIMER_EVENT_COUNT; ucTimerEventCnt++)
 224   2              {
 225   3                  if(GET_EVENT_VALID(ucTimerEventCnt) == _TRUE)
 226   3                  {
 227   4                      if(GET_EVENT_TIME(ucTimerEventCnt) > usPresentTime)
 228   4                      {
 229   5                          SET_EVENT_TIME(ucTimerEventCnt, (GET_EVENT_TIME(ucTimerEventCnt) - usPresentTime));
 230   5                      }
 231   4                      else
 232   4                      {
 233   5                          SET_EVENT_TIME(ucTimerEventCnt, 0);
 234   5                      }
 235   4                  }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 5   

 236   3              }
 237   2              
 238   2              usPresentTime = 0;
 239   2          }    
 240   1      
 241   1          return usPresentTime;
 242   1      }
 243          
 244          //--------------------------------------------------
 245          // Description  : Initial timer and events. We have to run this function at firmware startup
 246          // Input Value  : None
 247          // Output Value : None
 248          //--------------------------------------------------
 249          void MCUTimerInitialTimerEvent(void)
 250          {
 251   1          BYTE ucTimerEventCnt = 0;
 252   1      
 253   1          for(ucTimerEventCnt = 0; ucTimerEventCnt < _TIMER_EVENT_COUNT; ucTimerEventCnt++)
 254   1          {
 255   2              CLR_EVENT_VALID(ucTimerEventCnt);
 256   2          }
 257   1      
 258   1         // TR2 = 1;
 259   1      }
 260          
 261          //--------------------------------------------------
 262          // Description  : Active Timer Event
 263          // Input Value  : usTime --> Time to active Timer Event
 264          //          ucEventID --> Event to be actived
 265          // Output Value : None
 266          //--------------------------------------------------
 267          void MCUTimerActiveTimerEvent(WORD usTime, BYTE ucEventID)
 268          {
 269   1          BYTE ucEventIndex = 0;
 270   1      
 271   1          // Search for Existing Event with the same Event ID
 272   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 273   1          {
 274   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 275   2              {
 276   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 277   3                  {
 278   4                      return;
 279   4                  }
 280   3              }
 281   2          }
 282   1      
 283   1          // Choose any Vacant Storage for Event
 284   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 285   1          {
 286   2              if(GET_EVENT_VALID(ucEventIndex) == _FALSE)
 287   2              {
 288   3                  SET_EVENT_VALID(ucEventIndex);
 289   3                  SET_EVENT_ID(ucEventIndex, ucEventID);
 290   3                  SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 291   3                  return;
 292   3              }
 293   2          }
 294   1      
 295   1          //Printf("No More Available Storage for Simultaneous Event!!!!!!");
 296   1      }
 297          
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 6   

 298          //--------------------------------------------------
 299          // Description  : Cancel an event
 300          // Input Value  : Event     --> Event which we want to cancel
 301          // Output Value : None
 302          //--------------------------------------------------
 303          void MCUTimerCancelTimerEvent(BYTE ucEventID)
 304          {
 305   1          BYTE ucEventIndex = 0;
 306   1          
 307   1          // Search for Existing Event with the same Event ID
 308   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 309   1          {
 310   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 311   2              {
 312   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 313   3                  {
 314   4                      CLR_EVENT_VALID(ucEventIndex);
 315   4                      return;
 316   4                  }
 317   3              }
 318   2          }      
 319   1      }
 320          
 321          //--------------------------------------------------
 322          // Description  : Reactive a timer for an event. If the event is exist,
 323          //                this function will reset the executing time and restart.
 324          // Input Value  : usTime    --> Unit in 1ms, range in 0.01 ~ 61 sec
 325          //                Event     --> Execute Event while timeup
 326          // Output Value : None
 327          //--------------------------------------------------
 328          void MCUTimerReactiveTimerEvent(WORD usTime, BYTE ucEventID)
 329          {
 330   1          BYTE ucEventIndex = 0;
 331   1      
 332   1          // Search for Existing Event with the same Event ID
 333   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 334   1          {
 335   2              if(GET_EVENT_VALID(ucEventIndex) == _TRUE)
 336   2              {
 337   3                  if(GET_EVENT_ID(ucEventIndex) == ucEventID)
 338   3                  {
 339   4                      SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 340   4                      return;
 341   4                  }
 342   3              }
 343   2          }    
 344   1      
 345   1          // Choose any Vacant Storage for Event
 346   1          for(ucEventIndex = 0; ucEventIndex < _TIMER_EVENT_COUNT; ucEventIndex++)
 347   1          {
 348   2              if(GET_EVENT_VALID(ucEventIndex) == _FALSE)
 349   2              {
 350   3                  SET_EVENT_VALID(ucEventIndex);
 351   3                  SET_EVENT_ID(ucEventIndex, ucEventID);
 352   3                  SET_EVENT_TIME(ucEventIndex, (WORD)((DWORD)(MCUTimerCheckTimerEvent(usTime)) + usTime));
 353   3                  return;
 354   3              }
 355   2          }   
 356   1      }
 357          
 358          
 359          void UserInterfaceTimerEventProc(BYTE ucEventID)
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 7   

 360          {
 361   1      
 362   1      switch(ucEventID)
 363   1      {
 364   2      
 365   2        case _USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_INC:
 366   2            SetAD5110Step(CameraVolt);
 367   2            WriteEEP(EEP_CameraVolt, CameraVolt);  
 368   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 369   2            GraphicsPrint(YELLOW,"(CAM_INC %d)",(WORD)(CameraVolt));  
 370   2            #endif
 371   2              break;
 372   2      
 373   2        case _USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_DEC:
 374   2            SetAD5110Step(CameraVolt);  
 375   2            WriteEEP(EEP_CameraVolt, CameraVolt);  
 376   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 377   2            GraphicsPrint(YELLOW,"(CAM_DEC %d)",(WORD)(CameraVolt));  
 378   2            #endif
 379   2            break;
 380   2              case _USER_TIMER_EVENT_OSD_SET_CAMERA_VOLTAGE:
 381   2            SetAD5110Step(CameraVolt);  
 382   2            WriteEEP(EEP_CameraVolt, CameraVolt);     
 383   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 384   2            GraphicsPrint(MAGENTA,"(CAM_VOLT_LEVEL=%d)",(WORD)(CameraVolt));  
 385   2            #endif
 386   2            break;
 387   2              case _USER_TIMER_EVENT_OSD_GET_MCU_VERSION:
 388   2            MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REPLY_MCU_FW);  
 389   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 390   2            GraphicsPrint(YELLOW,"(GET_MCU_VERSION)");  
 391   2            #endif
 392   2            break;
 393   2        case _USER_TIMER_EVENT_GET_ENCODER_COUNT:
 394   2            MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_GET_ENCODER_COUNT); 
 395   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 396   2            GraphicsPrint(YELLOW,"(GET_ENCODER_COUNT)");  
 397   2            #endif
 398   2            break;
 399   2        case _USER_TIMER_EVENT_RESET_ENCODER_COUNT:
 400   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 401   2            GraphicsPrint(YELLOW,"(RESET_ENCODER_COUNT)");  
 402   2            #endif
 403   2            WriteEEP(EEP_RotateNumberL,0);
 404   2            WriteEEP(EEP_RotateNumberM,0);
 405   2            WriteEEP(EEP_RotateNumberH,0);
 406   2            ulongRotateNumber=0;
 407   2            break;
 408   2        case _USER_TIMER_EVENT_OSD_DVR_FACTORY_MODE:
 409   2      
 410   2              if(GET_AC_PLUG()==_TRUE)
 411   2              {
 412   3              MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_ENTRY_FACTORY);     
 413   3              #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 414   3              GraphicsPrint(RED,"(DVR_FACTORY_MODE)");  
 415   3              #endif
 416   3              }
 417   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 418   2            else
 419   2              {
 420   3              GraphicsPrint(RED,"(DVR_FACTORY_FAIL)");      
 421   3              }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 8   

 422   2            #endif
 423   2            
 424   2            break;
 425   2      
 426   2             case _USER_TIMER_EVENT_OSD_MCU_ENTRY_SLEEP_MODE:
 427   2          
 428   2              if(GET_DVR_EntrySleepMode()==_FALSE)
 429   2              {
 430   3              SET_TARGET_POWER_STATUS(_POWER_STATUS_SAVING);
 431   3              SET_DVR_EntrySleepMode();
 432   3              #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 433   3                GraphicsPrint(YELLOW,"(MCU_NORMAL_TO_SLEEP_MODE)");    
 434   3              #endif        
 435   3              }
 436   2              break;
 437   2      
 438   2        case _USER_TIMER_EVENT_OSD_DISTANCE_RESET:
 439   2          EncorderCount=0;
 440   2          EncorderLenint=0;
 441   2          EncorderLenfloaat=0;
 442   2          EncorderCountPN=0;
 443   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 444   2          GraphicsPrint(YELLOW,"\r\n ClearEncorder ",0);
 445   2          #endif
 446   2             //Printf("(DISTANCE_RESET)");   
 447   2             break;
 448   2      
 449   2         case _USER_TIMER_EVENT_OSD_DVR_REBOOT:
 450   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 451   2             GraphicsPrint(YELLOW,"(DVR_REBOOT)");  
 452   2             #endif
 453   2              if(GET_DVR_Reboot()==_TRUE) 
 454   2                {
 455   3                CLR_DVR_Reboot();
 456   3                CLR_DVR_SystemReadyNotic();
 457   3                 UserInterfaceBatteryChargeMode(_BATT_STATUS_DVR_OFF);
 458   3                MCUTimerActiveTimerEvent(SEC(3), _USER_TIMER_EVENT_OSD_DVR_REBOOT);
 459   3      
 460   3                P3M1=0x00;//p3.4 and P3.5 set output ryan@20210226
 461   3                }
 462   2              else
 463   2              {
 464   3                 UserInterfaceBatteryChargeMode(_BATT_STATUS_DVR_ON);
 465   3              }
 466   2              break;
 467   2      
 468   2         case _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN:
 469   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 470   2             GraphicsPrint(YELLOW,"(DVR_SHUTDOWN)");  
 471   2            #endif
 472   2            SET_DVR_Shutdown();
 473   2            MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN);
 474   2             MCUTimerActiveTimerEvent(SEC(15), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
 475   2             break;
 476   2      
 477   2            case  _USER_TIMER_EVENT_OSD_DVR_ENTER_ISP_MODE:
 478   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 479   2             GraphicsPrint(YELLOW,"(MCU_ENTER_ISP_MODE)");      
 480   2          #endif
 481   2              enter_isp();
 482   2             break;
 483   2      
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 9   

 484   2        case _USER_TIMER_EVENT_OSD_ENCODER_DEVIATION_SETTING:     
 485   2            #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 486   2            GraphicsPrint(YELLOW,"(ENCODER_SET)");  
 487   2            #endif
 488   2            break;
 489   2      
 490   2        case _USER_TIMER_EVENT_PANEL_BACKLIGHT_ON:
 491   2          SET_PWCTRL();
 492   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 493   2          GraphicsPrint(YELLOW,"(Panel_ON)"); 
 494   2          #endif
 495   2             UserInterfacePowerSwitch(_POWER_ACTION_PANEL_POWER_ON);    
 496   2          break;
 497   2      
 498   2        case _USER_TIMER_EVENT_OSD_DVR_STOP_REBOOT:
 499   2          #if(_DEBUG_MESSAGE_UserInterfaceTimerEvent==ON)
 500   2          GraphicsPrint(YELLOW,"(DVR STOP REBOOT)");  
 501   2          #endif
 502   2          break;
 503   2      
 504   2        #if (_DEBUG_MESSAGE_Monitor==ON)
 505   2        case _USER_TIMER_EVENT_Monitor_ON:
 506   2         Monitor_flag=_FALSE;
 507   2          break;
 508   2        #endif
 509   2      
 510   2         default:   break;
 511   2         
 512   2      
 513   2      }
 514   1        
 515   1      }
 516          
 517          //--------------------------------------------------
 518          // Description  : Timer Handler
 519          // Input Value  : None
 520          // Output Value : None
 521          //--------------------------------------------------
 522          void SysTimerHandler(void)
 523          {
 524   1          BYTE ucTimerEventIndex = 0;
 525   1          BYTE ucTimerEventID = 0;    
 526   1          WORD usPresentTime = 0;
 527   1      
 528   1          for(ucTimerEventIndex = 0; ucTimerEventIndex < _TIMER_EVENT_COUNT; ucTimerEventIndex++)
 529   1          {
 530   2              usPresentTime = MCUTimerGetTimerCounter();
 531   2      
 532   2              if(MCUTimerCheckEventValid(ucTimerEventIndex) == _FALSE)
 533   2              {
 534   3                  continue;
 535   3              }         
 536   2              
 537   2              if(usPresentTime > MCUTimerGetEventTime(ucTimerEventIndex))
 538   2              {
 539   3                  MCUTimerClrEventValid(ucTimerEventIndex);
 540   3      
 541   3                  // Get Event ID From Event Index
 542   3                  ucTimerEventID = MCUTimerGetEventID(ucTimerEventIndex);
 543   3                  
 544   3                  if(ucTimerEventID < _USER_TIMER_EVENT_END)
 545   3                  {
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 10  

 546   4                      UserInterfaceTimerEventProc(ucTimerEventID);
 547   4                      
 548   4                      continue;
 549   4                  }
 550   3      
 551   3                  if(ucTimerEventID < _SYSTEM_TIMER_EVENT_END)
 552   3                  {
 553   4                      SysTimerEventProc(ucTimerEventID);
 554   4                      
 555   4                      continue;
 556   4                  }
 557   3                  
 558   3               //   MCUTimerEventProc(ucTimerEventID);
 559   3              }
 560   2          }
 561   1      
 562   1      }
 563          
 564          //--------------------------------------------------
 565          // Description  : Timer Event Process
 566          // Input Value  : enumEventID --> Event to be processed
 567          // Output Value : None
 568          //--------------------------------------------------
 569          void SysTimerEventProc(EnumSystemTimerEventID enumEventID)
 570          {
 571   1      
 572   1      switch(enumEventID)
 573   1         { 
 574   2         case _SYSTEM_TIMER_EVENT_GRN_RED_OFF:
 575   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 576   2        break;
 577   2      
 578   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF:
 579   2         PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF);
 580   2        break;
 581   2      
 582   2         case _SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON: 
 583   2          PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 584   2        break;
 585   2      
 586   2         case _SYSTEM_TIMER_EVENT_GRN_RED_ON:
 587   2            PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_ON);
 588   2          break;
 589   2      
 590   2         case _SYSTEM_TIMER_EVENT_GRN_BLINK:
 591   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_BLINK);
 592   2           MCUTimerActiveTimerEvent(SEC(0.25), _SYSTEM_TIMER_EVENT_GRN_BLINK);
 593   2          break;
 594   2      
 595   2         case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK:
 596   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_BLINK);
 597   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_2S_BLINK);
 598   2          break;
 599   2      
 600   2         case _SYSTEM_TIMER_EVENT_RED_BLINK:
 601   2           PowerLED(_SYSTEM_TIMER_EVENT_RED_BLINK);
 602   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_RED_BLINK);
 603   2      
 604   2          break;  
 605   2      
 606   2        case _SYSTEM_TIMER_EVENT_GRN_RED_BLINK:
 607   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 11  

 608   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
 609   2      
 610   2         break; 
 611   2      
 612   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK:
 613   2          PowerLED(_SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
 614   2          MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
 615   2          break; 
 616   2          break;
 617   2      
 618   2         case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON:
 619   2           PowerLED(_SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON);
 620   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON);
 621   2              break;
 622   2       case _SYSTEM_TIMER_EVENT_BATT_LOW_RED_BLINK:
 623   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 624   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 625   2        MCUTimerDelayXms(500);
 626   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 627   2        MCUTimerDelayXms(500);
 628   2      
 629   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 630   2        MCUTimerDelayXms(500);
 631   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 632   2        MCUTimerDelayXms(500);
 633   2      
 634   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON);
 635   2        MCUTimerDelayXms(500);
 636   2        PowerLED(_SYSTEM_TIMER_EVENT_GRN_RED_OFF);
 637   2        MCUTimerDelayXms(500);
 638   2      
 639   2        SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
 640   2        break;
 641   2        
 642   2         case _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE:
 643   2        
 644   2          if(Check_ADAP_IN()==_TRUE)    
 645   2          {
 646   3            
 647   3                  if(GET_AC_PLUG()==_FALSE)
 648   3                  { 
 649   4          
 650   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE)==_TRUE)
 651   4                    {
 652   5                      #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 653   5                      GraphicsPrint(BLUE,"(AC1)");
 654   5                      #endif  
 655   5      
 656   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  
 657   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE); 
 658   5                    }
 659   4          
 660   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_AC_MODE)==_TRUE)
 661   4                    {
 662   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
 663   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE); 
 664   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 665   5                    GraphicsPrint(BLUE,"(AC2)");
 666   5                    #endif  
 667   5                    }
 668   4          
 669   4                  }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 12  

 670   3            
 671   3          }
 672   2          else
 673   2            {
 674   3              if(GET_AC_PLUG()==_TRUE)
 675   3              {
 676   4                    if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE)==_TRUE)
 677   4                    {
 678   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  
 679   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE); 
 680   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 681   5                    GraphicsPrint(BLUE,"(AC3)");
 682   5                    #endif
 683   5                    }
 684   4          
 685   4                  if(MCUTimerCheckEventValid(_SYSTEM_TIMER_EVENT_JUDGE_AC_MODE)==_TRUE)
 686   4                    {
 687   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 688   5                    GraphicsPrint(BLUE,"(AC4)");
 689   5                    #endif  
 690   5                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
 691   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE); 
 692   5                    }
 693   4              }
 694   3            }
 695   2                
 696   2            MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE);   
 697   2            break;
 698   2       case _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA:
 699   2      
 700   2          if(GET_DVR_SystemReadyNotic()==_TRUE)          
 701   2           MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
 702   2          
 703   2           MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 704   2           
 705   2        break;
 706   2        case _SYSTEM_TIMER_EVENT_POWER_OFF_ON_DELAY:
 707   2              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 708   2              GraphicsPrint(RED,"(CLR_DVR_PowerOFFDelay)");
 709   2              #endif
 710   2            CLR_DVR_PowerOFFDelay();
 711   2          break;
 712   2          case _SYSTEM_TIMER_EVENT_JUDGE_FIRST_GET_BATT_BTH_STATE:
 713   2            #if (_DEBUG_MESSAGE_BATTERY_TEST)
                    #else
 715   2            BatteryVoltage=GetBatteryVoltage();
 716   2      //      BatteryBTH=GetBatteryBTH()+7;
 717   2            BatteryBTH=GetBatteryBTH();
 718   2            #endif
 719   2      
 720   2            if(BatteryVoltage<=BATTERY_CAPACITY_MIN) //<11.6V
 721   2              BATERY_STAT=_BATT_STATUS_CAPACITY_MIN;
 722   2              else if((BatteryVoltage>BATTERY_CAPACITY_MIN)&&(BatteryVoltage<=BATTERY_CAPACITY_NO_STARTUP))
 723   2                BATERY_STAT=_BATT_STATUS_CAPACITY_NO_STARTUP;       
 724   2              else if((BatteryVoltage>BATTERY_CAPACITY_NO_STARTUP)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL0))
 725   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL0;
 726   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL0)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL1))
 727   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL1;
 728   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL1)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL2))
 729   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL2;
 730   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL2)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL3))
 731   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL3;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 13  

 732   2              else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL3)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH))
 733   2                BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 734   2              else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH_STOP)&&(PowerFl
             -ag==ON))
 735   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 736   2              else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=(BATTERY_CAPACITY_HIGH_STOP+9))&&(Pow
             -erFlag==OFF))
 737   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 738   2              else          
 739   2                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX_STOP;
 740   2      
 741   2            SET_BATTERY_STATE(BATERY_STAT);
 742   2          
 743   2            SET_BATTERY_CAPACITY(BatteryVoltage);
 744   2      
 745   2      
 746   2            if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //High temperature.
 747   2              TEMP_STAT=_BATT_STATUS_TEMP_HIGH;
 748   2              else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
 749   2                TEMP_STAT=_BATT_STATUS_TEMP_HIGH_WARN;
 750   2              else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
 751   2                TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
 752   2              else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
 753   2                TEMP_STAT=_BATT_STATUS_TEMP_LOW_WARN;
 754   2              else if((BatteryBTH>BTH_TEMP_LOW)&&(BatteryBTH<=BATTERY_ACD_no_battery)) /// if(BatteryBTH>BTH_TEMP_LO
             -W)  //-5~-10 warnning
 755   2                TEMP_STAT=_BATT_STATUS_TEMP_LOW;
 756   2              else{
 757   3                SET_NO_BATTERY();
 758   3                SET_BATTERY_STATE(_BATT_STATUS_NO_BATT);
 759   3                TEMP_STAT=_BATT_STATUS_TEMP_NORMAL; ///no DC12V input
 760   3                }
 761   2      
 762   2              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
 763   2              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
 764   2      
 765   2              SET_BTH_STATE(TEMP_STAT); 
 766   2      
 767   2              STAT1_temp=GET_STAT1(); 
 768   2              if(STAT1_Flag!=STAT1_temp)
 769   2              STAT1_Flag=STAT1_temp;
 770   2                    
 771   2              STAT2_temp=GET_STAT2(); 
 772   2              if(STAT2_Flag!=STAT2_temp)
 773   2              STAT2_Flag=STAT2_temp;        
 774   2      
 775   2            /*
 776   2            if((BatteryBTH<=CHARGE_TEMP_HIGH)&&(BatteryBTH>CHARGE_TEMP_LOW))  
 777   2              {
 778   2              if(GET_AC_PLUG()==_TRUE)  
 779   2                SET_CHARGE_TMEP_ABNORMAL();
 780   2      
 781   2              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
 782   2                    CLR_CHARGE_TMEP_ABNORMAL();
 783   2              }
 784   2            */
 785   2            break;
 786   2          case _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE:  
 787   2      
 788   2          #if (_DEBUG_MESSAGE_BATTERY_TEST)
                  #else
 790   2            BatteryVoltage=GetBatteryVoltage();
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 14  

 791   2          #endif
 792   2          
 793   2            #if 1
 794   2          SET_BATTERY_CAPACITY(BatteryVoltage);
 795   2            
 796   2      //   if((GET_BATTERY_CAPACITY()<200)||(BatteryBTH>=935)) //no battery  <3.3V
 797   2      //     if(((GET_BATTERY_CAPACITY()<BATTERY_ACD_MIN)||(STAT1_Flag==1))&&(GET_AC_PLUG()==_TRUE)) //no battery
             -  <3.3V
 798   2      /*     if((GET_BATTERY_CAPACITY()<BATTERY_ACD_MIN)&&(GET_AC_PLUG()==_TRUE)) //no battery  <3.3V
 799   2              {
 800   2            SET_NO_BATTERY();
 801   2            SET_BATTERY_STATE(_BATT_STATUS_NO_BATT); 
 802   2              }
 803   2          else 
 804   2          */  
 805   2          {
 806   3            if(GET_NO_BATTERY()==_TRUE)
 807   3              {
 808   4              BattDetect1_COUNT=0;
 809   4              BattDetect2_COUNT=0;
 810   4              BattDetect3_COUNT=0;
 811   4              BattDetect4_COUNT=0;
 812   4              BattDetect5_COUNT=0;
 813   4              BattDetectMin_COUNT=0;
 814   4              BattDetectHigh_COUNT=0;
 815   4              BattDetectHighStop_COUNT=0;
 816   4              BattDetectNoStartUp_COUNT=0;
 817   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 818   4              }
 819   3              #if (_DEBUG_MESSAGE_Power_Supply_TEST==ON)
                      CLR_NO_BATTERY(); 
                      #endif
 822   3            if(BatteryVoltage<=BATTERY_CAPACITY_MIN) //<11.6V
 823   3            {
 824   4                  BattDetect1_COUNT=0;
 825   4                  BattDetect2_COUNT=0;
 826   4              BattDetect3_COUNT=0;
 827   4              BattDetect4_COUNT=0;
 828   4              BattDetect5_COUNT=0;              
 829   4              BattDetectMin_COUNT++;
 830   4              BattDetectHigh_COUNT=0;
 831   4              BattDetectHighStop_COUNT=0;
 832   4              BattDetectNoStartUp_COUNT=0;
 833   4            }
 834   3            else if((BatteryVoltage>BATTERY_CAPACITY_MIN)&&(BatteryVoltage<=BATTERY_CAPACITY_NO_STARTUP))
 835   3            {
 836   4            //_BATT_STATUS_CAPACITY_NO_STARTUP
 837   4                  BattDetect1_COUNT=0;
 838   4                  BattDetect2_COUNT=0;
 839   4              BattDetect3_COUNT=0;
 840   4              BattDetect4_COUNT=0;
 841   4              BattDetect5_COUNT=0;              
 842   4              BattDetectMin_COUNT=0;
 843   4              BattDetectHigh_COUNT=0;
 844   4              BattDetectHighStop_COUNT=0;               
 845   4              BattDetectNoStartUp_COUNT++;
 846   4            } 
 847   3            else if((BatteryVoltage>BATTERY_CAPACITY_NO_STARTUP)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL0))
 848   3            {
 849   4            //_BATT_STATUS_CAPACITY_LEVEL0
 850   4                  BattDetect1_COUNT++;
 851   4                  BattDetect2_COUNT=0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 15  

 852   4              BattDetect3_COUNT=0;
 853   4              BattDetect4_COUNT=0;
 854   4              BattDetect5_COUNT=0;              
 855   4              BattDetectMin_COUNT=0;
 856   4              BattDetectHigh_COUNT=0;
 857   4              BattDetectHighStop_COUNT=0;               
 858   4              BattDetectNoStartUp_COUNT=0;
 859   4            }     
 860   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL0)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL1))
 861   3            {
 862   4              // _BATT_STATUS_CAPACITY_LEVEL1
 863   4                BattDetect1_COUNT=0;
 864   4                    BattDetect2_COUNT++;
 865   4              BattDetect3_COUNT=0;
 866   4              BattDetect4_COUNT=0;
 867   4              BattDetect5_COUNT=0;
 868   4              BattDetectMin_COUNT=0;
 869   4              BattDetectHigh_COUNT=0;
 870   4              BattDetectNoStartUp_COUNT=0;
 871   4              
 872   4            }
 873   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL1)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL2))
 874   3            {
 875   4            //_BATT_STATUS_CAPACITY_LEVEL2
 876   4                BattDetect1_COUNT=0;
 877   4                    BattDetect2_COUNT=0;
 878   4              BattDetect3_COUNT++;
 879   4              BattDetect4_COUNT=0;
 880   4              BattDetect5_COUNT=0;
 881   4              BattDetectMin_COUNT=0;
 882   4              BattDetectHigh_COUNT=0;
 883   4              BattDetectHighStop_COUNT=0;
 884   4              BattDetectNoStartUp_COUNT=0;
 885   4              
 886   4            }
 887   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL2)&&(BatteryVoltage<=BATTERY_CAPACITY_LEVEL3))
 888   3            {
 889   4              //_BATT_STATUS_CAPACITY_LEVEL3
 890   4                BattDetect1_COUNT=0;
 891   4                  BattDetect2_COUNT=0;
 892   4              BattDetect3_COUNT=0;
 893   4              BattDetect4_COUNT++;
 894   4              BattDetect5_COUNT=0;
 895   4              BattDetectMin_COUNT=0;
 896   4              BattDetectHigh_COUNT=0;
 897   4              BattDetectHighStop_COUNT=0;
 898   4              BattDetectNoStartUp_COUNT=0;
 899   4              
 900   4            }
 901   3            else if((BatteryVoltage>BATTERY_CAPACITY_LEVEL4)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH))
 902   3            {
 903   4              //_BATT_STATUS_CAPACITY_LEVEL4
 904   4                BattDetect1_COUNT=0;
 905   4              BattDetect2_COUNT=0;
 906   4              BattDetect3_COUNT=0;
 907   4              BattDetect4_COUNT=0;
 908   4              BattDetect5_COUNT++;
 909   4              BattDetectMin_COUNT=0;
 910   4              BattDetectHigh_COUNT=0;
 911   4              BattDetectHighStop_COUNT=0;
 912   4              BattDetectNoStartUp_COUNT=0;
 913   4              
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 16  

 914   4          
 915   4            }
 916   3            else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=BATTERY_CAPACITY_HIGH_STOP)&&(PowerFla
             -g==ON))      
 917   3            {
 918   4              BattDetect1_COUNT=0;
 919   4              BattDetect2_COUNT=0;
 920   4              BattDetect3_COUNT=0;
 921   4              BattDetect4_COUNT=0;
 922   4              BattDetect5_COUNT=0;
 923   4              BattDetectMin_COUNT=0;
 924   4              BattDetectHigh_COUNT++; 
 925   4              BattDetectHighStop_COUNT=0;
 926   4              BattDetectNoStartUp_COUNT=0;
 927   4              
 928   4            }
 929   3            else if((BatteryVoltage>BATTERY_CAPACITY_HIGH)&&(BatteryVoltage<=(BATTERY_CAPACITY_HIGH_STOP+9))&&(Powe
             -rFlag==OFF))      
 930   3            {
 931   4              BattDetect1_COUNT=0;
 932   4              BattDetect2_COUNT=0;
 933   4              BattDetect3_COUNT=0;
 934   4              BattDetect4_COUNT=0;
 935   4              BattDetect5_COUNT=0;
 936   4              BattDetectMin_COUNT=0;
 937   4              BattDetectHigh_COUNT++; 
 938   4              BattDetectHighStop_COUNT=0;
 939   4              BattDetectNoStartUp_COUNT=0;
 940   4              
 941   4            }
 942   3            else///>BATTERY_CAPACITY_HIGH_STOP
 943   3            {
 944   4              BattDetect1_COUNT=0;
 945   4              BattDetect2_COUNT=0;
 946   4              BattDetect3_COUNT=0;
 947   4              BattDetect4_COUNT=0;
 948   4              BattDetect5_COUNT=0;
 949   4              BattDetectMin_COUNT=0;
 950   4              BattDetectHigh_COUNT=0; 
 951   4              BattDetectHighStop_COUNT++;
 952   4              BattDetectNoStartUp_COUNT=0;
 953   4            }
 954   3      
 955   3            if(BatteryVoltage>=BATTERY_CAPACITY_STARTUP)
 956   3            BattDetectStartUp_COUNT++;
 957   3            else    
 958   3            BattDetectStartUp_COUNT=0;
 959   3            
 960   3            if(BattDetect1_COUNT==20)
 961   3            {
 962   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL0;
 963   4              BattDetect1_COUNT=0;
 964   4            }
 965   3            if(BattDetect2_COUNT==20)
 966   3            {
 967   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL1;
 968   4              BattDetect2_COUNT=0;
 969   4            }
 970   3            if(BattDetect3_COUNT==20)
 971   3            {
 972   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL2;
 973   4              BattDetect3_COUNT=0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 17  

 974   4            }
 975   3            if(BattDetect4_COUNT==20)
 976   3            {
 977   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL3;
 978   4              BattDetect4_COUNT=0;
 979   4            }
 980   3            if(BattDetect5_COUNT==20)
 981   3            {
 982   4              BATERY_STAT=_BATT_STATUS_CAPACITY_LEVEL4;
 983   4              BattDetect5_COUNT=0;
 984   4            }
 985   3      
 986   3            if(BattDetectMin_COUNT==20)
 987   3            {
 988   4            BATERY_STAT=_BATT_STATUS_CAPACITY_MIN;
 989   4            BattDetectMin_COUNT=0;
 990   4            }
 991   3            
 992   3            if(BattDetectHigh_COUNT==20)
 993   3            {
 994   4            BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
 995   4            BattDetectHigh_COUNT=0;
 996   4            }
 997   3      
 998   3            if(BattDetectNoStartUp_COUNT==20)
 999   3            {
1000   4            BATERY_STAT=_BATT_STATUS_CAPACITY_NO_STARTUP;
1001   4            BattDetectNoStartUp_COUNT=0;
1002   4            }
1003   3      
1004   3                if(BattDetectHigh_COUNT==20)
1005   3                {
1006   4                BATERY_STAT=_BATT_STATUS_CAPACITY_MAX;
1007   4                BattDetectHigh_COUNT=0;
1008   4                }
1009   3      
1010   3              if(BattDetectHighStop_COUNT==20)
1011   3              {
1012   4              BATERY_STAT=_BATT_STATUS_CAPACITY_MAX_STOP;
1013   4              BattDetectHighStop_COUNT=0;
1014   4              }
1015   3      
1016   3              if(BATERY_STAT_TEMP!=BATERY_STAT)
1017   3              {
1018   4              BATERY_STAT_TEMP=BATERY_STAT;
1019   4              SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state. 
1020   4              }
1021   3      
1022   3            if(BattDetectStartUp_COUNT==20)
1023   3            { 
1024   4              if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1025   4                {
1026   5                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1027   5                 GraphicsPrint(RED,"(Normal Voltage Charge >12.5V)");
1028   5                #endif
1029   5                CLR_BATTERY_CAPACITY_LOW_FLAG();
1030   5                SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1031   5      
1032   5                  if(ReadEEP(EEP_LowBattery_Flag))
1033   5                    WriteEEP(EEP_LowBattery_Flag,OFF);
1034   5                }
1035   4              
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 18  

1036   4            BattDetectStartUp_COUNT=0;
1037   4            }
1038   3      
1039   3            SET_BATTERY_STATE(BATERY_STAT);
1040   3        }
1041   2          //#if (_DEBUG_MESSAGE_SysTimerEvent==ON)
1042   2          //GraphicsPrint(CYAN,">");
1043   2          //#endif
1044   2              if(PowerFlag==OFF)
1045   2              MCUTimerActiveTimerEvent(SEC(0.1/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
1046   2              else
1047   2          MCUTimerActiveTimerEvent(SEC(0.3/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
1048   2            #else
                    SET_BATTERY_CAPACITY(BatteryVoltage);
                
                      
                     if((GET_BATTERY_CAPACITY()<200)||(BatteryBTH>=935)) //no battery  <3.3V
                      {
                    SET_NO_BATTERY();
                    SET_BATTERY_STATE(_BATT_STATUS_NO_BATT); 
                      }
                  else 
                    {
                    CLR_NO_BATTERY();   
                    
                  if(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVEL0)//<12V
                       SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL0);        
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL0)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L1))//12V-13.5V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL1);      
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL1)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L2))//14.2V-13.5V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL2);
                  else if((GET_BATTERY_CAPACITY()>BATTERY_CAPACITY_LEVEL2)&&(GET_BATTERY_CAPACITY()<=BATTERY_CAPACITY_LEVE
             -L3))//15V-14.2V
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL3);  
                  else    
                    SET_BATTERY_STATE(_BATT_STATUS_CAPACITY_LEVEL4);//>15V
                    }   
              
                  MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
              
                  #endif
1076   2      
1077   2          break;
1078   2      
1079   2          case _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE:
1080   2          #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
1081   2          GraphicsPrint(CYAN,"\r\nPOWER key pressed");
1082   2          #endif
1083   2      
1084   2            if(GET_DVR_EntrySleepMode()==_TRUE)
1085   2            {
1086   3              SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1087   3              //CLR_DVR_EntrySleepMode();
1088   3              //MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SLEEP_WAKE_UP);
1089   3              #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
1090   3                GraphicsPrint(YELLOW,"(MCU_SLEEP_TO_NORMAL_MODE)");    
1091   3              #endif        
1092   3      
1093   3            }
1094   2            #if 0 //for test
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 19  

                    else if(PowerFlag==ON)    
                      {
                    MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
                    PowerFlag=OFF;
                    WriteEEP(EEP_Powerflag,PowerFlag);
                      }
                    #else
1102   2            else if(PowerFlag==ON)    
1103   2            MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1104   2            #endif
1105   2            else
1106   2            {
1107   3                if(GET_DVR_PowerOFFDelay()==_FALSE)
1108   3                {
1109   4                  if((GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)||(Check_ADAP_IN()/*GET_AC_PLUG()*/==_TRUE))
1110   4                  {
1111   5                  PowerFlag=ON;
1112   5                  WriteEEP(EEP_Powerflag,PowerFlag);
1113   5                  }
1114   4                  else
1115   4                    {
1116   5                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1117   5                    GraphicsPrint(RED,"\r\n(Battery voltage low <12.5V...)");
1118   5                    #endif
1119   5                    MCUTimerActiveTimerEvent(SEC(0.01), _SYSTEM_TIMER_EVENT_BATT_LOW_RED_BLINK);
1120   5                    }
1121   4                  
1122   4                #if (_DEBUG_MESSAGE_Scankey_CHECK==ON)
1123   4                if(PWR_START_flag==ON)
1124   4                    GraphicsPrint(YELLOW,"(DC12V to Power on)");    
1125   4                #endif
1126   4                }
1127   3                else
1128   3                MCUTimerActiveTimerEvent(SEC(3), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);
1129   3                
1130   3            }
1131   2          
1132   2            break;
1133   2      case _SYSTEM_TIMER_EVENT_BATTERY_LOW_PWR_OFF:
1134   2           if(PowerFlag==ON)  
1135   2          MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1136   2        break;
1137   2          case _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE:
1138   2        
1139   2          #if (_DEBUG_MESSAGE_BATTERY_TEST)
                  #else
1141   2          BatteryBTH=GetBatteryBTH();
1142   2      
1143   2      //    if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1144   2      //      BatteryBTH=549;
1145   2          #endif
1146   2          
1147   2          //if((GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_STOP_CHARGE)&&(GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)
             -)
1148   2          //SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);
1149   2          //else
1150   2          //{
1151   2      
1152   2          #if 1
1153   2          if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //<11.6V
1154   2            {     
1155   3            TEMP_NORMAL_COUNT=0;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 20  

1156   3              TEMP_LOW_COUNT=0;
1157   3            TEMP_LOW_WARN_COUNT=0;
1158   3            TEMP_HIGH_COUNT++;
1159   3            TEMP_HIGH_WARN_COUNT=0;
1160   3            }
1161   2            else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
1162   2            {
1163   3            TEMP_NORMAL_COUNT=0;
1164   3              TEMP_LOW_COUNT=0;
1165   3            TEMP_LOW_WARN_COUNT=0;
1166   3            TEMP_HIGH_COUNT=0;
1167   3            TEMP_HIGH_WARN_COUNT++;
1168   3            }   
1169   2            else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
1170   2            {
1171   3            TEMP_NORMAL_COUNT++;
1172   3            TEMP_LOW_COUNT=0;
1173   3            TEMP_LOW_WARN_COUNT=0;
1174   3            TEMP_HIGH_COUNT=0;
1175   3            TEMP_HIGH_WARN_COUNT=0;
1176   3            }
1177   2            else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
1178   2              {
1179   3              TEMP_NORMAL_COUNT=0;
1180   3              TEMP_LOW_COUNT=0;
1181   3              TEMP_LOW_WARN_COUNT++;
1182   3              TEMP_HIGH_COUNT=0;
1183   3              TEMP_HIGH_WARN_COUNT=0;
1184   3      
1185   3              }
1186   2            else if((BatteryBTH>BTH_TEMP_LOW)&&(BatteryBTH<=BATTERY_ACD_no_battery))  //-5~-10 warnning
1187   2              {
1188   3              TEMP_NORMAL_COUNT=0;
1189   3              TEMP_LOW_COUNT++;
1190   3              TEMP_LOW_WARN_COUNT=0;
1191   3              TEMP_HIGH_COUNT=0;
1192   3              TEMP_HIGH_WARN_COUNT=0;
1193   3              }
1194   2            else
1195   2              {
1196   3              #if (_DEBUG_MESSAGE_Power_Supply_TEST==ON)
                      #else
1198   3              SET_NO_BATTERY();
1199   3              SET_BATTERY_STATE(_BATT_STATUS_NO_BATT);
1200   3              #endif
1201   3              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL; ///no DC12V input
1202   3            TEMP_NORMAL_COUNT=0;
1203   3              TEMP_LOW_COUNT=0;
1204   3            TEMP_LOW_WARN_COUNT=0;
1205   3            TEMP_HIGH_COUNT=0;
1206   3            TEMP_HIGH_WARN_COUNT=0;         
1207   3              }
1208   2      
1209   2          if(((TEMP_NORMAL_COUNT>3)||(TEMP_LOW_COUNT>3)||(TEMP_LOW_WARN_COUNT>3)||(TEMP_HIGH_COUNT>3)||(TEMP_HIGH_
             -WARN_COUNT>3)\
1210   2            )&&(PWR_START_flag==ON)&&(PowerFlag==OFF)&&(GET_NO_BATTERY()==_TRUE))
1211   2          PowerFlag=ON;
1212   2      
1213   2            
1214   2          if(TEMP_HIGH_COUNT==TempADC_Counts)
1215   2          {
1216   3            TEMP_STAT=_BATT_STATUS_TEMP_HIGH;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 21  

1217   3            TEMP_HIGH_COUNT=0;
1218   3            CLR_BATTERY_HIGH_TMEP_WARN();
1219   3            CLR_BATTERY_LOW_TMEP_WARN();  
1220   3            CLR_NO_BATTERY();
1221   3          }
1222   2      
1223   2          if(TEMP_HIGH_WARN_COUNT==TempADC_Counts)
1224   2          {
1225   3            TEMP_STAT=_BATT_STATUS_TEMP_HIGH_WARN;
1226   3            TEMP_HIGH_WARN_COUNT=0;
1227   3            SET_BATTERY_HIGH_TMEP_WARN();
1228   3            CLR_BATTERY_LOW_TMEP_WARN();
1229   3            CLR_NO_BATTERY();   
1230   3          }
1231   2      
1232   2          if(TEMP_NORMAL_COUNT==TempADC_Counts)
1233   2          {
1234   3            TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
1235   3            TEMP_NORMAL_COUNT=0;
1236   3            CLR_BATTERY_LOW_TMEP_WARN();
1237   3            CLR_BATTERY_HIGH_TMEP_WARN();
1238   3            CLR_NO_BATTERY();   
1239   3          }
1240   2      
1241   2          if(TEMP_LOW_WARN_COUNT==TempADC_Counts)
1242   2          {
1243   3            TEMP_STAT=_BATT_STATUS_TEMP_LOW_WARN;
1244   3            TEMP_LOW_WARN_COUNT=0;
1245   3            SET_BATTERY_LOW_TMEP_WARN();
1246   3            CLR_BATTERY_HIGH_TMEP_WARN();
1247   3            CLR_NO_BATTERY();     
1248   3          }
1249   2      
1250   2          if(TEMP_LOW_COUNT==TempADC_Counts)
1251   2          {
1252   3            TEMP_STAT=_BATT_STATUS_TEMP_LOW;
1253   3            TEMP_LOW_COUNT=0;
1254   3            CLR_BATTERY_LOW_TMEP_WARN();
1255   3            CLR_BATTERY_HIGH_TMEP_WARN(); 
1256   3            CLR_NO_BATTERY();   
1257   3          }
1258   2      /*
1259   2          if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1260   2            {
1261   2              TEMP_STAT=_BATT_STATUS_TEMP_NORMAL;
1262   2              CLR_BATTERY_LOW_TMEP_WARN();
1263   2              CLR_BATTERY_HIGH_TMEP_WARN();
1264   2      
1265   2            }
1266   2          */
1267   2          SET_BTH_STATE(TEMP_STAT);
1268   2      
1269   2      
1270   2            if((BatteryBTH<=CHARGE_TEMP_HIGH)||(BatteryBTH>CHARGE_TEMP_LOW))  
1271   2              {
1272   3              CHARGE_TEMP_ABNORMAL++;
1273   3              CHARGE_TEMP_NORMAL=0;
1274   3              }
1275   2              else
1276   2              {
1277   3              CHARGE_TEMP_ABNORMAL=0;
1278   3              CHARGE_TEMP_NORMAL++;
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 22  

1279   3              //CLR_CHARGE_TMEP_ABNORMAL();
1280   3              }
1281   2              
1282   2              if(CHARGE_TEMP_ABNORMAL==TempADC_Counts)
1283   2                {
1284   3                CHARGE_TEMP_ABNORMAL=0;
1285   3                  if((GET_AC_PLUG()==_TRUE)&&(GET_NO_BATTERY()==_FALSE))      
1286   3                  SET_CHARGE_TMEP_ABNORMAL();
1287   3                
1288   3                //  if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)  
1289   3                //    CLR_CHARGE_TMEP_ABNORMAL();                     
1290   3                }
1291   2              else  if(CHARGE_TEMP_NORMAL==TempADC_Counts)
1292   2                {
1293   3                CHARGE_TEMP_NORMAL=0;
1294   3                CLR_CHARGE_TMEP_ABNORMAL();
1295   3                }
1296   2          #else
                      if((BatteryBTH<=BTH_TEMP_HIGH)&&(BatteryBTH>BTH_TEMP_MIN)) //>55
                      SET_BTH_STATE(_BATT_STATUS_TEMP_HIGH);          
                    else if((BatteryBTH>BTH_TEMP_HIGH)&&(BatteryBTH<=BTH_TEMP_HIGH_WARN))//50~55 warnning
                      {
                      SET_BATTERY_HIGH_TMEP_WARN();   
                      CLR_BATTERY_LOW_TMEP_WARN();  
                      }
                    else if((BatteryBTH>BTH_TEMP_HIGH_WARN)&&(BatteryBTH<=BTH_TEMP_LOW_WARN))
                      {
                      SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);        
                      CLR_BATTERY_LOW_TMEP_WARN();
                      CLR_BATTERY_HIGH_TMEP_WARN();
                      }
                    else if((BatteryBTH>BTH_TEMP_LOW_WARN)&&(BatteryBTH<=BTH_TEMP_LOW))  //0~-5 warnning
                      {
                      //SET_BATTERY_LOW_TMEP_WARN();
                      //CLR_BATTERY_HIGH_TMEP_WARN(); 
                      }
                    else if(BatteryBTH>BTH_TEMP_LOW)  //-5~-10 warnning
                      {
                      SET_BTH_STATE(_BATT_STATUS_TEMP_LOW);       
                      CLR_BATTERY_LOW_TMEP_WARN();
                      CLR_BATTERY_HIGH_TMEP_WARN();
                      }
                    else 
                      SET_BTH_STATE(_BATT_STATUS_TEMP_NORMAL);
                    
              
                    #endif  
1326   2          //}
1327   2            if(PowerFlag==OFF)
1328   2              MCUTimerActiveTimerEvent(SEC(0.1/*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
1329   2              else
1330   2          MCUTimerActiveTimerEvent(SEC(0.2/*0.3*//*1*/), _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
1331   2          break;
1332   2      
1333   2          case _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO:
1334   2      
1335   2      
1336   2            if(GET_DVR_WDTkickDisable()==_FALSE)
1337   2            {
1338   3            #if(_DEBUG_MESSAGE_WDT_KICK_CHECK == ON)    
1339   3            GraphicsPrint(RED,"\r\n(WDT kick over 10 seconds, Try to reboot the DVR)"); 
1340   3            #endif
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 23  

1341   3            SET_DVR_Reboot();
1342   3            SET_DVR_RebootAndPower();
1343   3            MCUTimerActiveTimerEvent(SEC(1), _USER_TIMER_EVENT_OSD_DVR_REBOOT);
1344   3            }
1345   2          break;
1346   2      
1347   2          case _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE:
1348   2          
1349   2              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1350   2              GraphicsPrint(CYAN,"(AC)");
1351   2              if(GET_STAT1()==ON)
1352   2                GraphicsPrint(GREEN,"(S1=1)");
1353   2              else
1354   2                GraphicsPrint(GREEN,"(S1=0)");
1355   2              
1356   2              if(GET_STAT2()==ON)
1357   2                GraphicsPrint(MAGENTA,"(S2=1)");
1358   2              else
1359   2                GraphicsPrint(MAGENTA,"(S2=0)");
1360   2                
1361   2              #endif
1362   2              
1363   2                  if(Check_ADAP_IN()==_TRUE)
1364   2                  {
1365   3                    if(GET_AC_PLUG()!=_TRUE)
1366   3                    {
1367   4                      SET_AC_PLUG();
1368   4                      //SET_AC_MODE();  // turn on AC mode
1369   4                      CLR_AC_MODE();  // turn on AC mode
1370   4                      //MCUTimerDelayXms(100);//delay 50ms    
1371   4                      //CLR_BAT_SYS();// turn off battery output              
1372   4                      //SET_PWM(_CHG_CURR,Low_Current);
1373   4      
1374   4                      STAT1_temp=GET_STAT1(); 
1375   4                      if(STAT1_Flag!=STAT1_temp)
1376   4                      STAT1_Flag=STAT1_temp;
1377   4                      
1378   4                      STAT2_temp=GET_STAT2(); 
1379   4                      if(STAT2_Flag!=STAT2_temp)
1380   4                      STAT2_Flag=STAT2_temp;
1381   4      
1382   4                    }         
1383   3                  
1384   3                  if(GET_NO_BATTERY()==_TRUE)
1385   3                    {
1386   4                  MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT);                
1387   4                    }
1388   3                  else
1389   3                    {
1390   4                    
1391   4                  if(GET_POWER_STATUS()==_POWER_STATUS_NORMAL)
1392   4                  {
1393   5                    
1394   5                    if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_BA
             -TTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1395   5                      {
1396   6                        if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1397   6                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE);                   
1398   6                        else
1399   6                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);  
1400   6                      }
1401   5                    else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 24  

1402   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1403   5                    else
1404   5                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);   
1405   5                  }
1406   4                  else if(GET_POWER_STATUS()==_POWER_STATUS_SAVING)
1407   4                    {
1408   5                    
1409   5                    if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_BA
             -TTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1410   5                      {
1411   6                      if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1412   6                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE);                   
1413   6                      else
1414   6                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);
1415   6                      }
1416   5                      else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1417   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1418   5                      else
1419   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE); 
1420   5                    }
1421   4                  else if(GET_POWER_STATUS()==_POWER_STATUS_OFF)
1422   4                    {
1423   5                      
1424   5                      if((GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(GET_B
             -ATTERY_ABNORMAL()==_FALSE)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)/*&&(GET_CHARGE_START_FLAG()==_TRUE)*/)
1425   5                        {
1426   6                        if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
1427   6                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_HIGH_CHARGE); 
1428   6                        else
1429   6                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE);  
1430   6                        }
1431   5                      else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)
1432   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_NO_BATT); 
1433   5                      else
1434   5                      MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE); 
1435   5                    }
1436   4                          
1437   4                  
1438   4                    }
1439   3                
1440   3                  MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);   //repeat on AC mode
1441   3      
1442   3      
1443   3                  }
1444   2                else
1445   2                  {
1446   3                  CLR_AC_PLUG();
1447   3                  CLR_AC_MODE();  // turn off AC mode
1448   3                  SET_AC_PLUG_OUT();
1449   3                  CLR_BATTERY_CAPACITY_HIGH_FLAG(); 
1450   3                  if((PWR_START_flag==ON)&&(PowerFlag==ON))
1451   3                  MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN);///SET_AC_PLUG_OUT             
1452   3                  MCUTimerActiveTimerEvent(SEC(0.5), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);  //change battery mode          
1453   3                  MCUTimerActiveTimerEvent(SEC(0.5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);  //going to battery mode
1454   3                  }
1455   2      
1456   2                CLR_AC_MODE();  
1457   2                    //CLR_BAT_SYS();
1458   2          break;
1459   2                      case _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE:
1460   2      
1461   2                    STAT1_temp=GET_STAT1();
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 25  

1462   2                    STAT2_temp=GET_STAT2();
1463   2                  
1464   2                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1465   2                    GraphicsPrint(YELLOW,"(STAT1_temp=%02x)",(WORD)STAT1_temp);
1466   2                    #endif  
1467   2                    #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1468   2                    GraphicsPrint(GREEN,"(STAT2_temp=%02x)",(WORD)STAT2_temp);
1469   2                    #endif  
1470   2                    
1471   2                    if((STAT1_Flag!=STAT1_temp)&&(GET_NO_BATTERY()==_FALSE))
1472   2                      {
1473   3                      STAT1_Flag=STAT1_temp;
1474   3                      SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.              
1475   3                      }
1476   2                    
1477   2                      if((STAT2_Flag!=STAT2_temp)&&(GET_NO_BATTERY()==_FALSE))
1478   2                      {
1479   3                      STAT2_Flag=STAT2_temp;
1480   3                      SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.              
1481   3                      }
1482   2            
1483   2                #if 1
1484   2                    if(GET_BATTERY_ABNORMAL()==_FALSE)
1485   2                    { 
1486   3                        if(GET_BATTERY_CAPACITY()>=BATTERY_ACD_MAX)//>17    
1487   3                        {
1488   4                        #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1489   4                        GraphicsPrint(RED,"( HigH Voltage >17V shut down)");
1490   4                        #endif
1491   4                        SET_BATTERY_ABNORMAL();
1492   4                        MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
1493   4                        }
1494   3                  
1495   3                    }
1496   2      
1497   2                        switch(GET_BATTERY_STATE())
1498   2                        {
1499   3      
1500   3                      case _BATT_STATUS_CAPACITY_MAX_STOP:
1501   3                        
1502   3                          if(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)
1503   3                          {
1504   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1505   4                          GraphicsPrint(RED,"(HIGH Voltage >16.4V stop charge)");
1506   4                          #endif  
1507   4                          SET_BATTERY_CAPACITY_HIGH_FLAG();   
1508   4                          }
1509   3                          
1510   3                         if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1511   3                         {     
1512   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1513   4                           GraphicsPrint(RED,"(2.Normal Voltage Charge >12V)");
1514   4                          #endif
1515   4                         CLR_BATTERY_CAPACITY_LOW_FLAG();  
1516   4                         SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1517   4                          if(ReadEEP(EEP_LowBattery_Flag))
1518   4                            WriteEEP(EEP_LowBattery_Flag,OFF);
1519   4                         }
1520   3                         CLR_CHARGE_START_FLAG();
1521   3                        break;
1522   3                      case _BATT_STATUS_CAPACITY_MIN:
1523   3                      case _BATT_STATUS_CAPACITY_NO_STARTUP:
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 26  

1524   3                          if((GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)&&(GET_DVR_SystemReadyNotic()==_FALSE)&&(GET_AC_PLUG
             -()==_FALSE))
1525   3                          {
1526   4                          SET_BATTERY_CAPACITY_LOW_FLAG();  
1527   4                          
1528   4                          if(ReadEEP(EEP_LowBattery_Flag)==OFF)
1529   4                          WriteEEP(EEP_LowBattery_Flag,ON);
1530   4                          
1531   4                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1532   4                          GraphicsPrint(RED,"( Low Voltage <11.8V or < 11.6V shut down)");
1533   4                          #endif  
1534   4                          MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);  
1535   4                          }
1536   3                          else  if((GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)&&(PowerFlag==ON)&&(GET_AC_PLUG()==_FALS
             -E))
1537   3                          {
1538   4                          PowerFlag=OFF;
1539   4                          WriteEEP(EEP_Powerflag,PowerFlag);
1540   4                        
1541   4                          if(GET_DVR_EntrySleepMode()==TRUE)
1542   4                          CLR_DVR_EntrySleepMode();
1543   4                          }
1544   3      
1545   3                          if(GET_DVR_EntrySleepMode()==_TRUE)
1546   3                          {
1547   4                          SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1548   4                          #if (_DEBUG_MESSAGE_SysTimerEvent==ON)
1549   4                            GraphicsPrint(RED,"(MCU_SLEEP_TO_NORMAL_MODE: Low Voltage <12V)");    
1550   4                          #endif  
1551   4                          }
1552   3                          
1553   3                          CLR_BATTERY_CAPACITY_HIGH_FLAG();       
1554   3                          SET_CHARGE_START_FLAG();
1555   3                        break;
1556   3      
1557   3                       case _BATT_STATUS_CAPACITY_LEVEL0:
1558   3                         CLR_BATTERY_CAPACITY_HIGH_FLAG();   
1559   3                        //  CLR_BATTERY_CAPACITY_LOW_FLAG();  
1560   3                          if(GET_DVR_EntrySleepMode()==_TRUE)
1561   3                          {
1562   4                          SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1563   4                          #if (_DEBUG_MESSAGE_SysTimerEvent==ON)
1564   4                            GraphicsPrint(RED,"(MCU_SLEEP_TO_NORMAL_MODE: Low Voltage <12V)");    
1565   4                          #endif  
1566   4                          }
1567   3                        break;
1568   3                       case _BATT_STATUS_CAPACITY_LEVEL1:                 
1569   3                       case _BATT_STATUS_CAPACITY_LEVEL2:
1570   3                       case _BATT_STATUS_CAPACITY_LEVEL3:
1571   3                       case _BATT_STATUS_CAPACITY_LEVEL4:
1572   3                       case _BATT_STATUS_CAPACITY_MAX:
1573   3      
1574   3                         SET_CHARGE_START_FLAG();
1575   3                         /*
1576   3                         if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
1577   3                         {     
1578   3                          #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1579   3                           GraphicsPrint(RED,"(Normal Voltage Charge >12V)");
1580   3                          #endif
1581   3                         CLR_BATTERY_CAPACITY_LOW_FLAG();  
1582   3                         SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
1583   3                         }  
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 27  

1584   3                         */
1585   3                         CLR_BATTERY_CAPACITY_HIGH_FLAG();   
1586   3                          break;
1587   3                      //case _BATT_STATUS_CAPACITY_MAX:
1588   3                      //  CLR_CHARGE_START_FLAG();
1589   3                        
1590   3                        //break;
1591   3                        }
1592   2            #else
                            if(GET_BATTERY_CAPACITY_LOW_FLAG()==_FALSE)
                            { 
                              if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)//<11.6V    
                              {
                              SET_BATTERY_CAPACITY_LOW_FLAG();                                      
                              #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                              GraphicsPrint(RED,"( Low Voltage <11.6V shut down)");
                              #endif                                      
                              MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
                              }             
                              
                            }
              
                
                            if(GET_BATTERY_ABNORMAL()==_FALSE)
                            { 
                                if(GET_BATTERY_CAPACITY()>=BATTERY_ACD_MAX)//>17    
                                {
                                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                GraphicsPrint(RED,"( HigH Voltage >17V shut down)");
                                #endif
                                SET_BATTERY_ABNORMAL();
                                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);            
                                }
                          
                            }
                      //}
              
                              if(GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)
                              {   
                                if(GET_BATTERY_STATE()!=_BATT_STATUS_CAPACITY_MIN)//<11.6V    
                                {
                                #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                GraphicsPrint(RED,"(Normal Voltage Charge >12V)");
                                #endif
                                CLR_BATTERY_CAPACITY_LOW_FLAG();  
                                SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.  
                                }         
                              }
                          //  if(((GET_BATTERY_CAPACITY()>675)||(GET_BATTERY_CAPACITY()<1023))&&(GET_BATTERY_ABNORMAL()==_TRUE)
             -)    
                            //      CLR_BATTERY_ABNORMAL();
              
                            if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)//>16.4V
                            {
                                  if(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)
                                  {
                                  #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                                  GraphicsPrint(RED,"(HIGH Voltage >15.5V stop charge)");
                                  #endif  
                                  SET_BATTERY_CAPACITY_HIGH_FLAG();   
                                  //SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
                                  }
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 28  

                                  
                            }
                            else
                              CLR_BATTERY_CAPACITY_HIGH_FLAG(); 
                            
                    #endif        
1651   2                MCUTimerActiveTimerEvent(SEC(10-5), _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE);  //check charge
1652   2                break;
1653   2          case     _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE:
1654   2            #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
1655   2            GraphicsPrint(CYAN,"(BATT)");
1656   2              if(GET_STAT1()==ON)
1657   2                GraphicsPrint(MAGENTA,"(S1=1)");
1658   2              else
1659   2                GraphicsPrint(GREEN,"(S1=0)");
1660   2              
1661   2              if(GET_STAT2()==ON)
1662   2                GraphicsPrint(MAGENTA,"(S2=1)");
1663   2              else
1664   2                GraphicsPrint(GREEN,"(S2=0)");
1665   2            #endif
1666   2          
1667   2            if(Check_ADAP_IN()==_TRUE)
1668   2              {
1669   3      
1670   3                if((PWR_START_flag==ON)&&(PowerFlag==OFF))
1671   3                {
1672   4                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_PSW_STATE);
1673   4                }
1674   3      
1675   3              SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);//reset battery state.
1676   3              MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);  
1677   3              }
1678   2            else 
1679   2              {
1680   3              if(GET_BAT_SYS()!=ON)
1681   3                {
1682   4                //SET_BAT_SYS();   // turn on  battery mode
1683   4                //CLR_BAT_SYS();   // turn on  battery mode
1684   4                //MCUTimerDelayXms(100);//delay 50ms          
1685   4                CLR_AC_MODE();  // turn off AC mode
1686   4                }
1687   3      
1688   3                //if((GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)&&(PowerFlag==ON))
1689   3                //MCUTimerActiveTimerEvent(SEC(0.1), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1690   3      
1691   3                MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE);       
1692   3      
1693   3      
1694   3              MCUTimerActiveTimerEvent(SEC(5), _SYSTEM_TIMER_EVENT_JUDGE_BATT_MODE);
1695   3              }
1696   2      
1697   2                CLR_AC_MODE();  
1698   2                    //CLR_BAT_SYS();
1699   2            break;
1700   2      
1701   2            case _SYSTEM_TIMER_EVENT_BATT_LOW_CHARGE: 
1702   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_LOW_CHARGE)
1703   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_LOW_CHARGE);
1704   2          break;
1705   2      
1706   2        case  _SYSTEM_TIMER_EVENT_BATT_HIGH_CHARGE:   
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 29  

1707   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_HIGH_CHARGE)
1708   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_HIGH_CHARGE);         
1709   2              break;
1710   2        case  _SYSTEM_TIMER_EVENT_BATT_NORMAL_CHARGE:   
1711   2            if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_NORMAL_CHARGE)
1712   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_NORMAL_CHARGE);             
1713   2            break;
1714   2      
1715   2        case  _SYSTEM_TIMER_EVENT_BATT_NO_CHARGE:   
1716   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_STOP_CHARGE)
1717   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_STOP_CHARGE);         
1718   2            break;
1719   2      
1720   2      
1721   2        case  _SYSTEM_TIMER_EVENT_NO_BATT:  
1722   2              if(GET_BATTERY_CHARGE_STATE()!=_BATT_STATUS_NO_BATT)
1723   2              UserInterfaceBatteryChargeMode(_BATT_STATUS_NO_BATT);         
1724   2              break;
1725   2            
1726   2      
1727   2              case _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER:
1728   2        
1729   2            second+=10;
1730   2          
1731   2            if(second==60)
1732   2            {
1733   3              second=0;
1734   3              minute++;
1735   3            }
1736   2        
1737   2            if(minute==60)
1738   2            {
1739   3              minute=0;
1740   3              hour++;
1741   3            }
1742   2        
1743   2            if(hour==24)
1744   2            {
1745   3              hour=0;
1746   3              day++;
1747   3            } 
1748   2      
1749   2          ShowWorkingTimer();
1750   2      
1751   2          MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);
1752   2             break;
1753   2      #if (_POWER_DOWN_ENABLE==ON)
1754   2          case _SYSTEM_TIMER_POWER_DOWN_MODE:
1755   2          //SET_MCU_POWER_DOWN_MODE();
1756   2          Power_down_mode=2;
1757   2              
1758   2          break;
1759   2      #endif
1760   2         default:
1761   2                  break;
1762   2       }
1763   1      }
1764          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5696    ----
C51 COMPILER V9.60.0.0   SYSTIMER                                                          04/12/2021 16:41:58 PAGE 30  

   CONSTANT SIZE    =    773    ----
   XDATA SIZE       =     92      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
