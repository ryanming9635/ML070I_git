C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/22/2021 09:18:52 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HS_DVRPROTOCOL
OBJECT MODULE PLACED IN .\Output\HS_DVRProtocol.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE HS_DVRProtocol.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG 
                    -OBJECTEXTEND PRINT(.\Listings\HS_DVRProtocol.lst) TABS(2) OBJECT(.\Output\HS_DVRProtocol.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  HS_DVRProtocol.c                                                                */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          #include "Config.h"
   9          #include "typedefs.h"
  10          #include "i2c.h"
  11          #include "main.h"
  12          #include "printf.h"
  13          #include "CPU.h"
  14          #include "HS_DVRProtocol.h"
  15          #include "keyremo.h"
  16          #include "Etc_eep.h"
  17          #include "reg.h"
  18          
  19          bit protocol_escape_flag;
  20          BYTE protocol_state=0;
  21          BYTE protocol_type;
  22          BYTE protocol_len;
  23          BYTE protocol_param;
  24          BYTE protocol_chksum;
  25          BYTE protocol_data_count;
  26          BYTE protocol_data[PROTOCOL_DATA_LENGTH];
  27          
  28          
  29          extern DATA  BYTE RS_out;
  30          extern float Encorder1,Encorder2,Encorder3,Encorder4;
  31          extern float Decimal1,Decimal2,Decimal3,Decimal4;
  32          extern StructDVRInfoType g_stDVRInfo;
  33          extern BYTE PowerFlag;
  34          extern BYTE CameraVolt;
  35          extern BYTE PWR_START_flag;
  36          extern StructBatteryInfoType g_stBatteryInfo ;
  37          extern BYTE DVRChangeCurrent;
  38          extern BYTE bytHoldOn3SPowerOff;
  39          extern BYTE bytFastEncoderMode;
  40          extern DWORD ulongRotateNumber;
  41          
  42          void DvrReceivePaser(void)
  43          {
  44   1      
  45   1      if ( RS2_ready())
  46   1        {
  47   2          BYTE c= RS2_rx();
  48   2          
  49   2          if (c == 0x7E)
  50   2          { 
  51   3            #if(_DEBUG_MESSAGE_UART_Protocol==ON)
                    GraphicsPrint(CYAN,"\r\n(GOT UART DATA)");
                    #endif
  54   3            protocol_escape_flag = 0;
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/22/2021 09:18:52 PAGE 2   

  55   3            protocol_state = PROTOCOL_STATE_TYPE;
  56   3            protocol_chksum = 0;
  57   3            return; 
  58   3          }
  59   2          
  60   2          if (c == 0x7D)
  61   2          {
  62   3            protocol_escape_flag = 1;
  63   3            return;
  64   3          }
  65   2          
  66   2          if (protocol_escape_flag)
  67   2          {
  68   3            protocol_escape_flag = 0;
  69   3            c |= 0x70;
  70   3          }
  71   2      
  72   2          if (protocol_state != PROTOCOL_STATE_CHECKSUM)
  73   2          {
  74   3            protocol_chksum ^= c;
  75   3          }
  76   2      
  77   2          switch (protocol_state)
  78   2          {
  79   3            case PROTOCOL_STATE_TYPE:
  80   3              protocol_type = c;
  81   3              switch (protocol_type)
  82   3              {
  83   4              case MCU_PROTOCOL_CMD_SYS_READY_NOTICE:
  84   4              case MCU_PROTOCOL_CMD_WATCH_DOG_KICK:
  85   4              case MCU_PROTOCOL_CMD_ENTRY_SLEEP:
  86   4              case MCU_PROTOCOL_CMD_DISTANCE_RESET:
  87   4              case MCU_PROTOCOL_CMD_ENCODER_SET:           
  88   4              case MCU_PROTOCOL_CMD_CAMERA_VOLTAGE:
  89   4              case MCU_PROTOCOL_CMD_WDT_SETTING:
  90   4              case MCU_PROTOCOL_CMD_GET_MCU_FW:
  91   4              case MCU_PROTOCOL_CMD_DVR_REBOOT:
  92   4              case MCU_PROTOCOL_CMD_DVR_SHUTDOWN:
  93   4              case  MCU_PROTOCOL_PROTOCOL_CMD_ENTER_ISP:
  94   4              case MCU_PROTOCOL_CMD_DC12V_PWR_START:  
  95   4              case  MCU_PROTOCOL_CMD_SET_CHARGE_CURRENT:        
  96   4              case  MCU_PROTOCOL_CMD_GET_ENCODER_COUNT:
  97   4              case  MCU_PROTOCOL_CMD_RESET_ENCODER_COUNT:
  98   4              case  MCU_PROTOCOL_CMD_SET_MODELE_TYPE:
  99   4      
 100   4                    protocol_state = PROTOCOL_STATE_LENGTH;
 101   4                    break;
 102   4                default:
 103   4                   protocol_state = PROTOCOL_STATE_NONE;
 104   4                   break;
 105   4              }
 106   3              break;
 107   3      
 108   3            case PROTOCOL_STATE_LENGTH:
 109   3              protocol_len = c;
 110   3              switch (protocol_type)
 111   3              {
 112   4                case MCU_PROTOCOL_CMD_SYS_READY_NOTICE:
 113   4                case MCU_PROTOCOL_CMD_WATCH_DOG_KICK:
 114   4                case MCU_PROTOCOL_CMD_ENTRY_SLEEP:
 115   4                case MCU_PROTOCOL_CMD_DISTANCE_RESET:
 116   4                case MCU_PROTOCOL_CMD_ENCODER_SET:           
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/22/2021 09:18:52 PAGE 3   

 117   4                case MCU_PROTOCOL_CMD_CAMERA_VOLTAGE:
 118   4                case MCU_PROTOCOL_CMD_WDT_SETTING:
 119   4                case MCU_PROTOCOL_CMD_GET_MCU_FW:
 120   4                case MCU_PROTOCOL_CMD_DVR_REBOOT:
 121   4                case MCU_PROTOCOL_CMD_DVR_SHUTDOWN:
 122   4              case  MCU_PROTOCOL_PROTOCOL_CMD_ENTER_ISP:  
 123   4              case  MCU_PROTOCOL_CMD_DC12V_PWR_START:
 124   4              case  MCU_PROTOCOL_CMD_SET_CHARGE_CURRENT:
 125   4                case  MCU_PROTOCOL_CMD_GET_ENCODER_COUNT:
 126   4                case  MCU_PROTOCOL_CMD_RESET_ENCODER_COUNT:
 127   4                case  MCU_PROTOCOL_CMD_SET_MODELE_TYPE:
 128   4                
 129   4                  if (protocol_len == 0)
 130   4                  {
 131   5                    protocol_state = PROTOCOL_STATE_CHECKSUM;
 132   5                  }
 133   4                  else
 134   4                  {   
 135   5                    protocol_data_count = 0;
 136   5                    protocol_state = PROTOCOL_STATE_DATA;
 137   5                    
 138   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"(1)");
                           #endif
 141   5                  }
 142   4                  break;            
 143   4                default:
 144   4                  protocol_state = PROTOCOL_STATE_NONE;
 145   4                  break;
 146   4              }
 147   3              break;
 148   3      
 149   3            case PROTOCOL_STATE_DATA:
 150   3              switch (protocol_type) {
 151   4                case MCU_PROTOCOL_CMD_SYS_READY_NOTICE:
 152   4                case MCU_PROTOCOL_CMD_WATCH_DOG_KICK:
 153   4                case MCU_PROTOCOL_CMD_ENTRY_SLEEP:
 154   4                case MCU_PROTOCOL_CMD_DISTANCE_RESET:
 155   4                case MCU_PROTOCOL_CMD_ENCODER_SET:           
 156   4                case MCU_PROTOCOL_CMD_CAMERA_VOLTAGE:
 157   4                case MCU_PROTOCOL_CMD_WDT_SETTING:
 158   4                case MCU_PROTOCOL_CMD_GET_MCU_FW:
 159   4                case MCU_PROTOCOL_CMD_DVR_REBOOT:
 160   4                case MCU_PROTOCOL_CMD_DVR_SHUTDOWN:
 161   4              case  MCU_PROTOCOL_PROTOCOL_CMD_ENTER_ISP:            
 162   4                case  MCU_PROTOCOL_CMD_DC12V_PWR_START:
 163   4                case  MCU_PROTOCOL_CMD_SET_CHARGE_CURRENT:
 164   4                  case  MCU_PROTOCOL_CMD_GET_ENCODER_COUNT:
 165   4                  case  MCU_PROTOCOL_CMD_RESET_ENCODER_COUNT:
 166   4                  case  MCU_PROTOCOL_CMD_SET_MODELE_TYPE:
 167   4                  
 168   4      
 169   4                    protocol_data[protocol_data_count] = c;
 170   4                  protocol_data_count++;
 171   4                   if (protocol_data_count == protocol_len) {
 172   5                    protocol_state = PROTOCOL_STATE_CHECKSUM;
 173   5                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                               GraphicsPrint(CYAN,"(2)");
                            #endif
 176   5                  }
 177   4                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                           GraphicsPrint(CYAN,"(3)");
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/22/2021 09:18:52 PAGE 4   

                           #endif
 180   4                
 181   4                   break;
 182   4                default:
 183   4                  protocol_state = PROTOCOL_STATE_NONE;
 184   4                  break;
 185   4              }
 186   3              break;
 187   3      
 188   3            case PROTOCOL_STATE_CHECKSUM:
 189   3              if (protocol_chksum == c)
 190   3              {
 191   4      
 192   4            #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                    GraphicsPrint(CYAN,"\r\n(Work CMD=%02x)",(WORD)protocol_type);
                    #endif        
 195   4                switch (protocol_type)
 196   4                {
 197   5                case MCU_PROTOCOL_CMD_SYS_READY_NOTICE:           
 198   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                           GraphicsPrint(CYAN,"\r\n(CMD:SYS READY)");
                          #endif
 201   5                  SET_DVR_SystemReadyNotic();
 202   5                  SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);
 203   5                    if(GET_DVR_Reboot()==_TRUE) 
 204   5                    {
 205   6                     CLR_DVR_Reboot();  
 206   6                     UserInterfaceBatteryChargeMode(_BATT_STATUS_DVR_ON);
 207   6                     MCUTimerCancelTimerEvent( _USER_TIMER_EVENT_OSD_DVR_REBOOT);
 208   6                    }
 209   5                  if(GET_DVR_WDTkickDisable()==_FALSE)
 210   5                  MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);
 211   5                  P3M1=0x00|0x30;//p3.4 and P3.5 set push pull mode ryan@20210223
 212   5                  break;
 213   5                case MCU_PROTOCOL_CMD_WATCH_DOG_KICK:
 214   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n(CMD:WDT kick)"); 
                          #endif
 217   5                  MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);  
 218   5                  if(GET_DVR_WDTkickDisable()==_FALSE)
 219   5                  MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);  
 220   5                  break;
 221   5                case MCU_PROTOCOL_CMD_ENTRY_SLEEP:  
 222   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n(CMD:ENTRY_SLEEP)");  
                          #endif            
 225   5                  //SET_DVR_EntrySleepMode();
 226   5                  MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_MCU_ENTRY_SLEEP_MODE);
 227   5                  break;
 228   5                case MCU_PROTOCOL_CMD_DISTANCE_RESET:
 229   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n(CMD:DISTANCE_RESET)"); 
                          #endif                        
 232   5                  //SET_DVR_DistanceReset();          
 233   5                  MCUTimerActiveTimerEvent(SEC(0.1),_USER_TIMER_EVENT_OSD_DISTANCE_RESET);
 234   5                  break;
 235   5                case MCU_PROTOCOL_CMD_ENCODER_SET:  
 236   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n (CMD:ENCODER_SET)"); 
                          Printf("\r\n Encorder1=%02x",(WORD)protocol_data[0]);
                          Printf("\r\n Decimal1=%02x",(WORD)protocol_data[1]);        
                          Printf("\r\n Encorder2=%02x",(WORD)protocol_data[2]);
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/22/2021 09:18:52 PAGE 5   

                          Printf("\r\n Decimal2=%02x",(WORD)protocol_data[3]);        
                          Printf("\r\n Encorder3=%02x",(WORD)protocol_data[4]);
                          Printf("\r\n Decimal3=%02x",(WORD)protocol_data[5]);        
                          Printf("\r\n Encorder4=%02x",(WORD)protocol_data[6]);
                          Printf("\r\n Decimal4=%02x",(WORD)protocol_data[7]);        
                          #endif
 247   5      
 248   5                  Encorder1=((protocol_data[0]>>4)*10)+(0x0f&protocol_data[0]);
 249   5                  Decimal1=((protocol_data[1]>>4)*10)+(0x0f&protocol_data[1]);
 250   5                  
 251   5                  Encorder2=((protocol_data[2]>>4)*10)+(0x0f&protocol_data[2]);
 252   5                  Decimal2=((protocol_data[3]>>4)*10)+(0x0f&protocol_data[3]);
 253   5                  
 254   5                  Encorder3=((protocol_data[4]>>4)*10)+(0x0f&protocol_data[4]);
 255   5                  Decimal3=((protocol_data[5]>>4)*10)+(0x0f&protocol_data[5]);
 256   5                  
 257   5                  Encorder4=((protocol_data[6]>>4)*10)+(0x0f&protocol_data[6]);
 258   5                  Decimal4=((protocol_data[7]>>4)*10)+(0x0f&protocol_data[7]);
 259   5      
 260   5                  WriteEEP(EEP_Encorder1,protocol_data[0]);
 261   5                  WriteEEP(EEP_Decimal1,protocol_data[1]);
 262   5      
 263   5                  WriteEEP(EEP_Encorder2,protocol_data[2]);
 264   5                  WriteEEP(EEP_Decimal2,protocol_data[3]);
 265   5      
 266   5                  WriteEEP(EEP_Encorder3,protocol_data[4]);
 267   5                  WriteEEP(EEP_Decimal3,protocol_data[5]);
 268   5      
 269   5                  WriteEEP(EEP_Encorder4,protocol_data[6]);
 270   5                  WriteEEP(EEP_Decimal4,protocol_data[7]);
 271   5      
 272   5                  MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_ENCODER_DEVIATION_SETTING);           
 273   5      
 274   5                  break;
 275   5      
 276   5                case MCU_PROTOCOL_CMD_CAMERA_VOLTAGE: 
 277   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n(CMD:CAMERA_VOLTAGE)"); 
                          #endif    
 280   5      
 281   5                  #if 1
 282   5                  if(protocol_data[0]<5)
 283   5                  protocol_data[0]=5;
 284   5                  
 285   5                  CameraVolt=((protocol_data[0]-5)*10)+(protocol_data[1]);
 286   5      
 287   5                  if(CameraVolt>40)
 288   5                    CameraVolt=40;
 289   5                  else 
 290   5                        CameraVolt=(40-CameraVolt);
 291   5                  MCUTimerReactiveTimerEvent(SEC(0.5),_USER_TIMER_EVENT_OSD_SET_CAMERA_VOLTAGE);
 292   5                  #else
                          if(protocol_data[0])
                            {
                              if(CameraVolt)
                              {
                              CameraVolt--;
                              }
                              else
                              {
                              CameraVolt=0;
                              }
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/22/2021 09:18:52 PAGE 6   

                              MCUTimerReactiveTimerEvent(SEC(0.5),_USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_INC);
                            }
                          else
                            {
                              if(CameraVolt<40)
                                {
                              CameraVolt++;
                              }
                              else
                              {
                                CameraVolt=40;
                              }
                            MCUTimerReactiveTimerEvent(SEC(0.5),_USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_DEC);
                            }
                          #endif
 318   5                  break;
 319   5      
 320   5                case MCU_PROTOCOL_CMD_WDT_SETTING:  
 321   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n(CMD:WDT_SETTING)");  
                          #endif                  
 324   5      
 325   5                  if(protocol_data[0]==0)
 326   5                    {
 327   6                    CLR_DVR_WDTkickDisable();
 328   6                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                            GraphicsPrint(CYAN,"\r\n(CMD:WDT_Enable=1)"); 
                            #endif
 331   6                    }
 332   5                  else if(protocol_data[0]==1)
 333   5                    {
 334   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);
 335   6                    SET_DVR_WDTkickDisable();
 336   6                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                            GraphicsPrint(CYAN,"\r\n(CMD:WDT_Enable=0)"); 
                            #endif
 339   6                    }
 340   5                  break;
 341   5      
 342   5                case MCU_PROTOCOL_CMD_GET_MCU_FW:           
 343   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n(CMD:GET_MCU_FW)"); 
                          #endif                        
 346   5                  MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_GET_MCU_VERSION);
 347   5                  break;
 348   5      
 349   5                case MCU_PROTOCOL_CMD_DVR_REBOOT: 
 350   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n(CMD:DVR_REBOOT)"); 
                          #endif  
 353   5                  
 354   5                    if(protocol_data[0]==0)
 355   5                    {
 356   6                    CLR_DVR_SystemReadyNotic();
 357   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);
 358   6                    //MCUTimerActiveTimerEvent(SEC(60), _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);  
 359   6      
 360   6                    MCUTimerCancelTimerEvent(_SYSTEM_TIMER_EVENT_GRN_BLINK);
 361   6                    MCUTimerCancelTimerEvent(_SYSTEM_TIMER_EVENT_GRN_2S_BLINK);
 362   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_RED_BLINK);
 363   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
 364   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/22/2021 09:18:52 PAGE 7   

 365   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON);
 366   6      
 367   6                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_GRN_RED_BLINK);//Update LED Status
 368   6                    
 369   6                    }
 370   5                    else if(protocol_data[0]==1)
 371   5                    {
 372   6                    SET_DVR_Reboot();
 373   6                    MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_DVR_REBOOT);
 374   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);
 375   6                    }
 376   5                    else if(protocol_data[0]==2)
 377   5                    {
 378   6                    SET_DVR_Reboot();
 379   6                    SET_DVR_RebootAndPower();
 380   6                    MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_DVR_REBOOT);
 381   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);
 382   6                    }
 383   5      
 384   5                  break;
 385   5      
 386   5                case MCU_PROTOCOL_CMD_DVR_SHUTDOWN:
 387   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n(CMD:DVR_SHUTDOWN)"); 
                          #endif  
 390   5                  
 391   5                    if((protocol_data[0]==1))
 392   5                      {
 393   6                      CLR_DVR_Shutdown();
 394   6                      bytHoldOn3SPowerOff=OFF;
 395   6                      #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                              GraphicsPrint(GREEN,"\r\n(CMD:bytHoldOn3SPowerOff=OFF)"); 
                              #endif
 398   6                      }
 399   5                    else if((PowerFlag==ON)&&(protocol_data[0]==0))
 400   5                    {
 401   6                    CLR_DVR_Shutdown();
 402   6                    PowerFlag=OFF;
 403   6                    WriteEEP(EEP_Powerflag,PowerFlag);
 404   6      
 405   6                    if(GET_DVR_EntrySleepMode()==TRUE)
 406   6                    CLR_DVR_EntrySleepMode();
 407   6                    }
 408   5                    if((PowerFlag==ON)&&(protocol_data[0]==2))
 409   5                    {
 410   6                    SET_BATTERY_CAPACITY_LOW_FLAG();
 411   6                    CLR_DVR_Shutdown();
 412   6                    PowerFlag=OFF;
 413   6                    WriteEEP(EEP_Powerflag,PowerFlag);
 414   6                    if(ReadEEP(EEP_LowBattery_Flag)==OFF)
 415   6                    WriteEEP(EEP_LowBattery_Flag,ON);
 416   6                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                            GraphicsPrint(RED,"\r\n(CMD:LOW Batt volt. shutdown)"); 
                            #endif  
 419   6                    if(GET_DVR_EntrySleepMode()==TRUE)
 420   6                    CLR_DVR_EntrySleepMode();
 421   6                    }
 422   5                    else if((PowerFlag==ON)&&(protocol_data[0]==3))
 423   5                      {
 424   6                      bytHoldOn3SPowerOff=ON;
 425   6                      #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                              GraphicsPrint(RED,"\r\n(CMD:bytHoldOn3SPowerOff)"); 
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/22/2021 09:18:52 PAGE 8   

                              #endif
 428   6                      }
 429   5      
 430   5                  MCUTimerCancelTimerEvent(_USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);             
 431   5      
 432   5                  if(bytHoldOn3SPowerOff==ON)           
 433   5                  MCUTimerActiveTimerEvent(SEC(15), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
 434   5      
 435   5                  break;
 436   5      
 437   5                case  MCU_PROTOCOL_PROTOCOL_CMD_ENTER_ISP:  
 438   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n(CMD:MCU_ENTER_ISP_MODE)"); 
                          #endif              
 441   5                  MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_DVR_ENTER_ISP_MODE);
 442   5                  break;
 443   5      
 444   5                case  MCU_PROTOCOL_CMD_DC12V_PWR_START:
 445   5      
 446   5                  if(protocol_data[0]==ON)
 447   5                    {
 448   6                    WriteEEP(EEP_DC12_PWR_START,ON);
 449   6                    PWR_START_flag=ON;
 450   6                    }
 451   5                  else
 452   5                    {
 453   6                    WriteEEP(EEP_DC12_PWR_START,OFF);
 454   6                    PWR_START_flag=OFF;
 455   6                    }
 456   5      
 457   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          GraphicsPrint(CYAN,"\r\n(CMD:MCU_DC12V_PWR_START=%d)",(WORD)ReadEEP(EEP_DC12_PWR_START)); 
                          #endif  
 460   5      
 461   5                  
 462   5                  break;
 463   5                case  MCU_PROTOCOL_CMD_SET_CHARGE_CURRENT:
 464   5                    if(protocol_data[0]==ON)                    
 465   5                      DVRChangeCurrent=0x11;
 466   5                    else
 467   5                      DVRChangeCurrent=0x10;
 468   5      
 469   5                #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                        GraphicsPrint(GREEN,"\r\n(CMD:SET_CHARGE_CURRENT=%02x)",(WORD)DVRChangeCurrent);  
                        #endif  
 472   5                SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);///reset charge current 
 473   5      
 474   5      
 475   5                  break;
 476   5                case MCU_PROTOCOL_CMD_GET_ENCODER_COUNT:
 477   5                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                            GraphicsPrint(GREEN,"\r\n(CMD:MCU_PROTOCOL_CMD_GET_ENCODER_COUNT)");  
                            #endif
 480   5                    MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_REPLY_ENCODER_COUNT);
 481   5                  break;
 482   5                case MCU_PROTOCOL_CMD_RESET_ENCODER_COUNT:
 483   5                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                            GraphicsPrint(GREEN,"\r\n(CMD:MCU_PROTOCOL_CMD_RESET_ENCODER_COUNT)");  
                            #endif
 486   5                    MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_RESET_ENCODER_COUNT);
 487   5                  break;
 488   5                case MCU_PROTOCOL_CMD_SET_MODELE_TYPE:
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/22/2021 09:18:52 PAGE 9   

 489   5      
 490   5                    if(protocol_data[0]==ON)                    
 491   5                      bytFastEncoderMode=ON;
 492   5                    else
 493   5                      bytFastEncoderMode=OFF;
 494   5      
 495   5                    if(bytFastEncoderMode==ON)
 496   5                      {
 497   6                    ulongRotateNumber=ReadEEP(EEP_RotateNumberH);
 498   6                    ulongRotateNumber<<=8;
 499   6                    ulongRotateNumber|=ReadEEP(EEP_RotateNumberM);  
 500   6                    ulongRotateNumber<<=8;
 501   6                    ulongRotateNumber|=ReadEEP(EEP_RotateNumberL);  
 502   6                      }
 503   5                    else
 504   5                      {
 505   6                      ulongRotateNumber=ReadEEP(EEP_RotateNumberRH);
 506   6                      ulongRotateNumber<<=8;
 507   6                      ulongRotateNumber|=ReadEEP(EEP_RotateNumberRM); 
 508   6                      ulongRotateNumber<<=8;
 509   6                      ulongRotateNumber|=ReadEEP(EEP_RotateNumberRL);
 510   6                      }
 511   5                    
 512   5                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                            GraphicsPrint(CYAN,"\r\n(CMD:MCU_PROTOCOL_CMD_SET_MODELE_TYPE=%d)",(WORD)bytFastEncoderMode); 
                            #endif
 515   5                  break;
 516   5                default:
 517   5                  break;
 518   5                }
 519   4                
 520   4              }
 521   3              else
 522   3                  {
 523   4                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
                          DEBUG_MESSAGE("(CS error)");
                          #endif
 526   4                  }
 527   3              protocol_state = PROTOCOL_STATE_NONE;
 528   3              break;
 529   3            default:
 530   3              break;
 531   3          }
 532   2        }
 533   1      
 534   1      
 535   1      }
 536          
 537          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1717    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    262       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
