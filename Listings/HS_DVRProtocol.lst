C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/13/2021 10:16:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HS_DVRPROTOCOL
OBJECT MODULE PLACED IN .\Output\HS_DVRProtocol.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE HS_DVRProtocol.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG 
                    -OBJECTEXTEND PRINT(.\Listings\HS_DVRProtocol.lst) TABS(2) OBJECT(.\Output\HS_DVRProtocol.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  HS_DVRProtocol.c                                                                */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          #include "Config.h"
   9          #include "typedefs.h"
  10          #include "i2c.h"
  11          #include "main.h"
  12          #include "printf.h"
*** WARNING C320 IN LINE 44 OF .\Include\printf.h: DEBUG is defined 
  13          #include "CPU.h"
  14          #include "HS_DVRProtocol.h"
  15          #include "keyremo.h"
  16          #include "Etc_eep.h"
  17          #include "reg.h"
  18          
  19          bit protocol_escape_flag;
  20          BYTE protocol_state=0;
  21          BYTE protocol_type;
  22          BYTE protocol_len;
  23          BYTE protocol_param;
  24          BYTE protocol_chksum;
  25          BYTE protocol_data_count;
  26          BYTE protocol_data[PROTOCOL_DATA_LENGTH];
  27          
  28          
  29          extern DATA  BYTE RS_out;
  30          extern float Encorder1,Encorder2,Encorder3,Encorder4;
  31          extern float Decimal1,Decimal2,Decimal3,Decimal4;
  32          extern StructDVRInfoType g_stDVRInfo;
  33          extern BYTE PowerFlag;
  34          extern BYTE CameraVolt;
  35          extern BYTE PWR_START_flag;
  36          extern StructBatteryInfoType g_stBatteryInfo ;
  37          extern BYTE DVRChangeCurrent;
  38          extern BYTE bytHoldOn3SPowerOff;
  39          extern BYTE bytFastEncoderMode;
  40          
  41          void DvrReceivePaser(void)
  42          {
  43   1      
  44   1      if ( RS2_ready())
  45   1        {
  46   2          BYTE c= RS2_rx();
  47   2          
  48   2          if (c == 0x7E)
  49   2          { 
  50   3            #if(_DEBUG_MESSAGE_UART_Protocol==ON)
  51   3            GraphicsPrint(CYAN,"\r\n(GOT UART DATA)");
  52   3            #endif
  53   3            protocol_escape_flag = 0;
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/13/2021 10:16:18 PAGE 2   

  54   3            protocol_state = PROTOCOL_STATE_TYPE;
  55   3            protocol_chksum = 0;
  56   3            return; 
  57   3          }
  58   2          
  59   2          if (c == 0x7D)
  60   2          {
  61   3            protocol_escape_flag = 1;
  62   3            return;
  63   3          }
  64   2          
  65   2          if (protocol_escape_flag)
  66   2          {
  67   3            protocol_escape_flag = 0;
  68   3            c |= 0x70;
  69   3          }
  70   2      
  71   2          if (protocol_state != PROTOCOL_STATE_CHECKSUM)
  72   2          {
  73   3            protocol_chksum ^= c;
  74   3          }
  75   2      
  76   2          switch (protocol_state)
  77   2          {
  78   3            case PROTOCOL_STATE_TYPE:
  79   3              protocol_type = c;
  80   3              switch (protocol_type)
  81   3              {
  82   4              case MCU_PROTOCOL_CMD_SYS_READY_NOTICE:
  83   4              case MCU_PROTOCOL_CMD_WATCH_DOG_KICK:
  84   4              case MCU_PROTOCOL_CMD_ENTRY_SLEEP:
  85   4              case MCU_PROTOCOL_CMD_DISTANCE_RESET:
  86   4              case MCU_PROTOCOL_CMD_ENCODER_SET:           
  87   4              case MCU_PROTOCOL_CMD_CAMERA_VOLTAGE:
  88   4              case MCU_PROTOCOL_CMD_WDT_SETTING:
  89   4              case MCU_PROTOCOL_CMD_GET_MCU_FW:
  90   4              case MCU_PROTOCOL_CMD_DVR_REBOOT:
  91   4              case MCU_PROTOCOL_CMD_DVR_SHUTDOWN:
  92   4              case  MCU_PROTOCOL_PROTOCOL_CMD_ENTER_ISP:
  93   4              case MCU_PROTOCOL_CMD_DC12V_PWR_START:  
  94   4              case  MCU_PROTOCOL_CMD_SET_CHARGE_CURRENT:        
  95   4              case  MCU_PROTOCOL_CMD_GET_ENCODER_COUNT:
  96   4              case  MCU_PROTOCOL_CMD_RESET_ENCODER_COUNT:
  97   4              case  MCU_PROTOCOL_CMD_SET_MODELE_TYPE:
  98   4      
  99   4                    protocol_state = PROTOCOL_STATE_LENGTH;
 100   4                    break;
 101   4                default:
 102   4                   protocol_state = PROTOCOL_STATE_NONE;
 103   4                   break;
 104   4              }
 105   3              break;
 106   3      
 107   3            case PROTOCOL_STATE_LENGTH:
 108   3              protocol_len = c;
 109   3              switch (protocol_type)
 110   3              {
 111   4                case MCU_PROTOCOL_CMD_SYS_READY_NOTICE:
 112   4                case MCU_PROTOCOL_CMD_WATCH_DOG_KICK:
 113   4                case MCU_PROTOCOL_CMD_ENTRY_SLEEP:
 114   4                case MCU_PROTOCOL_CMD_DISTANCE_RESET:
 115   4                case MCU_PROTOCOL_CMD_ENCODER_SET:           
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/13/2021 10:16:18 PAGE 3   

 116   4                case MCU_PROTOCOL_CMD_CAMERA_VOLTAGE:
 117   4                case MCU_PROTOCOL_CMD_WDT_SETTING:
 118   4                case MCU_PROTOCOL_CMD_GET_MCU_FW:
 119   4                case MCU_PROTOCOL_CMD_DVR_REBOOT:
 120   4                case MCU_PROTOCOL_CMD_DVR_SHUTDOWN:
 121   4              case  MCU_PROTOCOL_PROTOCOL_CMD_ENTER_ISP:  
 122   4              case  MCU_PROTOCOL_CMD_DC12V_PWR_START:
 123   4              case  MCU_PROTOCOL_CMD_SET_CHARGE_CURRENT:
 124   4                case  MCU_PROTOCOL_CMD_GET_ENCODER_COUNT:
 125   4                case  MCU_PROTOCOL_CMD_RESET_ENCODER_COUNT:
 126   4                case  MCU_PROTOCOL_CMD_SET_MODELE_TYPE:
 127   4                
 128   4                  if (protocol_len == 0)
 129   4                  {
 130   5                    protocol_state = PROTOCOL_STATE_CHECKSUM;
 131   5                  }
 132   4                  else
 133   4                  {   
 134   5                    protocol_data_count = 0;
 135   5                    protocol_state = PROTOCOL_STATE_DATA;
 136   5                    
 137   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 138   5                  GraphicsPrint(CYAN,"(1)");
 139   5                   #endif
 140   5                  }
 141   4                  break;            
 142   4                default:
 143   4                  protocol_state = PROTOCOL_STATE_NONE;
 144   4                  break;
 145   4              }
 146   3              break;
 147   3      
 148   3            case PROTOCOL_STATE_DATA:
 149   3              switch (protocol_type) {
 150   4                case MCU_PROTOCOL_CMD_SYS_READY_NOTICE:
 151   4                case MCU_PROTOCOL_CMD_WATCH_DOG_KICK:
 152   4                case MCU_PROTOCOL_CMD_ENTRY_SLEEP:
 153   4                case MCU_PROTOCOL_CMD_DISTANCE_RESET:
 154   4                case MCU_PROTOCOL_CMD_ENCODER_SET:           
 155   4                case MCU_PROTOCOL_CMD_CAMERA_VOLTAGE:
 156   4                case MCU_PROTOCOL_CMD_WDT_SETTING:
 157   4                case MCU_PROTOCOL_CMD_GET_MCU_FW:
 158   4                case MCU_PROTOCOL_CMD_DVR_REBOOT:
 159   4                case MCU_PROTOCOL_CMD_DVR_SHUTDOWN:
 160   4              case  MCU_PROTOCOL_PROTOCOL_CMD_ENTER_ISP:            
 161   4                case  MCU_PROTOCOL_CMD_DC12V_PWR_START:
 162   4                case  MCU_PROTOCOL_CMD_SET_CHARGE_CURRENT:
 163   4                  case  MCU_PROTOCOL_CMD_GET_ENCODER_COUNT:
 164   4                  case  MCU_PROTOCOL_CMD_RESET_ENCODER_COUNT:
 165   4                  case  MCU_PROTOCOL_CMD_SET_MODELE_TYPE:
 166   4                  
 167   4      
 168   4                    protocol_data[protocol_data_count] = c;
 169   4                  protocol_data_count++;
 170   4                   if (protocol_data_count == protocol_len) {
 171   5                    protocol_state = PROTOCOL_STATE_CHECKSUM;
 172   5                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 173   5                       GraphicsPrint(CYAN,"(2)");
 174   5                    #endif
 175   5                  }
 176   4                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 177   4                   GraphicsPrint(CYAN,"(3)");
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/13/2021 10:16:18 PAGE 4   

 178   4                   #endif
 179   4                
 180   4                   break;
 181   4                default:
 182   4                  protocol_state = PROTOCOL_STATE_NONE;
 183   4                  break;
 184   4              }
 185   3              break;
 186   3      
 187   3            case PROTOCOL_STATE_CHECKSUM:
 188   3              if (protocol_chksum == c)
 189   3              {
 190   4      
 191   4            #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 192   4            GraphicsPrint(CYAN,"\r\n(Work CMD=%02x)",(WORD)protocol_type);
 193   4            #endif        
 194   4                switch (protocol_type)
 195   4                {
 196   5                case MCU_PROTOCOL_CMD_SYS_READY_NOTICE:           
 197   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 198   5                   GraphicsPrint(CYAN,"\r\n(CMD:SYS READY)");
 199   5                  #endif
 200   5                  SET_DVR_SystemReadyNotic();
 201   5                  SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);
 202   5                    if(GET_DVR_Reboot()==_TRUE) 
 203   5                    {
 204   6                     CLR_DVR_Reboot();  
 205   6                     UserInterfaceBatteryChargeMode(_BATT_STATUS_DVR_ON);
 206   6                     MCUTimerCancelTimerEvent( _USER_TIMER_EVENT_OSD_DVR_REBOOT);
 207   6                    }
 208   5                  if(GET_DVR_WDTkickDisable()==_FALSE)
 209   5                  MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);
 210   5                  P3M1=0x00|0x30;//p3.4 and P3.5 set push pull mode ryan@20210223
 211   5                  break;
 212   5                case MCU_PROTOCOL_CMD_WATCH_DOG_KICK:
 213   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 214   5                  GraphicsPrint(CYAN,"\r\n(CMD:WDT kick)"); 
 215   5                  #endif
 216   5                  MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);  
 217   5                  if(GET_DVR_WDTkickDisable()==_FALSE)
 218   5                  MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);  
 219   5                  break;
 220   5                case MCU_PROTOCOL_CMD_ENTRY_SLEEP:  
 221   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 222   5                  GraphicsPrint(CYAN,"\r\n(CMD:ENTRY_SLEEP)");  
 223   5                  #endif            
 224   5                  //SET_DVR_EntrySleepMode();
 225   5                  MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_MCU_ENTRY_SLEEP_MODE);
 226   5                  break;
 227   5                case MCU_PROTOCOL_CMD_DISTANCE_RESET:
 228   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 229   5                  GraphicsPrint(CYAN,"\r\n(CMD:DISTANCE_RESET)"); 
 230   5                  #endif                        
 231   5                  //SET_DVR_DistanceReset();          
 232   5                  MCUTimerActiveTimerEvent(SEC(0.1),_USER_TIMER_EVENT_OSD_DISTANCE_RESET);
 233   5                  break;
 234   5                case MCU_PROTOCOL_CMD_ENCODER_SET:  
 235   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 236   5                  GraphicsPrint(CYAN,"\r\n (CMD:ENCODER_SET)"); 
 237   5                  Printf("\r\n Encorder1=%02x",(WORD)protocol_data[0]);
 238   5                  Printf("\r\n Decimal1=%02x",(WORD)protocol_data[1]);        
 239   5                  Printf("\r\n Encorder2=%02x",(WORD)protocol_data[2]);
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/13/2021 10:16:18 PAGE 5   

 240   5                  Printf("\r\n Decimal2=%02x",(WORD)protocol_data[3]);        
 241   5                  Printf("\r\n Encorder3=%02x",(WORD)protocol_data[4]);
 242   5                  Printf("\r\n Decimal3=%02x",(WORD)protocol_data[5]);        
 243   5                  Printf("\r\n Encorder4=%02x",(WORD)protocol_data[6]);
 244   5                  Printf("\r\n Decimal4=%02x",(WORD)protocol_data[7]);        
 245   5                  #endif
 246   5      
 247   5                  Encorder1=((protocol_data[0]>>4)*10)+(0x0f&protocol_data[0]);
 248   5                  Decimal1=((protocol_data[1]>>4)*10)+(0x0f&protocol_data[1]);
 249   5                  
 250   5                  Encorder2=((protocol_data[2]>>4)*10)+(0x0f&protocol_data[2]);
 251   5                  Decimal2=((protocol_data[3]>>4)*10)+(0x0f&protocol_data[3]);
 252   5                  
 253   5                  Encorder3=((protocol_data[4]>>4)*10)+(0x0f&protocol_data[4]);
 254   5                  Decimal3=((protocol_data[5]>>4)*10)+(0x0f&protocol_data[5]);
 255   5                  
 256   5                  Encorder4=((protocol_data[6]>>4)*10)+(0x0f&protocol_data[6]);
 257   5                  Decimal4=((protocol_data[7]>>4)*10)+(0x0f&protocol_data[7]);
 258   5      
 259   5                  WriteEEP(EEP_Encorder1,protocol_data[0]);
 260   5                  WriteEEP(EEP_Decimal1,protocol_data[1]);
 261   5      
 262   5                  WriteEEP(EEP_Encorder2,protocol_data[2]);
 263   5                  WriteEEP(EEP_Decimal2,protocol_data[3]);
 264   5      
 265   5                  WriteEEP(EEP_Encorder3,protocol_data[4]);
 266   5                  WriteEEP(EEP_Decimal3,protocol_data[5]);
 267   5      
 268   5                  WriteEEP(EEP_Encorder4,protocol_data[6]);
 269   5                  WriteEEP(EEP_Decimal4,protocol_data[7]);
 270   5      
 271   5                  MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_ENCODER_DEVIATION_SETTING);           
 272   5      
 273   5                  break;
 274   5      
 275   5                case MCU_PROTOCOL_CMD_CAMERA_VOLTAGE: 
 276   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 277   5                  GraphicsPrint(CYAN,"\r\n(CMD:CAMERA_VOLTAGE)"); 
 278   5                  #endif    
 279   5      
 280   5                  #if 1
 281   5                  if(protocol_data[0]<5)
 282   5                  protocol_data[0]=5;
 283   5                  
 284   5                  CameraVolt=((protocol_data[0]-5)*10)+(protocol_data[1]);
 285   5      
 286   5                  if(CameraVolt>40)
 287   5                    CameraVolt=40;
 288   5                  else 
 289   5                        CameraVolt=(40-CameraVolt);
 290   5                  MCUTimerReactiveTimerEvent(SEC(0.5),_USER_TIMER_EVENT_OSD_SET_CAMERA_VOLTAGE);
 291   5                  #else
                          if(protocol_data[0])
                            {
                              if(CameraVolt)
                              {
                              CameraVolt--;
                              }
                              else
                              {
                              CameraVolt=0;
                              }
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/13/2021 10:16:18 PAGE 6   

                              MCUTimerReactiveTimerEvent(SEC(0.5),_USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_INC);
                            }
                          else
                            {
                              if(CameraVolt<40)
                                {
                              CameraVolt++;
                              }
                              else
                              {
                                CameraVolt=40;
                              }
                            MCUTimerReactiveTimerEvent(SEC(0.5),_USER_TIMER_EVENT_OSD_CAMERA_VOLTAGE_DEC);
                            }
                          #endif
 317   5                  break;
 318   5      
 319   5                case MCU_PROTOCOL_CMD_WDT_SETTING:  
 320   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 321   5                  GraphicsPrint(CYAN,"\r\n(CMD:WDT_SETTING)");  
 322   5                  #endif                  
 323   5      
 324   5                  if(protocol_data[0]==0)
 325   5                    {
 326   6                    CLR_DVR_WDTkickDisable();
 327   6                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 328   6                    GraphicsPrint(CYAN,"\r\n(CMD:WDT_Enable=1)"); 
 329   6                    #endif
 330   6                    }
 331   5                  else if(protocol_data[0]==1)
 332   5                    {
 333   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);
 334   6                    SET_DVR_WDTkickDisable();
 335   6                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 336   6                    GraphicsPrint(CYAN,"\r\n(CMD:WDT_Enable=0)"); 
 337   6                    #endif
 338   6                    }
 339   5                  break;
 340   5      
 341   5                case MCU_PROTOCOL_CMD_GET_MCU_FW:           
 342   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 343   5                  GraphicsPrint(CYAN,"\r\n(CMD:GET_MCU_FW)"); 
 344   5                  #endif                        
 345   5                  MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_GET_MCU_VERSION);
 346   5                  break;
 347   5      
 348   5                case MCU_PROTOCOL_CMD_DVR_REBOOT: 
 349   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 350   5                  GraphicsPrint(CYAN,"\r\n(CMD:DVR_REBOOT)"); 
 351   5                  #endif  
 352   5                  
 353   5                    if(protocol_data[0]==0)
 354   5                    {
 355   6                    CLR_DVR_SystemReadyNotic();
 356   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);
 357   6                    //MCUTimerActiveTimerEvent(SEC(60), _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);  
 358   6      
 359   6                    MCUTimerCancelTimerEvent(_SYSTEM_TIMER_EVENT_GRN_BLINK);
 360   6                    MCUTimerCancelTimerEvent(_SYSTEM_TIMER_EVENT_GRN_2S_BLINK);
 361   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_RED_BLINK);
 362   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_GRN_RED_BLINK);
 363   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK);
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/13/2021 10:16:18 PAGE 7   

 364   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON);
 365   6      
 366   6                    MCUTimerActiveTimerEvent(SEC(0.1), _SYSTEM_TIMER_EVENT_GRN_RED_BLINK);//Update LED Status
 367   6                    
 368   6                    }
 369   5                    else if(protocol_data[0]==1)
 370   5                    {
 371   6                    SET_DVR_Reboot();
 372   6                    MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_DVR_REBOOT);
 373   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);
 374   6                    }
 375   5                    else if(protocol_data[0]==2)
 376   5                    {
 377   6                    SET_DVR_Reboot();
 378   6                    SET_DVR_RebootAndPower();
 379   6                    MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_DVR_REBOOT);
 380   6                    MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);
 381   6                    }
 382   5      
 383   5                  break;
 384   5      
 385   5                case MCU_PROTOCOL_CMD_DVR_SHUTDOWN:
 386   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 387   5                  GraphicsPrint(CYAN,"\r\n(CMD:DVR_SHUTDOWN)"); 
 388   5                  #endif  
 389   5                  
 390   5                    if((protocol_data[0]==1))
 391   5                      {
 392   6                      CLR_DVR_Shutdown();
 393   6                      bytHoldOn3SPowerOff=OFF;
 394   6                      #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 395   6                      GraphicsPrint(GREEN,"\r\n(CMD:bytHoldOn3SPowerOff=OFF)"); 
 396   6                      #endif
 397   6                      }
 398   5                    else if((PowerFlag==ON)&&(protocol_data[0]==0))
 399   5                    {
 400   6                    CLR_DVR_Shutdown();
 401   6                    PowerFlag=OFF;
 402   6                    WriteEEP(EEP_Powerflag,PowerFlag);
 403   6      
 404   6                    if(GET_DVR_EntrySleepMode()==TRUE)
 405   6                    CLR_DVR_EntrySleepMode();
 406   6                    }
 407   5                    if((PowerFlag==ON)&&(protocol_data[0]==2))
 408   5                    {
 409   6                    SET_BATTERY_CAPACITY_LOW_FLAG();
 410   6                    CLR_DVR_Shutdown();
 411   6                    PowerFlag=OFF;
 412   6                    WriteEEP(EEP_Powerflag,PowerFlag);
 413   6                    if(ReadEEP(EEP_LowBattery_Flag)==OFF)
 414   6                    WriteEEP(EEP_LowBattery_Flag,ON);
 415   6                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 416   6                    GraphicsPrint(RED,"\r\n(CMD:LOW Batt volt. shutdown)"); 
 417   6                    #endif  
 418   6                    if(GET_DVR_EntrySleepMode()==TRUE)
 419   6                    CLR_DVR_EntrySleepMode();
 420   6                    }
 421   5                    else if((PowerFlag==ON)&&(protocol_data[0]==3))
 422   5                      {
 423   6                      bytHoldOn3SPowerOff=ON;
 424   6                      #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 425   6                      GraphicsPrint(RED,"\r\n(CMD:bytHoldOn3SPowerOff)"); 
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/13/2021 10:16:18 PAGE 8   

 426   6                      #endif
 427   6                      }
 428   5      
 429   5                  MCUTimerCancelTimerEvent(_USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);             
 430   5      
 431   5                  if(bytHoldOn3SPowerOff==ON)           
 432   5                  MCUTimerActiveTimerEvent(SEC(15), _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
 433   5      
 434   5                  break;
 435   5      
 436   5                case  MCU_PROTOCOL_PROTOCOL_CMD_ENTER_ISP:  
 437   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 438   5                  GraphicsPrint(CYAN,"\r\n(CMD:MCU_ENTER_ISP_MODE)"); 
 439   5                  #endif              
 440   5                  MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_OSD_DVR_ENTER_ISP_MODE);
 441   5                  break;
 442   5      
 443   5                case  MCU_PROTOCOL_CMD_DC12V_PWR_START:
 444   5      
 445   5                  if(protocol_data[0]==ON)
 446   5                    {
 447   6                    WriteEEP(EEP_DC12_PWR_START,ON);
 448   6                    PWR_START_flag=ON;
 449   6                    }
 450   5                  else
 451   5                    {
 452   6                    WriteEEP(EEP_DC12_PWR_START,OFF);
 453   6                    PWR_START_flag=OFF;
 454   6                    }
 455   5      
 456   5                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 457   5                  GraphicsPrint(CYAN,"\r\n(CMD:MCU_DC12V_PWR_START=%d)",(WORD)ReadEEP(EEP_DC12_PWR_START)); 
 458   5                  #endif  
 459   5      
 460   5                  
 461   5                  break;
 462   5                case  MCU_PROTOCOL_CMD_SET_CHARGE_CURRENT:
 463   5                    if(protocol_data[0]==ON)                    
 464   5                      DVRChangeCurrent=0x11;
 465   5                    else
 466   5                      DVRChangeCurrent=0x10;
 467   5      
 468   5                #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 469   5                GraphicsPrint(GREEN,"\r\n(CMD:SET_CHARGE_CURRENT=%02x)",(WORD)DVRChangeCurrent);  
 470   5                #endif  
 471   5                SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);///reset charge current 
 472   5      
 473   5      
 474   5                  break;
 475   5                case MCU_PROTOCOL_CMD_GET_ENCODER_COUNT:
 476   5                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 477   5                    GraphicsPrint(GREEN,"\r\n(CMD:MCU_PROTOCOL_CMD_GET_ENCODER_COUNT)");  
 478   5                    #endif
 479   5                    MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_REPLY_ENCODER_COUNT);
 480   5                  break;
 481   5                case MCU_PROTOCOL_CMD_RESET_ENCODER_COUNT:
 482   5                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 483   5                    GraphicsPrint(GREEN,"\r\n(CMD:MCU_PROTOCOL_CMD_RESET_ENCODER_COUNT)");  
 484   5                    #endif
 485   5                    MCUTimerActiveTimerEvent(SEC(1),_USER_TIMER_EVENT_RESET_ENCODER_COUNT);
 486   5                  break;
 487   5                case MCU_PROTOCOL_CMD_SET_MODELE_TYPE:
C51 COMPILER V9.60.0.0   HS_DVRPROTOCOL                                                    04/13/2021 10:16:18 PAGE 9   

 488   5      
 489   5                    if(protocol_data[0]==ON)                    
 490   5                      bytFastEncoderMode=ON;
 491   5                    else
 492   5                      bytFastEncoderMode=OFF;
 493   5      
 494   5                    #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 495   5                    GraphicsPrint(CYAN,"\r\n(CMD:MCU_PROTOCOL_CMD_SET_MODELE_TYPE=%d)",(WORD)bytFastEncoderMode); 
 496   5                    #endif  
 497   5                  break;
 498   5                default:
 499   5                  break;
 500   5                }
 501   4                
 502   4              }
 503   3              else
 504   3                  {
 505   4                  #if(_DEBUG_MESSAGE_UART_Protocol==ON) 
 506   4                  DEBUG_MESSAGE("(CS error)");
 507   4                  #endif
 508   4                  }
 509   3              protocol_state = PROTOCOL_STATE_NONE;
 510   3              break;
 511   3            default:
 512   3              break;
 513   3          }
 514   2        }
 515   1      
 516   1      
 517   1      }
 518          
 519          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1900    ----
   CONSTANT SIZE    =    756    ----
   XDATA SIZE       =    262       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
