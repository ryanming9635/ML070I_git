C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECTEXTE
                    -ND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  main.c                                                                    */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          
   9          
  10          #include <math.h>
  11          #include <stdio.h>
  12          
  13          #include "Config.h"
  14          
  15          #include "reg.h"
  16          #include "typedefs.h"
  17          #include "main.h"
  18          #include "i2c.h"
  19          #include "adc.h"
  20          #include "etc_eep.h"
  21          #include "Printf.h"
  22          #include "KeyRemo.h"
  23          #include "Monitor.h"
  24          #include "CPU.h"
  25          #include "HS_DVRProtocol.h"
  26          
  27          
  28          
  29          
  30          StructBatteryInfoType g_stBatteryInfo = {0};
  31          StructDVRInfoType g_stDVRInfo = {0};
  32          extern DATA  DWORD tic_Init_time;
  33          extern bit  AccessEnable;
  34          
  35          BYTE  PowerFlag;
  36          BYTE  CameraVolt;
  37          BYTE  PWR_START_flag;
  38          BYTE LowBatteryFlag;
  39          BYTE PowerOffToOnFlag;
  40          #if (_BATTERY_CHARGE_STOP==ON)
  41          BYTE bytBatteryStopCharge;
  42          BYTE bytBatteryStopChargeCount=0;
  43          #endif
  44          BYTE DVRChangeCurrent=0;
  45          BYTE Power_down_mode=_DontgoingToPD;
  46          BYTE bytFastEncoderMode=ON;//OFF;
  47          
  48          float EncorderLen=0;
  49          WORD EncorderLen_Offset=0;
  50          BYTE EncorderLenint=0,EncorderCountPN=0,EncorderCountPN_offset=0;
  51          DWORD EncorderLenfloaat=0;
  52          //BYTE Encorder1=0.85,Encorder2=0.8,Encorder3=0.75,Encorder4=0.75;
  53          //float Encorder1=100,Encorder2=100,Encorder3=100,Encorder4=100;
  54          float Encorder1=1,Encorder2=1,Encorder3=1,Encorder4=1;
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 2   

  55          float Decimal1=0,Decimal2=0,Decimal3=0,Decimal4=0;
  56          float TEncorder1=1,TEncorder2=1,TEncorder3=1,TEncorder4=1;
  57          float TDecimal1=0,TDecimal2=0,TDecimal3=0,TDecimal4=0;
  58          
  59          DWORD ulongRotateNumber=0;
  60          DWORD ulongRotateNumberTELI=0;
  61          
  62          extern WORD BatteryBTH,BatteryVoltage;
  63          
  64          #if (_DEBUG_MESSAGE_BatteryBTH==ON)
              WORD BTH_Temp=250;
              #endif
  67          #if (_DEBUG_MESSAGE_BatteryVoltage==ON)
              WORD Battery_Voltage_Temp  =835;
              #endif
  70          
  71          //extern BYTE FLASH_FLAG;
  72          //extern WORD LED_FLASH_COUNT;
  73          extern bit ChangeKey;
  74          extern long EncorderCount;
  75          
  76          extern  DATA  WORD  tic_pc;
  77          extern DATA BYTE  RS_in;
  78          extern DATA BYTE  RS2_in;
  79          extern DATA BYTE RS2_out;
  80          extern StructPowerInfoType idata g_stPowerInfo ;
  81          extern DATA WORD keytic;
  82          extern bit RepeatKey;
  83          extern BYTE IE_Temp;
  84          extern BYTE bytHoldOn3SPowerOff;
  85          extern long EncorderCountINT;
  86          #if (_BATTERY_CHECK_WITH_NO_CHARGE==ON)
  87          extern BYTE bytBatteryVoltageCheck;
  88          #endif
  89          
  90          struct RegisterInfo UserRange={0,40,21};
  91          struct RegisterInfo AD5110Range={0,40,21};
  92          
  93          BYTE  DebugLevel;
  94          
  95          ///AD5110 step voltage
  96          BYTE  AD5110_setp[]={0x05,0x06,0x08,0x0A,0x0B,0x0D,0x0F,0x10,0x12,0x14,\
  97                    0x16,0x18,0x1a,0x1c,0x1e,0x20,0x22,0x25,0x27,0x2a,\
  98                    0x2c,0x2f,0x32,0x35,0x38,0x3b,0x3e,0x42,0x45,0x48,\
  99                    0x4b,0x50,0x55,0x58,0x5d,0x61,0x66,0x6b,0x70,0x75,\
 100                    0x7a  };
 101          
 102          
 103          void isp_write(unsigned char* buf, unsigned char addr_high, unsigned char addr_low, unsigned char len)
 104          {
 105   1        IFMT = 0x02;
 106   1        IFADRH = addr_high;
 107   1        do
 108   1        {
 109   2          IFADRL = addr_low;
 110   2          IFD = *buf;
 111   2          SCMD = 0x46;
 112   2          SCMD = 0xB9;
 113   2           
 114   2          buf++;
 115   2          addr_low++;
 116   2          if (addr_low == 0)
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 3   

 117   2          {
 118   3             addr_high++;
 119   3             IFADRH = addr_high;
 120   3          }
 121   2          len--;
 122   2        }
 123   1        while (len != 0);
 124   1      }
 125          
 126          void isp_init(void)
 127          {
 128   1        ISPCR = 0x81;
 129   1      }
 130          
 131          void enter_isp(void)
 132          {
 133   1              // Clear the magic mark
 134   1              unsigned char mark = 0x00;
 135   1              isp_init();
 136   1              isp_write(&mark, 0xEF, 0xFF, 1);
 137   1              ISPCR = 0x60;
 138   1      }
 139          
 140          
 141          BYTE mcuLib_ProtocolAppend(BYTE *pucBuf, BYTE * piLen, BYTE ucByte) {
 142   1          if (ucByte == 0x7E || ucByte == 0x7D) {
 143   2              pucBuf[*piLen] = 0x7D;
 144   2              (*piLen)++;
 145   2              pucBuf[*piLen] = 0x50 | (ucByte & 0x0F);
 146   2              (*piLen)++;
 147   2          } else {
 148   2              pucBuf[*piLen] = ucByte;
 149   2              (*piLen)++;
 150   2          }
 151   1          return 0;
 152   1      }
 153          
 154          BYTE mcuLib_ProtocolSendCmdWithParamNum(BYTE ucType, BYTE* pucParam, BYTE ucSize) {
 155   1          BYTE ucChecksum = 0;
 156   1          BYTE pucBuf[16];
 157   1          BYTE iLen;
 158   1          BYTE i;
 159   1         
 160   1          pucBuf[0] = 0x7E;
 161   1          iLen = 1;
 162   1          ucChecksum ^= ucType;
 163   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucType);
 164   1          ucChecksum ^= ucSize;
 165   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucSize);
 166   1      
 167   1          for (i = 0; i < ucSize; i++) {
 168   2              ucChecksum ^= pucParam[i];
 169   2              mcuLib_ProtocolAppend(pucBuf, &iLen, pucParam[i]);
 170   2          }
 171   1      
 172   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucChecksum);
 173   1      
 174   1        for (i = 0; i < (iLen); i++) {
 175   2            RS2_tx(pucBuf[i]);
 176   2          }
 177   1      
 178   1        
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 4   

 179   1          return 0;
 180   1      }
 181          
 182          
 183          void MCU_SendCmdToDVR(BYTE ucType)
 184          {
 185   1        BYTE buf[7]={0,0,0,0,0,0,0};
 186   1        WORD val;
 187   1        DWORD encoder;
 188   1      switch(ucType)
 189   1      {
 190   2        case MCU_PROTOCOL_CMD_REPLY_MCU_FW: //Reply MCU firmware version
 191   2          buf[0]=ReadEEP(EEP_FWREV_MAJOR);      //FWVER
 192   2          buf[1]=ReadEEP(EEP_FWREV_MINOR1);
 193   2          buf[2]=ReadEEP(EEP_FWREV_MINOR2);
 194   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_REPLY_MCU_FW,buf,3);  
 195   2          break;
 196   2      
 197   2        case MCU_PROTOCOL_CMD_REGULAR_DATA:     //Regular data
 198   2      
 199   2        //val=(((GET_BATTERY_CAPACITY()*32)/10000)*100)+(((GET_BATTERY_CAPACITY()*32)%10000)/100);
 200   2        //val=(val*54)/100;
 201   2        #if 1
 202   2        val=((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_B
             -ATTERY_CAPACITY()*59)/*-800*/)/100));
 203   2      
 204   2          if((val/1000))
 205   2          val=(val/10)+1;
 206   2          else 
 207   2          val=(val/10);
 208   2      /*
 209   2           if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)
 210   2          val=121;  
 211   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL1)
 212   2          val=127;  
 213   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL2)
 214   2          val=132;
 215   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL3)
 216   2          val=146;  
 217   2        else   if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL4)  
 218   2          val=155;
 219   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)
 220   2          val=115;  
 221   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)
 222   2          val=160;  
 223   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX_STOP)
 224   2          val=164;
 225   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_NO_STARTUP)
 226   2          val=117;
 227   2        else   if(GET_BATTERY_STATE()==_BATT_STATUS_NO_BATT)  
 228   2          val=0;
 229   2      */
 230   2      
 231   2        #else
                val=((((GET_BATTERY_CAPACITY()*(32+1))/*-800*/)/10000)*100)+((((GET_BATTERY_CAPACITY()*(32+1))/*-800*/)%1
             -0000)/100);
                val=(val*(54+1))/100;
                #endif
 235   2          
 236   2          #if 1
 237   2          buf[0]=val;         ///battery info.
 238   2          #else
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 5   

                  buf[0]=GET_BATTERY_STATE();         ///abttery info.
                  #endif
 241   2          #if 0//for test
                  
                    buf[2]=(BatteryVoltage>>8);
                    
                    buf[3]=(BatteryVoltage&0xff);
              
                  #else
 248   2          buf[2]=(BatteryBTH>>8);
 249   2      
 250   2          buf[3]=(BatteryBTH&0xff);
 251   2          #endif
 252   2          buf[4]=((EncorderLenint/10)<<4)|(EncorderLenint%10);   
 253   2      
 254   2          #if (_2ND_DECIMAL==ON)//ryan@20200505
 255   2          buf[5]=((EncorderLenfloaat/10)<<4)|(EncorderLenfloaat%10);
 256   2          #else
                  buf[5]=(EncorderLenfloaat<<4);
                  #endif
 259   2          buf[6]=EncorderCountPN;
 260   2      
 261   2          if(GET_AC_PLUG()==_TRUE)
 262   2          buf[1]|=0x01;
 263   2      
 264   2          if(GET_BTH_STATE()==_BATT_STATUS_TEMP_HIGH)
 265   2          buf[1]|=0x02;
 266   2          
 267   2          if(GET_BTH_STATE()==_BATT_STATUS_TEMP_LOW)
 268   2          buf[1]|=0x04;
 269   2      
 270   2          if(GET_NO_BATTERY()==_TRUE)
 271   2          buf[1]|=0x08;
 272   2      
 273   2          if(GET_BATTERY_ABNORMAL()==_TRUE)
 274   2          buf[1]|=0x10;
 275   2          
 276   2          if(GET_BATTERY_HIGH_TMEP_WARN()==_TRUE)
 277   2          buf[1]|=0x20;
 278   2          
 279   2          if(GET_BATTERY_LOW_TMEP_WARN()==_TRUE)
 280   2          buf[1]|=0x40;
 281   2      #if (_BATTERY_CHARGE_STOP==ON)
 282   2          if(((GET_STAT1()==OFF)&&(GET_STAT2()==ON)&&(BatteryBTH>90))&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&
             -&\
 283   2            ( GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)&&\
 284   2            (GET_NO_BATTERY()==_FALSE)&&(bytBatteryStopCharge==_FALSE))///charging
 285   2            {
 286   3          buf[1]|=0x80;
 287   3            }
 288   2      #else
              if(((GET_STAT1()==OFF)&&(GET_STAT2()==ON)&&(BatteryBTH>90))&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&&(
             - GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)&&(GET_NO_BATTERY()==_FALSE))///chargin
             -g
                buf[1]|=0x80;
              #endif
 292   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_REGULAR_DATA,buf,7);                        
 293   2          break;
 294   2      
 295   2        case MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN:    //system shutdown
 296   2          if(GET_AC_PLUG_OUT()==_TRUE)      
 297   2            {
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 6   

 298   3            buf[0]=1; 
 299   3            CLR_AC_PLUG_OUT();  
 300   3            #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                    GraphicsPrint(RED,"\r\n(AC_PLUG_OUT)");
                    #endif  
 303   3            }
 304   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN,buf,1);                     
 305   2          break;
 306   2      
 307   2        case MCU_PROTOCOL_CMD_ENTRY_FACTORY:  //Entry factory mode
 308   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_ENTRY_FACTORY,buf,1); 
 309   2          break;
 310   2      
 311   2        case MCU_PROTOCOL_CMD_SLEEP_WAKE_UP:
 312   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_SLEEP_WAKE_UP,buf,1); 
 313   2          break;
 314   2        case MCU_PROTOCOL_CMD_REPLY_ENCODER_COUNT:
 315   2          if(bytFastEncoderMode==ON)
 316   2          encoder=ulongRotateNumberTELI;
 317   2          else
 318   2          encoder=ulongRotateNumber;
 319   2          
 320   2          buf[0]=encoder/100000;
 321   2          buf[0]<<=4;
 322   2          encoder%=100000;
 323   2          buf[0]|=encoder/10000;
 324   2          encoder%=10000;
 325   2          
 326   2          buf[1]=encoder/1000;    
 327   2          buf[1]<<=4; 
 328   2          encoder%=1000;    
 329   2          buf[1]|=encoder/100;
 330   2          encoder%=100;
 331   2          
 332   2          buf[2]=encoder/10;    
 333   2          buf[2]<<=4; 
 334   2          encoder%=10;    
 335   2          buf[2]|=encoder;
 336   2      
 337   2            #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                    if(bytFastEncoderMode==ON)
                    GraphicsPrint(RED,"(ulongRotateNumberTELI=%d)",(WORD)ulongRotateNumberTELI);
                    else
                    GraphicsPrint(RED,"(ulongRotateNumber=%d)",(WORD)ulongRotateNumber);  
                    #endif  
 343   2            
 344   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_REPLY_ENCODER_COUNT,buf,3); 
 345   2          break;
 346   2      default:
 347   2        break;
 348   2          
 349   2      }
 350   1        
 351   1      }
 352          
 353          
 354          void InitialTimerEvent(void)
 355          {
 356   1        MCUTimerInitialTimerEvent();  //clear all of timer event  
 357   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_FIRST_GET_BATT_BTH_STATE);
 358   1            MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
 359   1        MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 7   

 360   1          MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
 361   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_GRN_BLINK);
 362   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE);
 363   1        MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 364   1        MCUTimerActiveTimerEvent(SEC(10-5), _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE);  //check charge
 365   1        #if (_BATTERY_CHECK_WITH_NO_CHARGE==ON)
 366   1        MCUTimerActiveTimerEvent(SEC(5+2), _SYSTEM_TIMER_EVENT_BATTERY_VOLTAGE_READY_CHECK);
 367   1        #endif
 368   1        SET_AC_PLUG();
 369   1      
 370   1      #if(_DEBUG_MESSAGE_WORKING_TIME == ON)
                MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);
              #endif
 373   1      
 374   1      }
 375          
 376          BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 377                                           int * toValue, CODE_P struct RegisterInfo *toRange ){
 378   1      
 379   1        // calculate intermediate values
 380   1        int a;
 381   1        int b;
 382   1      
 383   1        // perform mapping
 384   1        if ( fromValue <= fromRange->Default ) {
 385   2          a = toRange->Default - toRange->Min;
 386   2          b = fromRange->Default - fromRange->Min;
 387   2          // prevent divide by zero
 388   2          if( b==0 )    return (FALSE);
 389   2          *toValue = (int) ( (DWORD)fromValue- (DWORD)fromRange->Min ) * a / b 
 390   2                  +(DWORD)toRange->Min;
 391   2        }
 392   1        else {
 393   2          a = toRange->Max - toRange->Default;
 394   2          b = fromRange->Max - fromRange->Default;
 395   2          // prevent divide by zero
 396   2          if( b==0 )    return (FALSE);
 397   2              *toValue = (int) ( (DWORD)fromValue - (DWORD)fromRange->Default ) * a / b
 398   2                             + (DWORD)toRange->Default;
 399   2        }
 400   1      
 401   1        return ( TRUE );
 402   1         
 403   1      }
 404          
 405          void SetAD5110Step(BYTE newv) 
 406          {
 407   1      
 408   1        int regv;
 409   1      
 410   1        Mapping1( newv, &UserRange , &regv, &AD5110Range);
 411   1        WriteAD5110(AD5110_CMD_Write_Data_To_RDAC ,AD5110_setp[regv]);
 412   1                  
 413   1      }
 414          
 415          DWORD GetRotateNumber(BYTE index)
 416          {
 417   1        DWORD ret=0;
 418   1      
 419   1        if(index==ON)
 420   1        {
 421   2          ret=ReadEEP(EEP_RotateNumberH);
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 8   

 422   2          ret<<=8;
 423   2          
 424   2          ret|=ReadEEP(EEP_RotateNumberM);
 425   2          ret<<=8;  
 426   2      
 427   2          ret|=ReadEEP(EEP_RotateNumberL);
 428   2      
 429   2          #if(_DEBUG_EncorderHandler==ON)
                  Printf("\r\nGetRotateNumberTELI=%02x%04x",(WORD)(ret>>16),(WORD)ret);
                  #endif
 432   2        }
 433   1        else
 434   1        {
 435   2          ret=ReadEEP(EEP_RotateNumberRH);
 436   2          ret<<=8;
 437   2          
 438   2          ret|=ReadEEP(EEP_RotateNumberRM);
 439   2          ret<<=8;  
 440   2      
 441   2          ret|=ReadEEP(EEP_RotateNumberRL);
 442   2      
 443   2          #if(_DEBUG_EncorderHandler==ON)
                  Printf("\r\nGetRotateNumberREX=%02x%04x",(WORD)(ret>>16),(WORD)ret);
                #endif
 446   2      
 447   2        }
 448   1      
 449   1        
 450   1        return ret;
 451   1      }
 452          
 453          void SaveRotateNumber(void)
 454          {
 455   1        DWORD temp=0,val;
 456   1      
 457   1      val=ulongRotateNumberTELI;
 458   1      
 459   1      
 460   1        temp=ReadEEP(EEP_RotateNumberH);
 461   1        temp<<=8;
 462   1        temp|=ReadEEP(EEP_RotateNumberM);
 463   1        temp<<=8; 
 464   1        temp|=ReadEEP(EEP_RotateNumberL);
 465   1      
 466   1        if(temp!=val)
 467   1        { 
 468   2      
 469   2        if(val>999999)
 470   2          {
 471   3          val-=999999 ;///>99999 clean to 0
 472   3      
 473   3          #if(_DEBUG_EncorderHandler==ON)
                  Printf("\r\nSaveRotateNumberTELI>999999");
                  #endif
 476   3          }
 477   2        WriteEEP(EEP_RotateNumberL,(val&0xff));
 478   2        val>>=8;
 479   2        WriteEEP(EEP_RotateNumberM,(val&0xff));
 480   2        val>>=8;
 481   2        WriteEEP(EEP_RotateNumberH,(val&0xff));
 482   2      
 483   2        #if(_DEBUG_EncorderHandler==ON)
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 9   

                Printf("\r\nSaveRotateNumberTELI=%d",(WORD)ulongRotateNumberTELI);
                #endif
 486   2        }
 487   1      
 488   1      val=ulongRotateNumber;
 489   1        
 490   1          temp=ReadEEP(EEP_RotateNumberRH);
 491   1          temp<<=8;
 492   1          temp|=ReadEEP(EEP_RotateNumberRM);
 493   1          temp<<=8; 
 494   1          temp|=ReadEEP(EEP_RotateNumberRL);
 495   1          
 496   1          if(temp!=val)
 497   1          { 
 498   2          
 499   2          if(val>999999)
 500   2            {
 501   3            val-=999999 ;///>99999 clean to 0
 502   3      
 503   3      
 504   3      
 505   3        #if(_DEBUG_EncorderHandler==ON)
                    Printf("\r\nSaveRotateNumberREX>999999");
                #endif
 508   3            }
 509   2          WriteEEP(EEP_RotateNumberRL,(val&0xff));
 510   2          val>>=8;
 511   2          WriteEEP(EEP_RotateNumberRM,(val&0xff));
 512   2          val>>=8;
 513   2          WriteEEP(EEP_RotateNumberRH,(val&0xff));
 514   2          
 515   2          #if(_DEBUG_EncorderHandler==ON)
                  Printf("\r\nSaveRotateNumberREX=%d",(WORD)ulongRotateNumber);
                  #endif
 518   2          }
 519   1      }
 520          void  LoadEEPROM (void)
 521          {
 522   1         PowerFlag = ReadEEP(EEP_Powerflag);
 523   1         CameraVolt= ReadEEP(EEP_CameraVolt);
 524   1         PWR_START_flag= ReadEEP(EEP_DC12_PWR_START);
 525   1        PowerOffToOnFlag= ReadEEP(EEP_PowerOffToOnflag);
 526   1      
 527   1      if(PowerFlag>=2)
 528   1      {
 529   2        PowerFlag=ON;
 530   2        WriteEEP(EEP_Powerflag,ON);
 531   2      }
 532   1      
 533   1      if(PWR_START_flag>=2)
 534   1      {
 535   2        PWR_START_flag=OFF;
 536   2        WriteEEP(EEP_DC12_PWR_START,OFF);
 537   2      }
 538   1      
 539   1      if(PowerOffToOnFlag>=2)
 540   1      {
 541   2        PowerOffToOnFlag=ON;
 542   2        WriteEEP(EEP_PowerOffToOnflag,ON);
 543   2      }
 544   1        
 545   1        Encorder1= ((ReadEEP(EEP_Encorder1)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder1));
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 10  

 546   1        Decimal1= ((ReadEEP(EEP_Decimal1)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal1));
 547   1      
 548   1        Encorder2= ((ReadEEP(EEP_Encorder2)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder2));
 549   1        Decimal2= ((ReadEEP(EEP_Decimal2)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal2));
 550   1      
 551   1        Encorder3= ((ReadEEP(EEP_Encorder3)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder3));
 552   1        Decimal3= ((ReadEEP(EEP_Decimal3)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal3));
 553   1      
 554   1        Encorder4= ((ReadEEP(EEP_Encorder4)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder4));
 555   1        Decimal4= ((ReadEEP(EEP_Decimal4)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal4));
 556   1      
 557   1        if(Encorder1>=6)
 558   1        {
 559   2          Encorder1=1;
 560   2          Decimal1=0;
 561   2          WriteEEP(EEP_Encorder1,1);
 562   2          WriteEEP(EEP_Decimal1,0);
 563   2        }
 564   1        
 565   1        if(Encorder2>=6)
 566   1        {
 567   2          Encorder2=1;
 568   2          Decimal2=0;
 569   2          WriteEEP(EEP_Encorder2,1);
 570   2          WriteEEP(EEP_Decimal2,0);
 571   2        }
 572   1        
 573   1        if(Encorder3>=6)
 574   1        {
 575   2          Encorder3=1;
 576   2          Decimal3=0;
 577   2          WriteEEP(EEP_Encorder3,1);
 578   2          WriteEEP(EEP_Decimal3,0);
 579   2        }
 580   1         
 581   1        if(Encorder4>=6)
 582   1        {
 583   2          Encorder4=1;
 584   2          Decimal4=0;
 585   2          WriteEEP(EEP_Encorder4,1);
 586   2          WriteEEP(EEP_Decimal4,0);
 587   2        }
 588   1      
 589   1        TEncorder1= ((ReadEEP(EEP_TEncorder1)>>4)*10)+(0x0f&ReadEEP(EEP_TEncorder1));
 590   1        TDecimal1= ((ReadEEP(EEP_TDecimal1)>>4)*10)+(0x0f&ReadEEP(EEP_TDecimal1));
 591   1      
 592   1        TEncorder2= ((ReadEEP(EEP_TEncorder2)>>4)*10)+(0x0f&ReadEEP(EEP_TEncorder2));
 593   1        TDecimal2= ((ReadEEP(EEP_TDecimal2)>>4)*10)+(0x0f&ReadEEP(EEP_TDecimal2));
 594   1      
 595   1        TEncorder3= ((ReadEEP(EEP_TEncorder3)>>4)*10)+(0x0f&ReadEEP(EEP_TEncorder3));
 596   1        TDecimal3= ((ReadEEP(EEP_TDecimal3)>>4)*10)+(0x0f&ReadEEP(EEP_TDecimal3));
 597   1      
 598   1        TEncorder4= ((ReadEEP(EEP_TEncorder4)>>4)*10)+(0x0f&ReadEEP(EEP_TEncorder4));
 599   1        TDecimal4= ((ReadEEP(EEP_TDecimal4)>>4)*10)+(0x0f&ReadEEP(EEP_TDecimal4));
 600   1      
 601   1        if(TEncorder1>=6)
 602   1        {
 603   2          TEncorder1=1;
 604   2          TDecimal1=0;
 605   2          WriteEEP(EEP_TEncorder1,1);
 606   2          WriteEEP(EEP_TDecimal1,0);
 607   2        }
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 11  

 608   1        
 609   1        if(TEncorder2>=6)
 610   1        {
 611   2          TEncorder2=1;
 612   2          TDecimal2=0;
 613   2          WriteEEP(EEP_TEncorder2,1);
 614   2          WriteEEP(EEP_TDecimal2,0);
 615   2        }
 616   1        
 617   1        if(TEncorder3>=6)
 618   1        {
 619   2          TEncorder3=1;
 620   2          TDecimal3=0;
 621   2          WriteEEP(EEP_TEncorder3,1);
 622   2          WriteEEP(EEP_TDecimal3,0);
 623   2        }
 624   1         
 625   1        if(TEncorder4>=6)
 626   1        {
 627   2          TEncorder4=1;
 628   2          TDecimal4=0;
 629   2          WriteEEP(EEP_TEncorder4,1);
 630   2          WriteEEP(EEP_TDecimal4,0);
 631   2        }
 632   1      
 633   1        ulongRotateNumberTELI=ReadEEP(EEP_RotateNumberH);
 634   1        ulongRotateNumberTELI<<=8;
 635   1        ulongRotateNumberTELI|=ReadEEP(EEP_RotateNumberM);  
 636   1        ulongRotateNumberTELI<<=8;
 637   1        ulongRotateNumberTELI|=ReadEEP(EEP_RotateNumberL);  
 638   1      
 639   1      if(ulongRotateNumberTELI>=1000000)
 640   1      {
 641   2        ulongRotateNumberTELI=0;
 642   2        WriteEEP(EEP_RotateNumberL,0);
 643   2        WriteEEP(EEP_RotateNumberM,0);
 644   2        WriteEEP(EEP_RotateNumberH,0);
 645   2        #if(_DEBUG_EncorderHandler==ON)
                Printf("\r\nTELI_NUM>999999");
                #endif
 648   2      }
 649   1      
 650   1          ulongRotateNumber=ReadEEP(EEP_RotateNumberRH);
 651   1          ulongRotateNumber<<=8;
 652   1          ulongRotateNumber|=ReadEEP(EEP_RotateNumberRM); 
 653   1          ulongRotateNumber<<=8;
 654   1          ulongRotateNumber|=ReadEEP(EEP_RotateNumberRL);
 655   1      
 656   1        if(ulongRotateNumber>=1000000)
 657   1        {
 658   2          ulongRotateNumber=0;
 659   2          WriteEEP(EEP_RotateNumberRL,0);
 660   2          WriteEEP(EEP_RotateNumberRM,0);
 661   2          WriteEEP(EEP_RotateNumberRH,0);
 662   2        #if(_DEBUG_EncorderHandler==ON)
                Printf("\r\nREX_NUM>999999");
                #endif
 665   2        }   
 666   1      
 667   1        
 668   1        if(ReadEEP(EEP_LowBattery_Flag))
 669   1          SET_BATTERY_CAPACITY_LOW_FLAG();
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 12  

 670   1      
 671   1        if(PWR_START_flag==ON)
 672   1        {
 673   2          if(PowerFlag==OFF)
 674   2          {
 675   3          WriteEEP(EEP_Powerflag,ON);
 676   3          PowerFlag=ON;
 677   3          }
 678   2          
 679   2          if(PowerOffToOnFlag==ON)
 680   2            {
 681   3            WriteEEP(EEP_PowerOffToOnflag,OFF);
 682   3            PowerOffToOnFlag=OFF;
 683   3            }
 684   2      
 685   2        } 
 686   1        else //PWR_START_flag==OFF
 687   1          {
 688   2            
 689   2            if(PowerOffToOnFlag==ON)
 690   2            {
 691   3            WriteEEP(EEP_Powerflag,ON);
 692   3            PowerFlag=ON;
 693   3      
 694   3            
 695   3            WriteEEP(EEP_PowerOffToOnflag,OFF);
 696   3            PowerOffToOnFlag=OFF;
 697   3            }
 698   2            else if(PowerFlag==ON)
 699   2              {
 700   3              WriteEEP(EEP_Powerflag,OFF);
 701   3              PowerFlag=OFF;        
 702   3              }
 703   2          }
 704   1      
 705   1      #if (_BATTERY_CHARGE_STOP==ON)
 706   1      bytBatteryStopCharge=ReadEEP(EEP_BatteryStopCharge);
 707   1      
 708   1      if(bytBatteryStopCharge>=2)
 709   1      {
 710   2        bytBatteryStopCharge=OFF;
 711   2        WriteEEP(EEP_BatteryStopCharge,OFF);
 712   2      }
 713   1      
 714   1      #endif
 715   1      
 716   1      }
 717          
 718          WORD GetADCValue(BYTE sel)
 719          {
 720   1          
 721   1      ADCTL=0x80|0x08|sel;  //start adc sampling
 722   1      
 723   1      while(ADCTL&0x08);  // printf("ADC is busying\r\n");  //wating for adc
 724   1      
 725   1      return (WORD)(((ADCVL&0x03) |(ADCV<<2))&0x03ff);
 726   1      
 727   1      }
 728          
 729          WORD GetBatteryBTH(void)
 730          {
 731   1      WORD max=0;
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 13  

 732   1      max=GetADCValue(P16_BTH);
 733   1      //max=GetADCValue(P15_BTH);
 734   1      
 735   1      //max=850;
 736   1      
 737   1      return max;
 738   1      }
 739          
 740          WORD GetBatteryVoltage(void)
 741          {
 742   1      WORD max=0;
 743   1      max=GetADCValue(P17_BAT);
 744   1      
 745   1      //max=710;  //low
 746   1      //max=835;    //normal
 747   1      //max=900;  //full
 748   1      
 749   1      return max;
 750   1      }
 751          
 752          
 753          void EncorderHandler(void)
 754          {
 755   1      WORD EncorderCountTemp,temp_val;
 756   1      #if (HS_DEBUG==ON)
              WORD temp_EncorderCountTemp;
              #endif
 759   1      
 760   1      //BYTE param[4];
 761   1      float EncorderParaTemp1,EncorderParaTemp2,EncorderParaTemp3,EncorderParaTemp4;
 762   1      float EncorderOffset1,EncorderOffset2,EncorderOffset3/*,EncorderOffset4*/;
 763   1        
 764   1        if(ChangeKey)
 765   1        { 
 766   2          #if (HS_DEBUG==ON)
                  GraphicsPrint(RED,"\r\nEncorderCount=%d ",(WORD)EncorderCount); 
                  Printf("\r\nEncorderCountINT=%d",(WORD)EncorderCountINT);
                  GraphicsPrint(YELLOW,"\r\nGetRotateNumber=%01x%04x",(WORD)(ulongRotateNumber>>16),(WORD)ulongRotateNumbe
             -r);
                  #endif
 771   2          //Printf("\r\nEncorderLen_Offset0=%d ",(WORD)EncorderLen_Offset);
 772   2          //Printf("\r\nEncorderCountPN0=%d ",(WORD)EncorderCountPN);
 773   2          #if 1//ryan@20200430
 774   2      //    EncorderParaTemp1=(Encorder1+(Decimal1))*0.01f;
 775   2      //    EncorderParaTemp2=(Encorder2+(Decimal2))*0.01f;
 776   2      //    EncorderParaTemp3=(Encorder3+(Decimal3))*0.01f;
 777   2      //    EncorderParaTemp4=(Encorder4+(Decimal4))*0.01f;
 778   2          EncorderParaTemp1=(Encorder1+(Decimal1*0.01));
 779   2          EncorderParaTemp2=(Encorder2+(Decimal2*0.01));
 780   2          EncorderParaTemp3=(Encorder3+(Decimal3*0.01));
 781   2          EncorderParaTemp4=(Encorder4+(Decimal4*0.01));
 782   2      
 783   2          #else
                  EncorderParaTemp1=(Encorder1)*0.01f;
                  EncorderParaTemp2=(Encorder2)*0.01f;
                  EncorderParaTemp3=(Encorder3)*0.01f;
                  EncorderParaTemp4=(Encorder4)*0.01f;
                  #endif
 789   2          //EncorderParaTemp1=(Encorder1*0.01f)+Decimal1;
 790   2          //EncorderParaTemp2=(Encorder2*0.01f)+Decimal2;
 791   2          //EncorderParaTemp3=(Encorder3*0.01f)+Decimal3;
 792   2          //EncorderParaTemp4=(Encorder4*0.01f)+Decimal4;
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 14  

 793   2          
 794   2          #if 0
                  Printf("\r\nEncorder1=%d ",(WORD)Encorder1);
                  Printf("\r\nEncorder2=%d ",(WORD)Encorder2);
                  Printf("\r\nEncorder3=%d ",(WORD)Encorder3);
                  Printf("\r\nEncorder4=%d ",(WORD)Encorder4);
                  
                  Printf("\r\nEncorderParaTemp1=%d ",(WORD)(EncorderParaTemp1*100));
                  Printf("\r\nEncorderParaTemp2=%d ",(WORD)(EncorderParaTemp2*100));
                  Printf("\r\nEncorderParaTemp3=%d ",(WORD)(EncorderParaTemp3*100));
                  Printf("\r\nEncorderParaTemp4=%d ",(WORD)(EncorderParaTemp4*100));
                  #endif
 805   2          #if 0
                  EncorderOffset1=(30.625*EncorderParaTemp1*(240-EncorderLen_Offset))/1000;
                  EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240-EncorderLen_Offset))/1000;
                  EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450-EncorderLen_Offset)/1000);
                  //EncorderOffset4=EncorderOffset3+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(780-600)/1000);
                  #else
 811   2          
 812   2          EncorderOffset1=(30.625*EncorderParaTemp1*240)/1000;
 813   2          EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240))/1000;
 814   2          EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450)/1000);
 815   2          #endif
 816   2          #if 0
                  Printf("\r\nEncorderOffset1=%d ",(WORD)(EncorderOffset1*100));
                  Printf("\r\nEncorderOffset2=%d ",(WORD)(EncorderOffset2*100));
                  Printf("\r\nEncorderOffset3=%d ",(WORD)(EncorderOffset3*100));
                  #endif
 821   2          //Printf("\r\nEncorderOffset4=%d ",(WORD)(EncorderOffset4*100));
 822   2          
 823   2          if(EncorderCount>=0)
 824   2            {
 825   3            EncorderCountPN=0;
 826   3            EncorderCountTemp=(EncorderCount/2);
 827   3            }
 828   2          else
 829   2            {
 830   3            EncorderCountPN=1;
 831   3            EncorderCountTemp=(0-EncorderCount)/2;
 832   3            }
 833   2          //EncorderCountTemp+=450;
 834   2          //EncorderCount
 835   2          #if 0
                  if(EncorderCount>=0)
                    EncorderCountPN=0;
                  else
                    EncorderCountPN=1;
                  #endif
 841   2          #if 0
                  if(EncorderCountTemp>EncorderLen_Offset)
                    {
                    EncorderCountPN=0;
                    temp_EncorderCountTemp=EncorderCountTemp-EncorderLen_Offset;
                    }
                  else
                    {
                    EncorderCountPN=1;
                    temp_EncorderCountTemp=EncorderLen_Offset-EncorderCountTemp;
                    }
                  #endif
 853   2          if(EncorderCountTemp<=240&&EncorderCountTemp>=0)
 854   2            {
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 15  

 855   3            
 856   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                    Printf("\r\nEncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
                    Printf("\r\nEncorderCountPN=%d ",(WORD)EncorderCountPN);
                    #endif
 861   3            //if(EncorderCountPN==1)
 862   3            #if 0
                      EncorderLen=(30.625*EncorderParaTemp1*(temp_EncorderCountTemp))/1000;
                    #else
 865   3            EncorderLen=(30.625*EncorderParaTemp1*EncorderCountTemp)/1000;
 866   3            #endif
 867   3              //EncorderLen=(30.625*EncorderParaTemp1*(EncorderCountTemp-EncorderLen_Offset))/1000;
 868   3              
 869   3            //EncorderLen=(30.625*1*EncorderCountTemp)/1000;
 870   3            temp_val=30.625*EncorderParaTemp1*EncorderCountTemp;
 871   3            EncorderLenint=EncorderLen+0.05f;
 872   3            //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 873   3            //EncorderLenint=EncorderLen;   
 874   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 875   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 876   3            EncorderLenfloaat%=100;
 877   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 881   3            #if 0
                    Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                    Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                    Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);      
                    Printf("\r\ntemp_val=%d ",(WORD)temp_val);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
 889   3            }
 890   2          else if(EncorderCountTemp>240&&EncorderCountTemp<=450)
 891   2            {
 892   3        
 893   3            #if 0
                    EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(temp_EncorderCountTemp-(240-EncorderLen_Offset))
             -/1000);
                    #else
 896   3            EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(EncorderCountTemp-240)/1000);
 897   3            #endif
 898   3            
 899   3            #if (HS_DEBUG==ON)
                    Printf("\r\ntemp_EncorderCountTemp=%d ",(WORD)(temp_EncorderCountTemp-(240-EncorderLen_Offset)));
                    Printf("\r\nEncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
                    Printf("\r\ntemp_EncorderCountTemp=%d ",(WORD)temp_EncorderCountTemp);
                    Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                    //EncorderLen=7.35+(32.091*1*(EncorderCountTemp-240)/1000);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                    #endif
 907   3            EncorderLenint=EncorderLen+0.05f;     
 908   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
                    #endif
 911   3            //EncorderLenint=EncorderLen;
 912   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 913   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 914   3            EncorderLenfloaat%=100;
 915   3            #else
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 16  

                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 919   3            
 920   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif      
 923   3            }
 924   2          #if 1
 925   2          else if(EncorderCountTemp>450&&EncorderCountTemp<=780)
 926   2            {
 927   3            #if 0
                    EncorderLen=EncorderOffset2+(33.504*1*(temp_EncorderCountTemp-(450-EncorderLen_Offset))/1000);
                    #else     
 930   3            EncorderLen=EncorderOffset2+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
 931   3            #endif
 932   3            
 933   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                    #endif
 936   3            
 937   3            EncorderLenint=EncorderLen+0.05f;
 938   3            //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 939   3            //EncorderLenint=EncorderLen;
 940   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 941   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 942   3            EncorderLenfloaat%=100;
 943   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 947   3            
 948   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
 951   3            }
 952   2          #else
                  else if(EncorderCountTemp>450&&EncorderCountTemp<=600)
                    {
                    EncorderLen=14.089+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
                    //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
              
                    EncorderLenint=EncorderLen+0.05f;
                    //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                    //EncorderLenint=EncorderLen;
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    }   
                  else if(EncorderCountTemp>600&&EncorderCountTemp<=780)
                    {
                    EncorderLen=19.089+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(EncorderCountTemp-600)/1000);
                    //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
              
                    EncorderLenint=EncorderLen+0.05f;
                    //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                    //EncorderLenint=EncorderLen;
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 17  

                    }
                  #endif
 980   2          else if(EncorderCountTemp>780)
 981   2            {
 982   3            #if 0
                    EncorderLen=EncorderOffset3+(34.896*1*(EncorderCountTemp-(780-EncorderLen_Offset))/1000);
                    #else
 985   3            EncorderLen=EncorderOffset3+(34.896*EncorderParaTemp4*(EncorderCountTemp-780)/1000);
 986   3            #endif
 987   3      
 988   3            #if (HS_DEBUG==ON)  
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
              
                    Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                    #endif
 993   3            EncorderLenint=EncorderLen+0.05f;
 994   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
                    #endif
 997   3            //EncorderLenint=EncorderLen;
 998   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 999   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
1000   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
1003   3            EncorderLenfloaat%=100;
1004   3            #if (HS_DEBUG==ON)    
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
1007   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
                    EncorderLenfloaat%=10;      
                    #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
                    #endif      
1017   3            }
1018   2            
1019   2          ChangeKey=0;
1020   2          //param[0]=EncorderLenint;
1021   2          //param[1]=EncorderLenfloaat;
1022   2          //param[2]=EncorderCountPN;
1023   2          //protocol_send_cmd_with_param_num(0x0a, (BYTE *)param, 3);
1024   2          //protocol_send_cmd_with_param_num(0x80, (BYTE *)param, 3);
1025   2           if(GET_DVR_SystemReadyNotic()==_TRUE)
1026   2            {
1027   3           MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
1028   3            MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
1029   3            MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
1030   3            }
1031   2          #if (_DEBUG_EncorderHandler==ON)//ryan@20200505
                  Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
                  Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                  #endif
1035   2        }
1036   1        //GetKey(0);
1037   1      }
1038          
1039            void EncorderHandler_TELI(void)
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 18  

1040            {
1041   1        DWORD EncorderCountTemp,temp_val;
1042   1      #if (HS_DEBUG==ON)
                DWORD  temp_EncorderCountTemp;
              #endif
1045   1        long  EncorderCount_T;
1046   1        
1047   1        //BYTE param[4];
1048   1        float EncorderParaTemp1,EncorderParaTemp2,EncorderParaTemp3,EncorderParaTemp4;
1049   1        float EncorderOffset1,EncorderOffset2,EncorderOffset3/*,EncorderOffset4*/;
1050   1      
1051   1        
1052   1            
1053   1          if(ChangeKey)
1054   1          {         
1055   2            EncorderCount_T=(EncorderCountINT);
1056   2          #if (HS_DEBUG==ON)
                    GraphicsPrint(RED,"\r\n(TELI)EncorderCount=%d ",(WORD)EncorderCount); 
                    GraphicsPrint(GREEN,"\r\nEncorderCountINT=%d",(WORD)EncorderCountINT);
                    Printf("\r\n(TELI)EncorderCount_T=%d",(WORD)((EncorderCount_T))); 
                    Printf("\r\nGetRotateNumberTELI=%01x%04x",(WORD)(ulongRotateNumberTELI>>16),(WORD)ulongRotateNumberTELI
             -);      
              
                  #endif
1063   2            //Printf("\r\nEncorderLen_Offset0=%d ",(WORD)EncorderLen_Offset);
1064   2            //Printf("\r\nEncorderCountPN0=%d ",(WORD)EncorderCountPN);
1065   2          #if 1//ryan@20200430
1066   2        //    EncorderParaTemp1=(Encorder1+(Decimal1))*0.01f;
1067   2        //    EncorderParaTemp2=(Encorder2+(Decimal2))*0.01f;
1068   2        //    EncorderParaTemp3=(Encorder3+(Decimal3))*0.01f;
1069   2        //    EncorderParaTemp4=(Encorder4+(Decimal4))*0.01f;
1070   2            EncorderParaTemp1=(TEncorder1+(TDecimal1*0.01));
1071   2            EncorderParaTemp2=(TEncorder2+(TDecimal2*0.01));
1072   2            EncorderParaTemp3=(TEncorder3+(TDecimal3*0.01));
1073   2            EncorderParaTemp4=(TEncorder4+(TDecimal4*0.01));
1074   2        
1075   2          #else
                    EncorderParaTemp1=(Encorder1)*0.01f;
                    EncorderParaTemp2=(Encorder2)*0.01f;
                    EncorderParaTemp3=(Encorder3)*0.01f;
                    EncorderParaTemp4=(Encorder4)*0.01f;
                  #endif
1081   2            //EncorderParaTemp1=(Encorder1*0.01f)+Decimal1;
1082   2            //EncorderParaTemp2=(Encorder2*0.01f)+Decimal2;
1083   2            //EncorderParaTemp3=(Encorder3*0.01f)+Decimal3;
1084   2            //EncorderParaTemp4=(Encorder4*0.01f)+Decimal4;
1085   2            
1086   2          #if 0
                    Printf("\r\nEncorder1=%d ",(WORD)Encorder1);
                    Printf("\r\nEncorder2=%d ",(WORD)Encorder2);
                    Printf("\r\nEncorder3=%d ",(WORD)Encorder3);
                    Printf("\r\nEncorder4=%d ",(WORD)Encorder4);
                    
                    Printf("\r\nEncorderParaTemp1=%d ",(WORD)(EncorderParaTemp1*100));
                    Printf("\r\nEncorderParaTemp2=%d ",(WORD)(EncorderParaTemp2*100));
                    Printf("\r\nEncorderParaTemp3=%d ",(WORD)(EncorderParaTemp3*100));
                    Printf("\r\nEncorderParaTemp4=%d ",(WORD)(EncorderParaTemp4*100));
                  #endif
1097   2          #if 0
                    EncorderOffset1=(30.625*EncorderParaTemp1*(240-EncorderLen_Offset))/1000;
                    EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240-EncorderLen_Offset))/1000;
                    EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450-EncorderLen_Offset)/1000);
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 19  

                    //EncorderOffset4=EncorderOffset3+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(780-600)/1000);
                  #else
1103   2            
1104   2            EncorderOffset1=(30.625*EncorderParaTemp1*240)/1000;
1105   2            EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240))/1000;
1106   2            EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450)/1000);
1107   2          #endif
1108   2          #if 0
                    Printf("\r\nEncorderOffset1=%d ",(WORD)(EncorderOffset1*100));
                    Printf("\r\nEncorderOffset2=%d ",(WORD)(EncorderOffset2*100));
                    Printf("\r\nEncorderOffset3=%d ",(WORD)(EncorderOffset3*100));
                  #endif
1113   2            //Printf("\r\nEncorderOffset4=%d ",(WORD)(EncorderOffset4*100));
1114   2            
1115   2            if(EncorderCount_T>=0)
1116   2              {
1117   3              EncorderCountPN=0;
1118   3              EncorderCountTemp=(EncorderCount_T);
1119   3              }
1120   2            else
1121   2              {
1122   3              EncorderCountPN=1;
1123   3              EncorderCountTemp=(0-EncorderCount_T);
1124   3              }
1125   2            
1126   2            //EncorderCountTemp+=450;
1127   2            //EncorderCount
1128   2          #if 0
                    if(EncorderCount>=0)
                      EncorderCountPN=0;
                    else
                      EncorderCountPN=1;
                  #endif
1134   2          #if 0
                    if(EncorderCountTemp>EncorderLen_Offset)
                      {
                      EncorderCountPN=0;
                      temp_EncorderCountTemp=EncorderCountTemp-EncorderLen_Offset;
                      }
                    else
                      {
                      EncorderCountPN=1;
                      temp_EncorderCountTemp=EncorderLen_Offset-EncorderCountTemp;
                      }
                  #endif
1146   2            if(EncorderCountTemp<=240&&EncorderCountTemp>=0)
1147   2              {
1148   3              
1149   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                      Printf("\r\n(TELI)EncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
                      Printf("\r\n(TELI)EncorderCountPN=%d ",(WORD)EncorderCountPN);
                    #endif
1154   3              //if(EncorderCountPN==1)
1155   3            #if 0
                        EncorderLen=(30.625*EncorderParaTemp1*(temp_EncorderCountTemp))/1000;
                    #else
1158   3              //EncorderLen=(30.625*EncorderParaTemp1*EncorderCountTemp)/1000;
1159   3              //EncorderLen=((143.4)*EncorderParaTemp1*EncorderCountTemp)/1000;
1160   3              EncorderLen=(143.4*EncorderParaTemp1*EncorderCountTemp)/100000;
1161   3            
1162   3            #endif
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 20  

1163   3                //EncorderLen=(30.625*EncorderParaTemp1*(EncorderCountTemp-EncorderLen_Offset))/1000;
1164   3                
1165   3              //EncorderLen=(30.625*1*EncorderCountTemp)/1000;
1166   3              temp_val=30.625*EncorderParaTemp1*EncorderCountTemp;
1167   3              EncorderLenint=EncorderLen/*+0.05f*/;
1168   3              //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
1169   3              //EncorderLenint=EncorderLen;   
1170   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1171   3              EncorderLenfloaat=(EncorderLen/*+0.05*/)*100;
1172   3              EncorderLenfloaat%=100;
1173   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
1177   3            #if 0
                      Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                      Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                      Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);      
                      Printf("\r\ntemp_val=%d ",(WORD)temp_val);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
1185   3              }
1186   2            else if(EncorderCountTemp>240&&EncorderCountTemp<=450)
1187   2              {
1188   3          
1189   3            #if 0
                      EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(temp_EncorderCountTemp-(240-EncorderLen_Offset)
             -)/1000);
                    #else
1192   3              //EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(EncorderCountTemp-240)/1000);
1193   3              EncorderLen=(143.4*EncorderParaTemp1*EncorderCountTemp)/100000;
1194   3            #endif
1195   3              
1196   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)temp_EncorderCountTemp=%d ",(WORD)(temp_EncorderCountTemp-(240-EncorderLen_Offset)))
             -;
                      Printf("\r\n(TELI)EncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
                      Printf("\r\n(TELI)temp_EncorderCountTemp=%d ",(WORD)temp_EncorderCountTemp);
                      Printf("\r\n(TELI)EncorderLen=%d ",(WORD)EncorderLen);
                      //EncorderLen=7.35+(32.091*1*(EncorderCountTemp-240)/1000);
                      Printf("\r\n(TELI)EncorderCount_T=%d ",(WORD)EncorderCount_T);
                    #endif
1204   3              EncorderLenint=EncorderLen/*+0.05f*/;     
1205   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
                    #endif
1208   3              //EncorderLenint=EncorderLen;
1209   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1210   3              EncorderLenfloaat=(EncorderLen/*+0.05*/)*100;
1211   3              EncorderLenfloaat%=100;
1212   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
1216   3              
1217   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif      
1220   3              }
1221   2          #if 1
1222   2            else if(EncorderCountTemp>450&&EncorderCountTemp<=780)
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 21  

1223   2              {
1224   3            #if 0
                      EncorderLen=EncorderOffset2+(33.504*1*(temp_EncorderCountTemp-(450-EncorderLen_Offset))/1000);
                    #else     
1227   3              //EncorderLen=EncorderOffset2+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
1228   3              EncorderLen=(143.4*EncorderParaTemp1*EncorderCountTemp)/100000;
1229   3            #endif
1230   3              
1231   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderCount_T=%d ",(WORD)EncorderCount_T);
                    #endif
1234   3              
1235   3              EncorderLenint=EncorderLen/*+0.05f*/;
1236   3              //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
1237   3              //EncorderLenint=EncorderLen;
1238   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1239   3              EncorderLenfloaat=(EncorderLen/*+0.05*/)*100;
1240   3              EncorderLenfloaat%=100;
1241   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
1245   3              
1246   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
1249   3              }
1250   2          #else
                    else if(EncorderCountTemp>450&&EncorderCountTemp<=600)
                      {
                      EncorderLen=14.089+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
                      //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                
                      EncorderLenint=EncorderLen+0.05f;
                      //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                      //EncorderLenint=EncorderLen;
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                      }   
                    else if(EncorderCountTemp>600&&EncorderCountTemp<=780)
                      {
                      EncorderLen=19.089+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(EncorderCountTemp-600)/1000);
                      //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                
                      EncorderLenint=EncorderLen+0.05f;
                      //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                      //EncorderLenint=EncorderLen;
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                      }
                  #endif
1278   2            else if(EncorderCountTemp>780)
1279   2              {
1280   3            #if 0
                      EncorderLen=EncorderOffset3+(34.896*1*(EncorderCountTemp-(780-EncorderLen_Offset))/1000);
                    #else
1283   3              //EncorderLen=EncorderOffset3+(34.896*EncorderParaTemp4*(EncorderCountTemp-780)/1000);
1284   3              EncorderLen=(143.4*EncorderParaTemp1*EncorderCountTemp)/100000;
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 22  

1285   3            #endif
1286   3        
1287   3            #if (HS_DEBUG==ON)  
                      Printf("\r\n(TELI)EncorderCount_T=%d ",(WORD)EncorderCount_T);
                      Printf("\r\n(TELI)EncorderLen=%d ",(WORD)EncorderLen);
                    #endif
1291   3              EncorderLenint=EncorderLen/*+0.05f*/;
1292   3      
1293   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
                    #endif
1296   3              //EncorderLenint=EncorderLen;
1297   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1298   3            EncorderLenfloaat=(EncorderLen/*+0.05*/)*100;
1299   3            #if (HS_DEBUG==ON)
                    Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
1302   3            EncorderLenfloaat%=100;
1303   3      
1304   3            #if (HS_DEBUG==ON)    
                    Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
1307   3            #else
                      EncorderLenfloaat=(EncorderLen/*+0.05*/)*10;
                    #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
                      EncorderLenfloaat%=10;      
                    #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
                    #endif      
1317   3              }
1318   2              
1319   2            ChangeKey=0;
1320   2            //param[0]=EncorderLenint;
1321   2            //param[1]=EncorderLenfloaat;
1322   2            //param[2]=EncorderCountPN;
1323   2            //protocol_send_cmd_with_param_num(0x0a, (BYTE *)param, 3);
1324   2            //protocol_send_cmd_with_param_num(0x80, (BYTE *)param, 3);
1325   2      
1326   2              //if(EncorderLenint>=100)
1327   2              //{
1328   2              //EncorderLenint=99;        
1329   2              //EncorderLenfloaat=99;
1330   2              //GraphicsPrint(RED,"\r\n(TELI)EncorderCountOver");       
1331   2              //}
1332   2            
1333   2             if(GET_DVR_SystemReadyNotic()==_TRUE)
1334   2              {
1335   3             MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
1336   3              MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
1337   3              MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
1338   3              }
1339   2          #if (_DEBUG_EncorderHandler==ON)//ryan@20200505
                    Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
                    Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                  #endif
1343   2          }
1344   1          //GetKey(0);
1345   1        }
1346          
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 23  

1347            //bit CCFL_status;  
1348          void main_loop(void)
1349          {
1350   1      
1351   1        Printf("\r\nStart Main Loop...");
1352   1      
1353   1        ulongRotateNumber=GetRotateNumber(0);
1354   1        ulongRotateNumberTELI=GetRotateNumber(1);
1355   1      
1356   1        //---------------------------------------------------------------
1357   1        //                   Main Loop
1358   1        //---------------------------------------------------------------
1359   1        while(1) 
1360   1        {
1361   2        
1362   2      
1363   2          #if (_DEBUG_MESSAGE_Monitor==ON)
                  while( RS_ready() ) 
                    Monitor();        // for new monitor functions    
                  #endif    
1367   2          
1368   2          
1369   2          DvrReceivePaser();    
1370   2          SysTimerHandler();      
1371   2      
1372   2        //  SysJudgeHandler();  
1373   2        
1374   2          SysPowerHandler();  
1375   2          Scankey();
1376   2          
1377   2          if(bytFastEncoderMode==ON)
1378   2          EncorderHandler_TELI();
1379   2          else      
1380   2          EncorderHandler();
1381   2          
1382   2      
1383   2        
1384   2      
1385   2            if(PowerFlag==OFF)   //// POWEROFF
1386   2            break;
1387   2          
1388   2        }
1389   1      
1390   1      }
1391          
1392          void main(void)
1393          {
1394   1      
1395   1      InitCPU();
1396   1      
1397   1      SysPowerInitial();
1398   1      
1399   1      Printf("\r\nStart Boot...");
1400   1      
1401   1      main_init();
1402   1      
1403   1      //set panel 
1404   1      //select UP
1405   1      SET_P_IO1();
1406   1      //Select Left
1407   1      SET_P_IO2();
1408   1      
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 24  

1409   1      //variable initialize
1410   1      InitVars();
1411   1      
1412   1      //load eeprom data
1413   1      LoadEEPROM();
1414   1      
1415   1      //event initialize
1416   1      InitialTimerEvent();
1417   1      
1418   1      SetAD5110Step(CameraVolt);
1419   1       Printf("\r\n(CameraVolt=%d)",(WORD)CameraVolt);
1420   1      
1421   1      //if(PWR_START_flag==ON)
1422   1      //  PowerFlag=ON;
1423   1      
1424   1      if((GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)&&(Check_ADAP_IN()==_FALSE))
1425   1        PowerFlag=OFF;
1426   1      
1427   1        if(PowerFlag==ON)
1428   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1429   1      else
1430   1      {
1431   2        //UserInterfacePowerSwitch(_POWER_ACTION_AC_ON_TO_OFF);
1432   2        SET_POWER_STATUS(_POWER_STATUS_NORMAL); 
1433   2        SET_TARGET_POWER_STATUS(_POWER_STATUS_OFF);
1434   2        
1435   2      }
1436   1        RepeatKey=OFF;  
1437   1      //   SysJudgeStateChangeEvent(_MODE_STATUS_POWER_OFF);    
1438   1      
1439   1        while(1) {
1440   2          if(PowerFlag==ON)
1441   2          main_loop();    //exit when power off
1442   2          
1443   2          WaitPowerOn();
1444   2        }
1445   1      }
1446          
1447          void WaitPowerOn(void)
1448          {
1449   1      
1450   1        Printf("\r\n(Going to power off...)");
1451   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_OFF);
1452   1      
1453   1        if(GET_DVR_EntrySleepMode()==TRUE)
1454   1          CLR_DVR_EntrySleepMode();
1455   1      
1456   1        CLR_DVR_SystemReadyNotic(); 
1457   1        MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);    
1458   1        CLR_DVR_Shutdown();
1459   1        MCUTimerCancelTimerEvent( _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1460   1        
1461   1      #if (_BATTERY_CHECK_WITH_NO_CHARGE==ON)
1462   1        bytBatteryVoltageCheck=ON;
1463   1        MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_BATTERY_VOLTAGE_READY_CHECK);
1464   1        MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_BATTERY_VOLTAGE_DISABLE_CHECK);
1465   1      #endif        
1466   1      
1467   1        //CLR_BATTERY_CAPACITY_HIGH_FLAG();
1468   1        Power_down_mode=_DontgoingToPD;
1469   1        P3M1=0x00;//p3.4 and P3.5 set output ryan@20210226
1470   1        bytHoldOn3SPowerOff=OFF;
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 25  

1471   1      
1472   1        //if(bytFastEncoderMode==ON)
1473   1        SaveRotateNumber();
1474   1        
1475   1        while(1) 
1476   1        {
1477   2      
1478   2            
1479   2              #if (_DEBUG_MESSAGE_Monitor==ON)
                      while( RS_ready() ) 
                      Monitor();        // for new monitor functions    
                      #endif  
1483   2      
1484   2            SysPowerHandler();  
1485   2            SysTimerHandler();
1486   2            Scankey();
1487   2            
1488   2            if(PowerFlag==ON)   //// POWER-ON
1489   2            break;
1490   2      
1491   2            #if (_POWER_DOWN_ENABLE==ON)
1492   2      
1493   2            if((Power_down_mode==_DontgoingToPD)&&(GET_POWER_STATUS()==_POWER_STATUS_OFF)&&(GET_AC_PLUG()/*Check_AD
             -AP_IN()*/==_FALSE))
1494   2            {
1495   3            Power_down_mode=_ReadyToPD;
1496   3            MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_POWER_DOWN_MODE);
1497   3            } 
1498   2            else if((Check_ADAP_IN()==_TRUE)||(((~P4>>3)& 0x01) ))
1499   2              {
1500   3              Power_down_mode=_DontgoingToPD;
1501   3              MCUTimerCancelTimerEvent( _SYSTEM_TIMER_POWER_DOWN_MODE);
1502   3              }
1503   2            else  if(Power_down_mode==_GoingToPD)
1504   2              SET_MCU_POWER_DOWN_MODE();        
1505   2      
1506   2            #endif  
1507   2            
1508   2        }
1509   1      
1510   1      
1511   1        WriteEEP(EEP_PowerOffToOnflag,ON);
1512   1        EncorderCount=0;
1513   1        EncorderLenint=0;
1514   1        EncorderLenfloaat=0;
1515   1        EncorderCountPN=0;
1516   1         RS2_in=0; //clean DVR CMD.
1517   1        RS2_out=0;//clean DVR CMD.
1518   1        //CLR_BATTERY_CAPACITY_LOW_FLAG();  
1519   1              CLR_BATTERY_ABNORMAL();
1520   1        SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);
1521   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);  
1522   1        Printf("\r\n(Start up  Power On Mode...)");
1523   1      
1524   1        ISPCR = 0x20;/// reboot to AP.
1525   1      
1526   1      }
1527          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7932    ----
C51 COMPILER V9.60.0.0   MAIN                                                              05/20/2021 15:51:06 PAGE 26  

   CONSTANT SIZE    =    119    ----
   XDATA SIZE       =    157     150
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
