C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECTEXTE
                    -ND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  main.c                                                                    */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          
   9          
  10          #include <math.h>
  11          #include <stdio.h>
  12          
  13          #include "Config.h"
  14          
  15          #include "reg.h"
  16          #include "typedefs.h"
  17          #include "main.h"
  18          #include "i2c.h"
  19          #include "adc.h"
  20          #include "etc_eep.h"
  21          #include "Printf.h"
*** WARNING C320 IN LINE 44 OF .\Include\Printf.h: DEBUG is defined 
  22          #include "KeyRemo.h"
  23          #include "Monitor.h"
  24          #include "CPU.h"
  25          #include "HS_DVRProtocol.h"
  26          
  27          StructBatteryInfoType g_stBatteryInfo = {0};
  28          StructDVRInfoType g_stDVRInfo = {0};
  29          extern DATA  DWORD tic_Init_time;
  30          extern bit  AccessEnable;
  31          
  32          BYTE  PowerFlag;
  33          BYTE  CameraVolt;
  34          BYTE  PWR_START_flag;
  35          BYTE LowBatteryFlag;
  36          BYTE PowerOffToOnFlag;
  37          BYTE DVRChangeCurrent=0;
  38          BYTE Power_down_mode=_DontgoingToPD;
  39          BYTE bytFastEncoderMode=ON/*OFF*/;
  40          float EncorderLen=0;
  41          WORD EncorderLen_Offset=0;
  42          BYTE EncorderLenint=0,EncorderCountPN=0,EncorderCountPN_offset=0;
  43          WORD EncorderLenfloaat=0;
  44          //BYTE Encorder1=0.85,Encorder2=0.8,Encorder3=0.75,Encorder4=0.75;
  45          //float Encorder1=100,Encorder2=100,Encorder3=100,Encorder4=100;
  46          float Encorder1=1,Encorder2=1,Encorder3=1,Encorder4=1;
  47          float Decimal1=0,Decimal2=0,Decimal3=0,Decimal4=0;
  48          DWORD ulongRotateNumber=0;
  49            
  50          extern WORD BatteryBTH,BatteryVoltage;
  51          
  52          #if (_DEBUG_MESSAGE_BatteryBTH==ON)
  53          WORD BTH_Temp=250;
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 2   

  54          #endif
  55          #if (_DEBUG_MESSAGE_BatteryVoltage==ON)
  56          WORD Battery_Voltage_Temp  =835;
  57          #endif
  58          
  59          //extern BYTE FLASH_FLAG;
  60          //extern WORD LED_FLASH_COUNT;
  61          extern bit ChangeKey;
  62          extern short EncorderCount;
  63          
  64          extern  DATA  WORD  tic_pc;
  65          extern DATA BYTE  RS_in;
  66          extern DATA BYTE  RS2_in;
  67          extern DATA BYTE RS2_out;
  68          extern StructPowerInfoType idata g_stPowerInfo ;
  69          extern DATA WORD keytic;
  70          extern bit RepeatKey;
  71          extern BYTE IE_Temp;
  72          extern BYTE bytHoldOn3SPowerOff;
  73          
  74          struct RegisterInfo UserRange={0,40,21};
  75          struct RegisterInfo AD5110Range={0,40,21};
  76          
  77          BYTE  DebugLevel;
  78          
  79          ///AD5110 step voltage
  80          BYTE  AD5110_setp[]={0x05,0x06,0x08,0x0A,0x0B,0x0D,0x0F,0x10,0x12,0x14,\
  81                    0x16,0x18,0x1a,0x1c,0x1e,0x20,0x22,0x25,0x27,0x2a,\
  82                    0x2c,0x2f,0x32,0x35,0x38,0x3b,0x3e,0x42,0x45,0x48,\
  83                    0x4b,0x50,0x55,0x58,0x5d,0x61,0x66,0x6b,0x70,0x75,\
  84                    0x7a  };
  85          
  86          
  87          void isp_write(unsigned char* buf, unsigned char addr_high, unsigned char addr_low, unsigned char len)
  88          {
  89   1        IFMT = 0x02;
  90   1        IFADRH = addr_high;
  91   1        do
  92   1        {
  93   2          IFADRL = addr_low;
  94   2          IFD = *buf;
  95   2          SCMD = 0x46;
  96   2          SCMD = 0xB9;
  97   2           
  98   2          buf++;
  99   2          addr_low++;
 100   2          if (addr_low == 0)
 101   2          {
 102   3             addr_high++;
 103   3             IFADRH = addr_high;
 104   3          }
 105   2          len--;
 106   2        }
 107   1        while (len != 0);
 108   1      }
 109          
 110          void isp_init(void)
 111          {
 112   1        ISPCR = 0x81;
 113   1      }
 114          
 115          void enter_isp(void)
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 3   

 116          {
 117   1              // Clear the magic mark
 118   1              unsigned char mark = 0x00;
 119   1              isp_init();
 120   1              isp_write(&mark, 0xEF, 0xFF, 1);
 121   1              ISPCR = 0x60;
 122   1      }
 123          
 124          
 125          BYTE mcuLib_ProtocolAppend(BYTE *pucBuf, BYTE * piLen, BYTE ucByte) {
 126   1          if (ucByte == 0x7E || ucByte == 0x7D) {
 127   2              pucBuf[*piLen] = 0x7D;
 128   2              (*piLen)++;
 129   2              pucBuf[*piLen] = 0x50 | (ucByte & 0x0F);
 130   2              (*piLen)++;
 131   2          } else {
 132   2              pucBuf[*piLen] = ucByte;
 133   2              (*piLen)++;
 134   2          }
 135   1          return 0;
 136   1      }
 137          
 138          BYTE mcuLib_ProtocolSendCmdWithParamNum(BYTE ucType, BYTE* pucParam, BYTE ucSize) {
 139   1          BYTE ucChecksum = 0;
 140   1          BYTE pucBuf[16];
 141   1          BYTE iLen;
 142   1          BYTE i;
 143   1         
 144   1          pucBuf[0] = 0x7E;
 145   1          iLen = 1;
 146   1          ucChecksum ^= ucType;
 147   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucType);
 148   1          ucChecksum ^= ucSize;
 149   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucSize);
 150   1      
 151   1          for (i = 0; i < ucSize; i++) {
 152   2              ucChecksum ^= pucParam[i];
 153   2              mcuLib_ProtocolAppend(pucBuf, &iLen, pucParam[i]);
 154   2          }
 155   1      
 156   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucChecksum);
 157   1      
 158   1        for (i = 0; i < (iLen); i++) {
 159   2            RS2_tx(pucBuf[i]);
 160   2          }
 161   1      
 162   1        
 163   1          return 0;
 164   1      }
 165          
 166          
 167          void MCU_SendCmdToDVR(BYTE ucType)
 168          {
 169   1        BYTE buf[7]={0,0,0,0,0,0,0};
 170   1        WORD val;
 171   1      switch(ucType)
 172   1      {
 173   2        case MCU_PROTOCOL_CMD_REPLY_MCU_FW: //Reply MCU firmware version
 174   2          buf[0]=ReadEEP(EEP_FWREV_MAJOR);      //FWVER
 175   2          buf[1]=ReadEEP(EEP_FWREV_MINOR1);
 176   2          buf[2]=ReadEEP(EEP_FWREV_MINOR2);
 177   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_REPLY_MCU_FW,buf,3);  
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 4   

 178   2          break;
 179   2      
 180   2        case MCU_PROTOCOL_CMD_REGULAR_DATA:     //Regular data
 181   2      
 182   2        //val=(((GET_BATTERY_CAPACITY()*32)/10000)*100)+(((GET_BATTERY_CAPACITY()*32)%10000)/100);
 183   2        //val=(val*54)/100;
 184   2        #if 1
 185   2        val=((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_B
             -ATTERY_CAPACITY()*59)/*-800*/)/100));
 186   2      
 187   2          if((val/1000))
 188   2          val=(val/10)+1;
 189   2          else 
 190   2          val=(val/10);
 191   2      /*
 192   2           if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)
 193   2          val=121;  
 194   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL1)
 195   2          val=127;  
 196   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL2)
 197   2          val=132;
 198   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL3)
 199   2          val=146;  
 200   2        else   if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL4)  
 201   2          val=155;
 202   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)
 203   2          val=115;  
 204   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)
 205   2          val=160;  
 206   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX_STOP)
 207   2          val=164;
 208   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_NO_STARTUP)
 209   2          val=117;
 210   2        else   if(GET_BATTERY_STATE()==_BATT_STATUS_NO_BATT)  
 211   2          val=0;
 212   2      */
 213   2      
 214   2        #else
                val=((((GET_BATTERY_CAPACITY()*(32+1))/*-800*/)/10000)*100)+((((GET_BATTERY_CAPACITY()*(32+1))/*-800*/)%1
             -0000)/100);
                val=(val*(54+1))/100;
                #endif
 218   2          
 219   2          #if 1
 220   2          buf[0]=val;         ///battery info.
 221   2          #else
                  buf[0]=GET_BATTERY_STATE();         ///abttery info.
                  #endif
 224   2          #if 0//for test
                  
                    buf[2]=(BatteryVoltage>>8);
                    
                    buf[3]=(BatteryVoltage&0xff);
              
                  #else
 231   2          buf[2]=(BatteryBTH>>8);
 232   2      
 233   2          buf[3]=(BatteryBTH&0xff);
 234   2          #endif
 235   2          buf[4]=((EncorderLenint/10)<<4)|(EncorderLenint%10);   
 236   2      
 237   2          #if (_2ND_DECIMAL==ON)//ryan@20200505
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 5   

 238   2          buf[5]=((EncorderLenfloaat/10)<<4)|(EncorderLenfloaat%10);
 239   2          #else
                  buf[5]=(EncorderLenfloaat<<4);
                  #endif
 242   2          buf[6]=EncorderCountPN;
 243   2      
 244   2          if(GET_AC_PLUG()==_TRUE)
 245   2          buf[1]|=0x01;
 246   2      
 247   2          if(GET_BTH_STATE()==_BATT_STATUS_TEMP_HIGH)
 248   2          buf[1]|=0x02;
 249   2          
 250   2          if(GET_BTH_STATE()==_BATT_STATUS_TEMP_LOW)
 251   2          buf[1]|=0x04;
 252   2      
 253   2          if(GET_NO_BATTERY()==_TRUE)
 254   2          buf[1]|=0x08;
 255   2      
 256   2          if(GET_BATTERY_ABNORMAL()==_TRUE)
 257   2          buf[1]|=0x10;
 258   2          
 259   2          if(GET_BATTERY_HIGH_TMEP_WARN()==_TRUE)
 260   2          buf[1]|=0x20;
 261   2          
 262   2          if(GET_BATTERY_LOW_TMEP_WARN()==_TRUE)
 263   2          buf[1]|=0x40;
 264   2      
 265   2          if(((GET_STAT1()==OFF)&&(GET_STAT2()==ON)&&(BatteryBTH>90))&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&
             -&( GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)&&(GET_NO_BATTERY()==_FALSE))///charg
             -ing
 266   2          buf[1]|=0x80;
 267   2      
 268   2          
 269   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_REGULAR_DATA,buf,7);                        
 270   2          break;
 271   2      
 272   2        case MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN:    //system shutdown
 273   2          if(GET_AC_PLUG_OUT()==_TRUE)      
 274   2            {
 275   3            buf[0]=1; 
 276   3            CLR_AC_PLUG_OUT();  
 277   3            #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 278   3            GraphicsPrint(RED,"\r\n(AC_PLUG_OUT)");
 279   3            #endif  
 280   3            }
 281   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN,buf,1);                     
 282   2          break;
 283   2      
 284   2        case MCU_PROTOCOL_CMD_ENTRY_FACTORY:  //Entry factory mode
 285   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_ENTRY_FACTORY,buf,1); 
 286   2          break;
 287   2      
 288   2        case MCU_PROTOCOL_CMD_SLEEP_WAKE_UP:
 289   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_SLEEP_WAKE_UP,buf,1); 
 290   2          break;
 291   2      
 292   2      default:
 293   2        break;
 294   2          
 295   2      }
 296   1        
 297   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 6   

 298          
 299          
 300          void InitialTimerEvent(void)
 301          {
 302   1        MCUTimerInitialTimerEvent();  //clear all of timer event  
 303   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_FIRST_GET_BATT_BTH_STATE);
 304   1            MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
 305   1        MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);
 306   1          MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
 307   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_GRN_BLINK);
 308   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE);
 309   1        MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 310   1        MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE);  //check charge
 311   1        SET_AC_PLUG();
 312   1      
 313   1      #if(_DEBUG_MESSAGE_WORKING_TIME == ON)
 314   1        MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);
 315   1      #endif
 316   1      
 317   1      }
 318          
 319          BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 320                                           int * toValue, CODE_P struct RegisterInfo *toRange ){
 321   1      
 322   1        // calculate intermediate values
 323   1        int a;
 324   1        int b;
 325   1      
 326   1        // perform mapping
 327   1        if ( fromValue <= fromRange->Default ) {
 328   2          a = toRange->Default - toRange->Min;
 329   2          b = fromRange->Default - fromRange->Min;
 330   2          // prevent divide by zero
 331   2          if( b==0 )    return (FALSE);
 332   2          *toValue = (int) ( (DWORD)fromValue- (DWORD)fromRange->Min ) * a / b 
 333   2                  +(DWORD)toRange->Min;
 334   2        }
 335   1        else {
 336   2          a = toRange->Max - toRange->Default;
 337   2          b = fromRange->Max - fromRange->Default;
 338   2          // prevent divide by zero
 339   2          if( b==0 )    return (FALSE);
 340   2              *toValue = (int) ( (DWORD)fromValue - (DWORD)fromRange->Default ) * a / b
 341   2                             + (DWORD)toRange->Default;
 342   2        }
 343   1      
 344   1        return ( TRUE );
 345   1         
 346   1      }
 347          
 348          void SetAD5110Step(BYTE newv) 
 349          {
 350   1      
 351   1        int regv;
 352   1      
 353   1        Mapping1( newv, &UserRange , &regv, &AD5110Range);
 354   1        WriteAD5110(AD5110_CMD_Write_Data_To_RDAC ,AD5110_setp[regv]);
 355   1                  
 356   1      }
 357          
 358          DWORD GetRotateNumber(void)
 359          {
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 7   

 360   1        DWORD ret=0;
 361   1        ret=ReadEEP(EEP_RotateNumberH);
 362   1        ret<<=8;
 363   1        
 364   1        ret|=ReadEEP(EEP_RotateNumberM);
 365   1        ret<<=8;  
 366   1      
 367   1        ret|=ReadEEP(EEP_RotateNumberL);
 368   1      
 369   1        #if(_DEBUG_EncorderHandler==ON)
 370   1        Printf("\r\nGetRotateNumber=%01x%04x",(WORD)(ret>>16),(WORD)ret);
 371   1        #endif
 372   1      
 373   1        return ret;
 374   1      }
 375          
 376          void SaveRotateNumber(DWORD val)
 377          {
 378   1        DWORD temp=0;
 379   1      
 380   1        temp=ReadEEP(EEP_RotateNumberH);
 381   1        temp<<=8;
 382   1        temp|=ReadEEP(EEP_RotateNumberM);
 383   1        temp<<=8; 
 384   1        temp|=ReadEEP(EEP_RotateNumberL);
 385   1      
 386   1        if(temp!=val)
 387   1        { 
 388   2      
 389   2        if(val>999999)
 390   2          {
 391   3          val-=999999 ;///>99999 clean to 0
 392   3      
 393   3          #if(_DEBUG_EncorderHandler==ON)
 394   3          Printf("\r\nSaveRotateNumber>999999");
 395   3          #endif
 396   3          }
 397   2        WriteEEP(EEP_RotateNumberL,(val&0xff));
 398   2        val>>=8;
 399   2        WriteEEP(EEP_RotateNumberM,(val&0xff));
 400   2        val>>=8;
 401   2        WriteEEP(EEP_RotateNumberH,(val&0xff));
 402   2      
 403   2        #if(_DEBUG_EncorderHandler==ON)
 404   2        Printf("\r\nSaveRotateNumber=%d",(WORD)val);
 405   2        #endif
 406   2        }
 407   1      
 408   1      }
 409          
 410          void  LoadEEPROM (void)
 411          {
 412   1         PowerFlag = ReadEEP(EEP_Powerflag);
 413   1         CameraVolt= ReadEEP(EEP_CameraVolt);
 414   1         PWR_START_flag= ReadEEP(EEP_DC12_PWR_START);
 415   1        PowerOffToOnFlag= ReadEEP(EEP_PowerOffToOnflag);
 416   1      
 417   1        Encorder1= ((ReadEEP(EEP_Encorder1)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder1));
 418   1        Decimal1= ((ReadEEP(EEP_Decimal1)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal1));
 419   1      
 420   1        Encorder2= ((ReadEEP(EEP_Encorder2)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder2));
 421   1        Decimal2= ((ReadEEP(EEP_Decimal2)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal2));
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 8   

 422   1      
 423   1        Encorder3= ((ReadEEP(EEP_Encorder3)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder3));
 424   1        Decimal3= ((ReadEEP(EEP_Decimal3)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal3));
 425   1      
 426   1        Encorder4= ((ReadEEP(EEP_Encorder4)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder4));
 427   1        Decimal4= ((ReadEEP(EEP_Decimal4)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal4));
 428   1      
 429   1      
 430   1        ulongRotateNumber=ReadEEP(EEP_RotateNumberH);
 431   1        ulongRotateNumber<<=8;
 432   1        ulongRotateNumber|=ReadEEP(EEP_RotateNumberM);  
 433   1        ulongRotateNumber<<=8;
 434   1        ulongRotateNumber|=ReadEEP(EEP_RotateNumberL);  
 435   1      
 436   1        if(ReadEEP(EEP_LowBattery_Flag))
 437   1          SET_BATTERY_CAPACITY_LOW_FLAG();
 438   1      
 439   1        if(PWR_START_flag==ON)
 440   1        {
 441   2          if(PowerFlag==OFF)
 442   2          {
 443   3          WriteEEP(EEP_Powerflag,ON);
 444   3          PowerFlag=ON;
 445   3          }
 446   2          
 447   2          if(PowerOffToOnFlag==ON)
 448   2            {
 449   3            WriteEEP(EEP_PowerOffToOnflag,OFF);
 450   3            PowerOffToOnFlag=OFF;
 451   3            }
 452   2      
 453   2        } 
 454   1        else //PWR_START_flag==OFF
 455   1          {
 456   2            
 457   2            if(PowerOffToOnFlag==ON)
 458   2            {
 459   3            WriteEEP(EEP_Powerflag,ON);
 460   3            PowerFlag=ON;
 461   3      
 462   3            
 463   3            WriteEEP(EEP_PowerOffToOnflag,OFF);
 464   3            PowerOffToOnFlag=OFF;
 465   3            }
 466   2            else if(PowerFlag==ON)
 467   2              {
 468   3              WriteEEP(EEP_Powerflag,OFF);
 469   3              PowerFlag=OFF;        
 470   3              }
 471   2          }
 472   1      
 473   1      }
 474          
 475          WORD GetADCValue(BYTE sel)
 476          {
 477   1          
 478   1      ADCTL=0x80|0x08|sel;  //start adc sampling
 479   1      
 480   1      while(ADCTL&0x08);  // printf("ADC is busying\r\n");  //wating for adc
 481   1      
 482   1      return (WORD)(((ADCVL&0x03) |(ADCV<<2))&0x03ff);
 483   1      
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 9   

 484   1      }
 485          
 486          WORD GetBatteryBTH(void)
 487          {
 488   1      WORD max=0;
 489   1      max=GetADCValue(P16_BTH);
 490   1      //max=GetADCValue(P15_BTH);
 491   1      
 492   1      //max=850;
 493   1      
 494   1      return max;
 495   1      }
 496          
 497          WORD GetBatteryVoltage(void)
 498          {
 499   1      WORD max=0;
 500   1      max=GetADCValue(P17_BAT);
 501   1      
 502   1      //max=710;  //low
 503   1      //max=835;    //normal
 504   1      //max=900;  //full
 505   1      
 506   1      return max;
 507   1      }
 508          
 509          
 510          void EncorderHandler(void)
 511          {
 512   1      WORD EncorderCountTemp,temp_val;
 513   1      #if (HS_DEBUG==ON)
 514   1      WORD temp_EncorderCountTemp;
 515   1      #endif
 516   1      
 517   1      //BYTE param[4];
 518   1      float EncorderParaTemp1,EncorderParaTemp2,EncorderParaTemp3,EncorderParaTemp4;
 519   1      float EncorderOffset1,EncorderOffset2,EncorderOffset3/*,EncorderOffset4*/;
 520   1        
 521   1        if(ChangeKey)
 522   1        { 
 523   2          #if (HS_DEBUG==ON)
 524   2          Printf("\r\nEncorderCount=%d",(WORD)EncorderCount);
 525   2          #endif
 526   2          //Printf("\r\nEncorderLen_Offset0=%d ",(WORD)EncorderLen_Offset);
 527   2          //Printf("\r\nEncorderCountPN0=%d ",(WORD)EncorderCountPN);
 528   2          #if 1//ryan@20200430
 529   2      //    EncorderParaTemp1=(Encorder1+(Decimal1))*0.01f;
 530   2      //    EncorderParaTemp2=(Encorder2+(Decimal2))*0.01f;
 531   2      //    EncorderParaTemp3=(Encorder3+(Decimal3))*0.01f;
 532   2      //    EncorderParaTemp4=(Encorder4+(Decimal4))*0.01f;
 533   2          EncorderParaTemp1=(Encorder1+(Decimal1*0.01));
 534   2          EncorderParaTemp2=(Encorder2+(Decimal2*0.01));
 535   2          EncorderParaTemp3=(Encorder3+(Decimal3*0.01));
 536   2          EncorderParaTemp4=(Encorder4+(Decimal4*0.01));
 537   2      
 538   2          #else
                  EncorderParaTemp1=(Encorder1)*0.01f;
                  EncorderParaTemp2=(Encorder2)*0.01f;
                  EncorderParaTemp3=(Encorder3)*0.01f;
                  EncorderParaTemp4=(Encorder4)*0.01f;
                  #endif
 544   2          //EncorderParaTemp1=(Encorder1*0.01f)+Decimal1;
 545   2          //EncorderParaTemp2=(Encorder2*0.01f)+Decimal2;
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 10  

 546   2          //EncorderParaTemp3=(Encorder3*0.01f)+Decimal3;
 547   2          //EncorderParaTemp4=(Encorder4*0.01f)+Decimal4;
 548   2          
 549   2          #if 0
                  Printf("\r\nEncorder1=%d ",(WORD)Encorder1);
                  Printf("\r\nEncorder2=%d ",(WORD)Encorder2);
                  Printf("\r\nEncorder3=%d ",(WORD)Encorder3);
                  Printf("\r\nEncorder4=%d ",(WORD)Encorder4);
                  
                  Printf("\r\nEncorderParaTemp1=%d ",(WORD)(EncorderParaTemp1*100));
                  Printf("\r\nEncorderParaTemp2=%d ",(WORD)(EncorderParaTemp2*100));
                  Printf("\r\nEncorderParaTemp3=%d ",(WORD)(EncorderParaTemp3*100));
                  Printf("\r\nEncorderParaTemp4=%d ",(WORD)(EncorderParaTemp4*100));
                  #endif
 560   2          #if 0
                  EncorderOffset1=(30.625*EncorderParaTemp1*(240-EncorderLen_Offset))/1000;
                  EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240-EncorderLen_Offset))/1000;
                  EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450-EncorderLen_Offset)/1000);
                  //EncorderOffset4=EncorderOffset3+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(780-600)/1000);
                  #else
 566   2          
 567   2          EncorderOffset1=(30.625*EncorderParaTemp1*240)/1000;
 568   2          EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240))/1000;
 569   2          EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450)/1000);
 570   2          #endif
 571   2          #if 0
                  Printf("\r\nEncorderOffset1=%d ",(WORD)(EncorderOffset1*100));
                  Printf("\r\nEncorderOffset2=%d ",(WORD)(EncorderOffset2*100));
                  Printf("\r\nEncorderOffset3=%d ",(WORD)(EncorderOffset3*100));
                  #endif
 576   2          //Printf("\r\nEncorderOffset4=%d ",(WORD)(EncorderOffset4*100));
 577   2          
 578   2          if(EncorderCount>=0)
 579   2            {
 580   3            EncorderCountPN=0;
 581   3            EncorderCountTemp=(EncorderCount/2);
 582   3            }
 583   2          else
 584   2            {
 585   3            EncorderCountPN=1;
 586   3            EncorderCountTemp=(0-EncorderCount)/2;
 587   3            }
 588   2          //EncorderCountTemp+=450;
 589   2          //EncorderCount
 590   2          #if 0
                  if(EncorderCount>=0)
                    EncorderCountPN=0;
                  else
                    EncorderCountPN=1;
                  #endif
 596   2          #if 0
                  if(EncorderCountTemp>EncorderLen_Offset)
                    {
                    EncorderCountPN=0;
                    temp_EncorderCountTemp=EncorderCountTemp-EncorderLen_Offset;
                    }
                  else
                    {
                    EncorderCountPN=1;
                    temp_EncorderCountTemp=EncorderLen_Offset-EncorderCountTemp;
                    }
                  #endif
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 11  

 608   2          if(EncorderCountTemp<=240&&EncorderCountTemp>=0)
 609   2            {
 610   3            
 611   3            #if (HS_DEBUG==ON)
 612   3            Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
 613   3            Printf("\r\nEncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
 614   3            Printf("\r\nEncorderCountPN=%d ",(WORD)EncorderCountPN);
 615   3            #endif
 616   3            //if(EncorderCountPN==1)
 617   3            #if 0
                      EncorderLen=(30.625*EncorderParaTemp1*(temp_EncorderCountTemp))/1000;
                    #else
 620   3            EncorderLen=(30.625*EncorderParaTemp1*EncorderCountTemp)/1000;
 621   3            #endif
 622   3              //EncorderLen=(30.625*EncorderParaTemp1*(EncorderCountTemp-EncorderLen_Offset))/1000;
 623   3              
 624   3            //EncorderLen=(30.625*1*EncorderCountTemp)/1000;
 625   3            temp_val=30.625*EncorderParaTemp1*EncorderCountTemp;
 626   3            EncorderLenint=EncorderLen+0.05f;
 627   3            //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 628   3            //EncorderLenint=EncorderLen;   
 629   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 630   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 631   3            EncorderLenfloaat%=100;
 632   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 636   3            #if 0
                    Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                    Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                    Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);      
                    Printf("\r\ntemp_val=%d ",(WORD)temp_val);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
 644   3            }
 645   2          else if(EncorderCountTemp>240&&EncorderCountTemp<=450)
 646   2            {
 647   3        
 648   3            #if 0
                    EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(temp_EncorderCountTemp-(240-EncorderLen_Offset))
             -/1000);
                    #else
 651   3            EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(EncorderCountTemp-240)/1000);
 652   3            #endif
 653   3            
 654   3            #if (HS_DEBUG==ON)
 655   3            Printf("\r\ntemp_EncorderCountTemp=%d ",(WORD)(temp_EncorderCountTemp-(240-EncorderLen_Offset)));
 656   3            Printf("\r\nEncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
 657   3            Printf("\r\ntemp_EncorderCountTemp=%d ",(WORD)temp_EncorderCountTemp);
 658   3            Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
 659   3            //EncorderLen=7.35+(32.091*1*(EncorderCountTemp-240)/1000);
 660   3            Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
 661   3            #endif
 662   3            EncorderLenint=EncorderLen+0.05f;     
 663   3            #if (HS_DEBUG==ON)
 664   3            Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
 665   3            #endif
 666   3            //EncorderLenint=EncorderLen;
 667   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 668   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 12  

 669   3            EncorderLenfloaat%=100;
 670   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 674   3            
 675   3            #if (HS_DEBUG==ON)
 676   3            Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
 677   3            #endif      
 678   3            }
 679   2          #if 1
 680   2          else if(EncorderCountTemp>450&&EncorderCountTemp<=780)
 681   2            {
 682   3            #if 0
                    EncorderLen=EncorderOffset2+(33.504*1*(temp_EncorderCountTemp-(450-EncorderLen_Offset))/1000);
                    #else     
 685   3            EncorderLen=EncorderOffset2+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
 686   3            #endif
 687   3            
 688   3            #if (HS_DEBUG==ON)
 689   3            Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
 690   3            #endif
 691   3            
 692   3            EncorderLenint=EncorderLen+0.05f;
 693   3            //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 694   3            //EncorderLenint=EncorderLen;
 695   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 696   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 697   3            EncorderLenfloaat%=100;
 698   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 702   3            
 703   3            #if (HS_DEBUG==ON)
 704   3            Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
 705   3            #endif
 706   3            }
 707   2          #else
                  else if(EncorderCountTemp>450&&EncorderCountTemp<=600)
                    {
                    EncorderLen=14.089+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
                    //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
              
                    EncorderLenint=EncorderLen+0.05f;
                    //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                    //EncorderLenint=EncorderLen;
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    }   
                  else if(EncorderCountTemp>600&&EncorderCountTemp<=780)
                    {
                    EncorderLen=19.089+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(EncorderCountTemp-600)/1000);
                    //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
              
                    EncorderLenint=EncorderLen+0.05f;
                    //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                    //EncorderLenint=EncorderLen;
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 13  

                    EncorderLenfloaat%=10;
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    }
                  #endif
 735   2          else if(EncorderCountTemp>780)
 736   2            {
 737   3            #if 0
                    EncorderLen=EncorderOffset3+(34.896*1*(EncorderCountTemp-(780-EncorderLen_Offset))/1000);
                    #else
 740   3            EncorderLen=EncorderOffset3+(34.896*EncorderParaTemp4*(EncorderCountTemp-780)/1000);
 741   3            #endif
 742   3      
 743   3            #if (HS_DEBUG==ON)  
 744   3            Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
 745   3      
 746   3            Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
 747   3            #endif
 748   3            EncorderLenint=EncorderLen+0.05f;
 749   3            #if (HS_DEBUG==ON)
 750   3            Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
 751   3            #endif
 752   3            //EncorderLenint=EncorderLen;
 753   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 754   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 755   3            #if (HS_DEBUG==ON)
 756   3            Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
 757   3            #endif
 758   3            EncorderLenfloaat%=100;
 759   3            #if (HS_DEBUG==ON)    
 760   3            Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
 761   3            #endif
 762   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
                    EncorderLenfloaat%=10;      
                    #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
                    #endif      
 772   3            }
 773   2            
 774   2          ChangeKey=0;
 775   2          //param[0]=EncorderLenint;
 776   2          //param[1]=EncorderLenfloaat;
 777   2          //param[2]=EncorderCountPN;
 778   2          //protocol_send_cmd_with_param_num(0x0a, (BYTE *)param, 3);
 779   2          //protocol_send_cmd_with_param_num(0x80, (BYTE *)param, 3);
 780   2           if(GET_DVR_SystemReadyNotic()==_TRUE)
 781   2            {
 782   3           MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
 783   3            MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 784   3            MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 785   3            }
 786   2          #if (_DEBUG_EncorderHandler==ON)//ryan@20200505
 787   2          Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
 788   2          Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
 789   2          #endif
 790   2        }
 791   1        //GetKey(0);
 792   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 14  

 793          
 794            void EncorderHandler_TELI(void)
 795            {
 796   1        WORD EncorderCountTemp,temp_val;
 797   1      #if (HS_DEBUG==ON)
 798   1        WORD temp_EncorderCountTemp;
 799   1      #endif
 800   1        
 801   1        //BYTE param[4];
 802   1        float EncorderParaTemp1,EncorderParaTemp2,EncorderParaTemp3,EncorderParaTemp4;
 803   1        float EncorderOffset1,EncorderOffset2,EncorderOffset3/*,EncorderOffset4*/;
 804   1          
 805   1          if(ChangeKey)
 806   1          { 
 807   2          #if (HS_DEBUG==ON)
 808   2            Printf("\r\n(TELI)EncorderCount=%d",(WORD)EncorderCount);
 809   2            Printf("\r\nGetRotateNumber=%01x%04x",(WORD)(ulongRotateNumber>>16),(WORD)ulongRotateNumber);     
 810   2          #endif
 811   2            //Printf("\r\nEncorderLen_Offset0=%d ",(WORD)EncorderLen_Offset);
 812   2            //Printf("\r\nEncorderCountPN0=%d ",(WORD)EncorderCountPN);
 813   2          #if 1//ryan@20200430
 814   2        //    EncorderParaTemp1=(Encorder1+(Decimal1))*0.01f;
 815   2        //    EncorderParaTemp2=(Encorder2+(Decimal2))*0.01f;
 816   2        //    EncorderParaTemp3=(Encorder3+(Decimal3))*0.01f;
 817   2        //    EncorderParaTemp4=(Encorder4+(Decimal4))*0.01f;
 818   2            EncorderParaTemp1=(Encorder1+(Decimal1*0.01));
 819   2            EncorderParaTemp2=(Encorder2+(Decimal2*0.01));
 820   2            EncorderParaTemp3=(Encorder3+(Decimal3*0.01));
 821   2            EncorderParaTemp4=(Encorder4+(Decimal4*0.01));
 822   2        
 823   2          #else
                    EncorderParaTemp1=(Encorder1)*0.01f;
                    EncorderParaTemp2=(Encorder2)*0.01f;
                    EncorderParaTemp3=(Encorder3)*0.01f;
                    EncorderParaTemp4=(Encorder4)*0.01f;
                  #endif
 829   2            //EncorderParaTemp1=(Encorder1*0.01f)+Decimal1;
 830   2            //EncorderParaTemp2=(Encorder2*0.01f)+Decimal2;
 831   2            //EncorderParaTemp3=(Encorder3*0.01f)+Decimal3;
 832   2            //EncorderParaTemp4=(Encorder4*0.01f)+Decimal4;
 833   2            
 834   2          #if 0
                    Printf("\r\nEncorder1=%d ",(WORD)Encorder1);
                    Printf("\r\nEncorder2=%d ",(WORD)Encorder2);
                    Printf("\r\nEncorder3=%d ",(WORD)Encorder3);
                    Printf("\r\nEncorder4=%d ",(WORD)Encorder4);
                    
                    Printf("\r\nEncorderParaTemp1=%d ",(WORD)(EncorderParaTemp1*100));
                    Printf("\r\nEncorderParaTemp2=%d ",(WORD)(EncorderParaTemp2*100));
                    Printf("\r\nEncorderParaTemp3=%d ",(WORD)(EncorderParaTemp3*100));
                    Printf("\r\nEncorderParaTemp4=%d ",(WORD)(EncorderParaTemp4*100));
                  #endif
 845   2          #if 0
                    EncorderOffset1=(30.625*EncorderParaTemp1*(240-EncorderLen_Offset))/1000;
                    EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240-EncorderLen_Offset))/1000;
                    EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450-EncorderLen_Offset)/1000);
                    //EncorderOffset4=EncorderOffset3+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(780-600)/1000);
                  #else
 851   2            
 852   2            EncorderOffset1=(30.625*EncorderParaTemp1*240)/1000;
 853   2            EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240))/1000;
 854   2            EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450)/1000);
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 15  

 855   2          #endif
 856   2          #if 0
                    Printf("\r\nEncorderOffset1=%d ",(WORD)(EncorderOffset1*100));
                    Printf("\r\nEncorderOffset2=%d ",(WORD)(EncorderOffset2*100));
                    Printf("\r\nEncorderOffset3=%d ",(WORD)(EncorderOffset3*100));
                  #endif
 861   2            //Printf("\r\nEncorderOffset4=%d ",(WORD)(EncorderOffset4*100));
 862   2            
 863   2            if(EncorderCount>=0)
 864   2              {
 865   3              EncorderCountPN=0;
 866   3              EncorderCountTemp=(EncorderCount/2);
 867   3              }
 868   2            else
 869   2              {
 870   3              EncorderCountPN=1;
 871   3              EncorderCountTemp=(0-EncorderCount)/2;
 872   3              }
 873   2            
 874   2            //EncorderCountTemp+=450;
 875   2            //EncorderCount
 876   2          #if 0
                    if(EncorderCount>=0)
                      EncorderCountPN=0;
                    else
                      EncorderCountPN=1;
                  #endif
 882   2          #if 0
                    if(EncorderCountTemp>EncorderLen_Offset)
                      {
                      EncorderCountPN=0;
                      temp_EncorderCountTemp=EncorderCountTemp-EncorderLen_Offset;
                      }
                    else
                      {
                      EncorderCountPN=1;
                      temp_EncorderCountTemp=EncorderLen_Offset-EncorderCountTemp;
                      }
                  #endif
 894   2            if(EncorderCountTemp<=240&&EncorderCountTemp>=0)
 895   2              {
 896   3              
 897   3            #if (HS_DEBUG==ON)
 898   3              Printf("\r\n(TELI)EncorderCountTemp=%d ",(WORD)EncorderCountTemp);
 899   3              Printf("\r\n(TELI)EncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
 900   3              Printf("\r\n(TELI)EncorderCountPN=%d ",(WORD)EncorderCountPN);
 901   3            #endif
 902   3              //if(EncorderCountPN==1)
 903   3            #if 0
                        EncorderLen=(30.625*EncorderParaTemp1*(temp_EncorderCountTemp))/1000;
                    #else
 906   3              EncorderLen=(30.625*EncorderParaTemp1*EncorderCountTemp)/1000;
 907   3            #endif
 908   3                //EncorderLen=(30.625*EncorderParaTemp1*(EncorderCountTemp-EncorderLen_Offset))/1000;
 909   3                
 910   3              //EncorderLen=(30.625*1*EncorderCountTemp)/1000;
 911   3              temp_val=30.625*EncorderParaTemp1*EncorderCountTemp;
 912   3              EncorderLenint=EncorderLen+0.05f;
 913   3              //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 914   3              //EncorderLenint=EncorderLen;   
 915   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 916   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 16  

 917   3              EncorderLenfloaat%=100;
 918   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
 922   3            #if 0
                      Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                      Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                      Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);      
                      Printf("\r\ntemp_val=%d ",(WORD)temp_val);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
 930   3              }
 931   2            else if(EncorderCountTemp>240&&EncorderCountTemp<=450)
 932   2              {
 933   3          
 934   3            #if 0
                      EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(temp_EncorderCountTemp-(240-EncorderLen_Offset)
             -)/1000);
                    #else
 937   3              EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(EncorderCountTemp-240)/1000);
 938   3            #endif
 939   3              
 940   3            #if (HS_DEBUG==ON)
 941   3              Printf("\r\n(TELI)temp_EncorderCountTemp=%d ",(WORD)(temp_EncorderCountTemp-(240-EncorderLen_Offset)))
             -;
 942   3              Printf("\r\n(TELI)EncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
 943   3              Printf("\r\n(TELI)temp_EncorderCountTemp=%d ",(WORD)temp_EncorderCountTemp);
 944   3              Printf("\r\n(TELI)EncorderLen=%d ",(WORD)EncorderLen);
 945   3              //EncorderLen=7.35+(32.091*1*(EncorderCountTemp-240)/1000);
 946   3              Printf("\r\n(TELI)EncorderCount=%d ",(WORD)EncorderCount);
 947   3            #endif
 948   3              EncorderLenint=EncorderLen+0.05f;     
 949   3            #if (HS_DEBUG==ON)
 950   3              Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
 951   3            #endif
 952   3              //EncorderLenint=EncorderLen;
 953   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 954   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
 955   3              EncorderLenfloaat%=100;
 956   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
 960   3              
 961   3            #if (HS_DEBUG==ON)
 962   3              Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
 963   3            #endif      
 964   3              }
 965   2          #if 1
 966   2            else if(EncorderCountTemp>450&&EncorderCountTemp<=780)
 967   2              {
 968   3            #if 0
                      EncorderLen=EncorderOffset2+(33.504*1*(temp_EncorderCountTemp-(450-EncorderLen_Offset))/1000);
                    #else     
 971   3              EncorderLen=EncorderOffset2+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
 972   3            #endif
 973   3              
 974   3            #if (HS_DEBUG==ON)
 975   3              Printf("\r\n(TELI)EncorderCount=%d ",(WORD)EncorderCount);
 976   3            #endif
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 17  

 977   3              
 978   3              EncorderLenint=EncorderLen+0.05f;
 979   3              //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 980   3              //EncorderLenint=EncorderLen;
 981   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 982   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
 983   3              EncorderLenfloaat%=100;
 984   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
 988   3              
 989   3            #if (HS_DEBUG==ON)
 990   3              Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
 991   3            #endif
 992   3              }
 993   2          #else
                    else if(EncorderCountTemp>450&&EncorderCountTemp<=600)
                      {
                      EncorderLen=14.089+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
                      //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                
                      EncorderLenint=EncorderLen+0.05f;
                      //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                      //EncorderLenint=EncorderLen;
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                      }   
                    else if(EncorderCountTemp>600&&EncorderCountTemp<=780)
                      {
                      EncorderLen=19.089+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(EncorderCountTemp-600)/1000);
                      //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                
                      EncorderLenint=EncorderLen+0.05f;
                      //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                      //EncorderLenint=EncorderLen;
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                      }
                  #endif
1021   2            else if(EncorderCountTemp>780)
1022   2              {
1023   3            #if 0
                      EncorderLen=EncorderOffset3+(34.896*1*(EncorderCountTemp-(780-EncorderLen_Offset))/1000);
                    #else
1026   3              EncorderLen=EncorderOffset3+(34.896*EncorderParaTemp4*(EncorderCountTemp-780)/1000);
1027   3            #endif
1028   3        
1029   3            #if (HS_DEBUG==ON)  
1030   3              Printf("\r\n(TELI)EncorderCount=%d ",(WORD)EncorderCount);
1031   3        
1032   3              Printf("\r\n(TELI)EncorderLen=%d ",(WORD)EncorderLen);
1033   3            #endif
1034   3              EncorderLenint=EncorderLen+0.05f;
1035   3            #if (HS_DEBUG==ON)
1036   3              Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
1037   3            #endif
1038   3              //EncorderLenint=EncorderLen;
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 18  

1039   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1040   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
1041   3            #if (HS_DEBUG==ON)
1042   3              Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
1043   3            #endif
1044   3              EncorderLenfloaat%=100;
1045   3            #if (HS_DEBUG==ON)    
1046   3              Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
1047   3            #endif
1048   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                    #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
                      EncorderLenfloaat%=10;      
                    #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
                    #endif      
1058   3              }
1059   2              
1060   2            ChangeKey=0;
1061   2            //param[0]=EncorderLenint;
1062   2            //param[1]=EncorderLenfloaat;
1063   2            //param[2]=EncorderCountPN;
1064   2            //protocol_send_cmd_with_param_num(0x0a, (BYTE *)param, 3);
1065   2            //protocol_send_cmd_with_param_num(0x80, (BYTE *)param, 3);
1066   2             if(GET_DVR_SystemReadyNotic()==_TRUE)
1067   2              {
1068   3             MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
1069   3              MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
1070   3              MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
1071   3              }
1072   2          #if (_DEBUG_EncorderHandler==ON)//ryan@20200505
1073   2            Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
1074   2            Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
1075   2          #endif
1076   2          }
1077   1          //GetKey(0);
1078   1        }
1079          
1080            //bit CCFL_status;  
1081          void main_loop(void)
1082          {
1083   1      
1084   1        Printf("\r\nStart Main Loop...");
1085   1      
1086   1        if(bytFastEncoderMode==ON)
1087   1          {
1088   2          ulongRotateNumber=GetRotateNumber();
1089   2          Printf("\r\n(TELI Mode)");
1090   2          }
1091   1        else  
1092   1          Printf("\r\n(REX Mode)");
1093   1        
1094   1        //---------------------------------------------------------------
1095   1        //                   Main Loop
1096   1        //---------------------------------------------------------------
1097   1        while(1) 
1098   1        {
1099   2      
1100   2          #if (_DEBUG_MESSAGE_Monitor==ON)
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 19  

1101   2          while( RS_ready() ) 
1102   2            Monitor();        // for new monitor functions    
1103   2          #endif      
1104   2      
1105   2          DvrReceivePaser();  
1106   2          SysTimerHandler();      
1107   2        //  SysJudgeHandler();  
1108   2          SysPowerHandler();  
1109   2          Scankey();
1110   2          
1111   2          if(bytFastEncoderMode==ON)
1112   2          EncorderHandler_TELI();
1113   2          else      
1114   2          EncorderHandler();
1115   2      
1116   2        
1117   2      
1118   2            if(PowerFlag==OFF)   //// POWEROFF
1119   2            break;
1120   2        
1121   2        }
1122   1      
1123   1      }
1124          
1125          void main(void)
1126          {
1127   1      
1128   1      InitCPU();
1129   1      
1130   1      SysPowerInitial();
1131   1      
1132   1      Printf("\r\nStart Boot...");
1133   1      
1134   1      main_init();
1135   1      
1136   1      //set panel 
1137   1      //select UP
1138   1      SET_P_IO1();
1139   1      //Select Left
1140   1      SET_P_IO2();
1141   1      
1142   1      //variable initialize
1143   1      InitVars();
1144   1      
1145   1      //load eeprom data
1146   1      LoadEEPROM();
1147   1      
1148   1      //event initialize
1149   1      InitialTimerEvent();
1150   1      
1151   1      SetAD5110Step(CameraVolt);
1152   1       Printf("\r\n(CameraVolt=%d)",(WORD)CameraVolt);
1153   1      
1154   1      //if(PWR_START_flag==ON)
1155   1      //  PowerFlag=ON;
1156   1      
1157   1      if((GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)&&(Check_ADAP_IN()==_FALSE))
1158   1        PowerFlag=OFF;
1159   1      
1160   1        if(PowerFlag==ON)
1161   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1162   1      else
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 20  

1163   1      {
1164   2        //UserInterfacePowerSwitch(_POWER_ACTION_AC_ON_TO_OFF);
1165   2        SET_POWER_STATUS(_POWER_STATUS_NORMAL); 
1166   2        SET_TARGET_POWER_STATUS(_POWER_STATUS_OFF);
1167   2        
1168   2      }
1169   1        RepeatKey=OFF;  
1170   1      //   SysJudgeStateChangeEvent(_MODE_STATUS_POWER_OFF);    
1171   1      
1172   1        while(1) {
1173   2          if(PowerFlag==ON)
1174   2          main_loop();    //exit when power off
1175   2          
1176   2          WaitPowerOn();
1177   2        }
1178   1      }
1179          
1180          void WaitPowerOn(void)
1181          {
1182   1      
1183   1        Printf("\r\n(Going to power off...)");
1184   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_OFF);
1185   1      
1186   1        if(GET_DVR_EntrySleepMode()==TRUE)
1187   1          CLR_DVR_EntrySleepMode();
1188   1      
1189   1        CLR_DVR_SystemReadyNotic(); 
1190   1        MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);    
1191   1        CLR_DVR_Shutdown();
1192   1        MCUTimerCancelTimerEvent( _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1193   1      
1194   1        //CLR_BATTERY_CAPACITY_HIGH_FLAG();
1195   1        Power_down_mode=_DontgoingToPD;
1196   1        P3M1=0x00;//p3.4 and P3.5 set output ryan@20210226
1197   1        bytHoldOn3SPowerOff=OFF;
1198   1      
1199   1        SaveRotateNumber(ulongRotateNumber);
1200   1        
1201   1        while(1) 
1202   1        {
1203   2      
1204   2            
1205   2              #if (_DEBUG_MESSAGE_Monitor==ON)
1206   2              while( RS_ready() ) 
1207   2              Monitor();        // for new monitor functions    
1208   2              #endif  
1209   2      
1210   2            SysPowerHandler();  
1211   2            SysTimerHandler();
1212   2            Scankey();
1213   2            
1214   2            if(PowerFlag==ON)   //// POWER-ON
1215   2            break;
1216   2      
1217   2            #if (_POWER_DOWN_ENABLE==ON)
1218   2      
1219   2            if((Power_down_mode==_DontgoingToPD)&&(GET_POWER_STATUS()==_POWER_STATUS_OFF)&&(GET_AC_PLUG()/*Check_AD
             -AP_IN()*/==_FALSE))
1220   2            {
1221   3            Power_down_mode=_ReadyToPD;
1222   3            MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_POWER_DOWN_MODE);
1223   3            } 
C51 COMPILER V9.60.0.0   MAIN                                                              04/07/2021 16:56:09 PAGE 21  

1224   2            else if((Check_ADAP_IN()==_TRUE)||(((~P4>>3)& 0x01) ))
1225   2              {
1226   3              Power_down_mode=_DontgoingToPD;
1227   3              MCUTimerCancelTimerEvent( _SYSTEM_TIMER_POWER_DOWN_MODE);
1228   3              }
1229   2            else  if(Power_down_mode==_GoingToPD)
1230   2              SET_MCU_POWER_DOWN_MODE();        
1231   2      
1232   2            #endif  
1233   2            
1234   2        }
1235   1      
1236   1      
1237   1        WriteEEP(EEP_PowerOffToOnflag,ON);
1238   1        EncorderCount=0;
1239   1        EncorderLenint=0;
1240   1        EncorderLenfloaat=0;
1241   1        EncorderCountPN=0;
1242   1         RS2_in=0; //clean DVR CMD.
1243   1        RS2_out=0;//clean DVR CMD.
1244   1        //CLR_BATTERY_CAPACITY_LOW_FLAG();  
1245   1              CLR_BATTERY_ABNORMAL();
1246   1        SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);
1247   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);  
1248   1        Printf("\r\n(Start up  Power On Mode...)");
1249   1      
1250   1        ISPCR = 0x20;/// reboot to AP.
1251   1      
1252   1      }
1253          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7008    ----
   CONSTANT SIZE    =    753    ----
   XDATA SIZE       =    121     142
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
