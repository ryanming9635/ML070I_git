C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECTEXTE
                    -ND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  main.c                                                                    */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          
   9          
  10          #include <math.h>
  11          #include <stdio.h>
  12          
  13          #include "Config.h"
  14          
  15          #include "reg.h"
  16          #include "typedefs.h"
  17          #include "main.h"
  18          #include "i2c.h"
  19          #include "adc.h"
  20          #include "etc_eep.h"
  21          #include "Printf.h"
  22          #include "KeyRemo.h"
  23          #include "Monitor.h"
  24          #include "CPU.h"
  25          #include "HS_DVRProtocol.h"
  26          
  27          StructBatteryInfoType g_stBatteryInfo = {0};
  28          StructDVRInfoType g_stDVRInfo = {0};
  29          extern DATA  DWORD tic_Init_time;
  30          extern bit  AccessEnable;
  31          
  32          BYTE  PowerFlag;
  33          BYTE  CameraVolt;
  34          BYTE  PWR_START_flag;
  35          BYTE LowBatteryFlag;
  36          BYTE PowerOffToOnFlag;
  37          BYTE DVRChangeCurrent=0;
  38          BYTE Power_down_mode=_DontgoingToPD;
  39          BYTE bytFastEncoderMode=OFF;
  40          float EncorderLen=0;
  41          WORD EncorderLen_Offset=0;
  42          BYTE EncorderLenint=0,EncorderCountPN=0,EncorderCountPN_offset=0;
  43          WORD EncorderLenfloaat=0;
  44          //BYTE Encorder1=0.85,Encorder2=0.8,Encorder3=0.75,Encorder4=0.75;
  45          //float Encorder1=100,Encorder2=100,Encorder3=100,Encorder4=100;
  46          float Encorder1=1,Encorder2=1,Encorder3=1,Encorder4=1;
  47          float Decimal1=0,Decimal2=0,Decimal3=0,Decimal4=0;
  48          DWORD ulongRotateNumber=0;
  49            
  50          extern WORD BatteryBTH,BatteryVoltage;
  51          
  52          #if (_DEBUG_MESSAGE_BatteryBTH==ON)
              WORD BTH_Temp=250;
              #endif
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 2   

  55          #if (_DEBUG_MESSAGE_BatteryVoltage==ON)
              WORD Battery_Voltage_Temp  =835;
              #endif
  58          
  59          //extern BYTE FLASH_FLAG;
  60          //extern WORD LED_FLASH_COUNT;
  61          extern bit ChangeKey;
  62          extern short EncorderCount;
  63          
  64          extern  DATA  WORD  tic_pc;
  65          extern DATA BYTE  RS_in;
  66          extern DATA BYTE  RS2_in;
  67          extern DATA BYTE RS2_out;
  68          extern StructPowerInfoType idata g_stPowerInfo ;
  69          extern DATA WORD keytic;
  70          extern bit RepeatKey;
  71          extern BYTE IE_Temp;
  72          extern BYTE bytHoldOn3SPowerOff;
  73          
  74          struct RegisterInfo UserRange={0,40,21};
  75          struct RegisterInfo AD5110Range={0,40,21};
  76          
  77          BYTE  DebugLevel;
  78          
  79          ///AD5110 step voltage
  80          BYTE  AD5110_setp[]={0x05,0x06,0x08,0x0A,0x0B,0x0D,0x0F,0x10,0x12,0x14,\
  81                    0x16,0x18,0x1a,0x1c,0x1e,0x20,0x22,0x25,0x27,0x2a,\
  82                    0x2c,0x2f,0x32,0x35,0x38,0x3b,0x3e,0x42,0x45,0x48,\
  83                    0x4b,0x50,0x55,0x58,0x5d,0x61,0x66,0x6b,0x70,0x75,\
  84                    0x7a  };
  85          
  86          
  87          void isp_write(unsigned char* buf, unsigned char addr_high, unsigned char addr_low, unsigned char len)
  88          {
  89   1        IFMT = 0x02;
  90   1        IFADRH = addr_high;
  91   1        do
  92   1        {
  93   2          IFADRL = addr_low;
  94   2          IFD = *buf;
  95   2          SCMD = 0x46;
  96   2          SCMD = 0xB9;
  97   2           
  98   2          buf++;
  99   2          addr_low++;
 100   2          if (addr_low == 0)
 101   2          {
 102   3             addr_high++;
 103   3             IFADRH = addr_high;
 104   3          }
 105   2          len--;
 106   2        }
 107   1        while (len != 0);
 108   1      }
 109          
 110          void isp_init(void)
 111          {
 112   1        ISPCR = 0x81;
 113   1      }
 114          
 115          void enter_isp(void)
 116          {
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 3   

 117   1              // Clear the magic mark
 118   1              unsigned char mark = 0x00;
 119   1              isp_init();
 120   1              isp_write(&mark, 0xEF, 0xFF, 1);
 121   1              ISPCR = 0x60;
 122   1      }
 123          
 124          
 125          BYTE mcuLib_ProtocolAppend(BYTE *pucBuf, BYTE * piLen, BYTE ucByte) {
 126   1          if (ucByte == 0x7E || ucByte == 0x7D) {
 127   2              pucBuf[*piLen] = 0x7D;
 128   2              (*piLen)++;
 129   2              pucBuf[*piLen] = 0x50 | (ucByte & 0x0F);
 130   2              (*piLen)++;
 131   2          } else {
 132   2              pucBuf[*piLen] = ucByte;
 133   2              (*piLen)++;
 134   2          }
 135   1          return 0;
 136   1      }
 137          
 138          BYTE mcuLib_ProtocolSendCmdWithParamNum(BYTE ucType, BYTE* pucParam, BYTE ucSize) {
 139   1          BYTE ucChecksum = 0;
 140   1          BYTE pucBuf[16];
 141   1          BYTE iLen;
 142   1          BYTE i;
 143   1         
 144   1          pucBuf[0] = 0x7E;
 145   1          iLen = 1;
 146   1          ucChecksum ^= ucType;
 147   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucType);
 148   1          ucChecksum ^= ucSize;
 149   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucSize);
 150   1      
 151   1          for (i = 0; i < ucSize; i++) {
 152   2              ucChecksum ^= pucParam[i];
 153   2              mcuLib_ProtocolAppend(pucBuf, &iLen, pucParam[i]);
 154   2          }
 155   1      
 156   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucChecksum);
 157   1      
 158   1        for (i = 0; i < (iLen); i++) {
 159   2            RS2_tx(pucBuf[i]);
 160   2          }
 161   1      
 162   1        
 163   1          return 0;
 164   1      }
 165          
 166          
 167          void MCU_SendCmdToDVR(BYTE ucType)
 168          {
 169   1        BYTE buf[7]={0,0,0,0,0,0,0};
 170   1        WORD val;
 171   1        DWORD encoder;
 172   1      switch(ucType)
 173   1      {
 174   2        case MCU_PROTOCOL_CMD_REPLY_MCU_FW: //Reply MCU firmware version
 175   2          buf[0]=ReadEEP(EEP_FWREV_MAJOR);      //FWVER
 176   2          buf[1]=ReadEEP(EEP_FWREV_MINOR1);
 177   2          buf[2]=ReadEEP(EEP_FWREV_MINOR2);
 178   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_REPLY_MCU_FW,buf,3);  
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 4   

 179   2          break;
 180   2      
 181   2        case MCU_PROTOCOL_CMD_REGULAR_DATA:     //Regular data
 182   2      
 183   2        //val=(((GET_BATTERY_CAPACITY()*32)/10000)*100)+(((GET_BATTERY_CAPACITY()*32)%10000)/100);
 184   2        //val=(val*54)/100;
 185   2        #if 1
 186   2        val=((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_B
             -ATTERY_CAPACITY()*59)/*-800*/)/100));
 187   2      
 188   2          if((val/1000))
 189   2          val=(val/10)+1;
 190   2          else 
 191   2          val=(val/10);
 192   2      /*
 193   2           if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)
 194   2          val=121;  
 195   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL1)
 196   2          val=127;  
 197   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL2)
 198   2          val=132;
 199   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL3)
 200   2          val=146;  
 201   2        else   if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL4)  
 202   2          val=155;
 203   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)
 204   2          val=115;  
 205   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)
 206   2          val=160;  
 207   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX_STOP)
 208   2          val=164;
 209   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_NO_STARTUP)
 210   2          val=117;
 211   2        else   if(GET_BATTERY_STATE()==_BATT_STATUS_NO_BATT)  
 212   2          val=0;
 213   2      */
 214   2      
 215   2        #else
                val=((((GET_BATTERY_CAPACITY()*(32+1))/*-800*/)/10000)*100)+((((GET_BATTERY_CAPACITY()*(32+1))/*-800*/)%1
             -0000)/100);
                val=(val*(54+1))/100;
                #endif
 219   2          
 220   2          #if 1
 221   2          buf[0]=val;         ///battery info.
 222   2          #else
                  buf[0]=GET_BATTERY_STATE();         ///abttery info.
                  #endif
 225   2          #if 0//for test
                  
                    buf[2]=(BatteryVoltage>>8);
                    
                    buf[3]=(BatteryVoltage&0xff);
              
                  #else
 232   2          buf[2]=(BatteryBTH>>8);
 233   2      
 234   2          buf[3]=(BatteryBTH&0xff);
 235   2          #endif
 236   2          buf[4]=((EncorderLenint/10)<<4)|(EncorderLenint%10);   
 237   2      
 238   2          #if (_2ND_DECIMAL==ON)//ryan@20200505
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 5   

 239   2          buf[5]=((EncorderLenfloaat/10)<<4)|(EncorderLenfloaat%10);
 240   2          #else
                  buf[5]=(EncorderLenfloaat<<4);
                  #endif
 243   2          buf[6]=EncorderCountPN;
 244   2      
 245   2          if(GET_AC_PLUG()==_TRUE)
 246   2          buf[1]|=0x01;
 247   2      
 248   2          if(GET_BTH_STATE()==_BATT_STATUS_TEMP_HIGH)
 249   2          buf[1]|=0x02;
 250   2          
 251   2          if(GET_BTH_STATE()==_BATT_STATUS_TEMP_LOW)
 252   2          buf[1]|=0x04;
 253   2      
 254   2          if(GET_NO_BATTERY()==_TRUE)
 255   2          buf[1]|=0x08;
 256   2      
 257   2          if(GET_BATTERY_ABNORMAL()==_TRUE)
 258   2          buf[1]|=0x10;
 259   2          
 260   2          if(GET_BATTERY_HIGH_TMEP_WARN()==_TRUE)
 261   2          buf[1]|=0x20;
 262   2          
 263   2          if(GET_BATTERY_LOW_TMEP_WARN()==_TRUE)
 264   2          buf[1]|=0x40;
 265   2      
 266   2          if(((GET_STAT1()==OFF)&&(GET_STAT2()==ON)&&(BatteryBTH>90))&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&
             -&( GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)&&(GET_NO_BATTERY()==_FALSE))///charg
             -ing
 267   2          buf[1]|=0x80;
 268   2      
 269   2          
 270   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_REGULAR_DATA,buf,7);                        
 271   2          break;
 272   2      
 273   2        case MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN:    //system shutdown
 274   2          if(GET_AC_PLUG_OUT()==_TRUE)      
 275   2            {
 276   3            buf[0]=1; 
 277   3            CLR_AC_PLUG_OUT();  
 278   3            #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                    GraphicsPrint(RED,"\r\n(AC_PLUG_OUT)");
                    #endif  
 281   3            }
 282   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN,buf,1);                     
 283   2          break;
 284   2      
 285   2        case MCU_PROTOCOL_CMD_ENTRY_FACTORY:  //Entry factory mode
 286   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_ENTRY_FACTORY,buf,1); 
 287   2          break;
 288   2      
 289   2        case MCU_PROTOCOL_CMD_SLEEP_WAKE_UP:
 290   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_SLEEP_WAKE_UP,buf,1); 
 291   2          break;
 292   2        case MCU_PROTOCOL_CMD_REPLY_ENCODER_COUNT:
 293   2          encoder=ulongRotateNumber;
 294   2          
 295   2          buf[0]=encoder/100000;
 296   2          buf[0]<<=4;
 297   2          encoder%=100000;
 298   2          buf[0]|=encoder/10000;
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 6   

 299   2          encoder%=10000;
 300   2          
 301   2          buf[1]=encoder/1000;    
 302   2          buf[1]<<=4; 
 303   2          encoder%=1000;    
 304   2          buf[1]|=encoder/100;
 305   2          encoder%=100;
 306   2          
 307   2          buf[2]=encoder/10;    
 308   2          buf[2]<<=4; 
 309   2          encoder%=10;    
 310   2          buf[2]|=encoder;
 311   2      
 312   2            #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
                    GraphicsPrint(RED,"(ulongRotateNumber=%d)",(WORD)ulongRotateNumber);
                    #endif  
 315   2            
 316   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_REPLY_ENCODER_COUNT,buf,3); 
 317   2          break;
 318   2      default:
 319   2        break;
 320   2          
 321   2      }
 322   1        
 323   1      }
 324          
 325          
 326          void InitialTimerEvent(void)
 327          {
 328   1        MCUTimerInitialTimerEvent();  //clear all of timer event  
 329   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_FIRST_GET_BATT_BTH_STATE);
 330   1            MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
 331   1        MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);
 332   1          MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
 333   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_GRN_BLINK);
 334   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE);
 335   1        MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 336   1        MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE);  //check charge
 337   1        SET_AC_PLUG();
 338   1      
 339   1      #if(_DEBUG_MESSAGE_WORKING_TIME == ON)
                MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);
              #endif
 342   1      
 343   1      }
 344          
 345          BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 346                                           int * toValue, CODE_P struct RegisterInfo *toRange ){
 347   1      
 348   1        // calculate intermediate values
 349   1        int a;
 350   1        int b;
 351   1      
 352   1        // perform mapping
 353   1        if ( fromValue <= fromRange->Default ) {
 354   2          a = toRange->Default - toRange->Min;
 355   2          b = fromRange->Default - fromRange->Min;
 356   2          // prevent divide by zero
 357   2          if( b==0 )    return (FALSE);
 358   2          *toValue = (int) ( (DWORD)fromValue- (DWORD)fromRange->Min ) * a / b 
 359   2                  +(DWORD)toRange->Min;
 360   2        }
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 7   

 361   1        else {
 362   2          a = toRange->Max - toRange->Default;
 363   2          b = fromRange->Max - fromRange->Default;
 364   2          // prevent divide by zero
 365   2          if( b==0 )    return (FALSE);
 366   2              *toValue = (int) ( (DWORD)fromValue - (DWORD)fromRange->Default ) * a / b
 367   2                             + (DWORD)toRange->Default;
 368   2        }
 369   1      
 370   1        return ( TRUE );
 371   1         
 372   1      }
 373          
 374          void SetAD5110Step(BYTE newv) 
 375          {
 376   1      
 377   1        int regv;
 378   1      
 379   1        Mapping1( newv, &UserRange , &regv, &AD5110Range);
 380   1        WriteAD5110(AD5110_CMD_Write_Data_To_RDAC ,AD5110_setp[regv]);
 381   1                  
 382   1      }
 383          
 384          DWORD GetRotateNumber(void)
 385          {
 386   1        DWORD ret=0;
 387   1      
 388   1        if(bytFastEncoderMode==ON)
 389   1        {
 390   2          ret=ReadEEP(EEP_RotateNumberH);
 391   2          ret<<=8;
 392   2          
 393   2          ret|=ReadEEP(EEP_RotateNumberM);
 394   2          ret<<=8;  
 395   2      
 396   2          ret|=ReadEEP(EEP_RotateNumberL);
 397   2      
 398   2          #if(_DEBUG_EncorderHandler==ON)
                  Printf("\r\nGetRotateNumber=%02x%04x",(WORD)(ret>>16),(WORD)ret);
                  #endif
 401   2        }
 402   1        else
 403   1        {
 404   2          ret=ReadEEP(EEP_RotateNumberRH);
 405   2          ret<<=8;
 406   2          
 407   2          ret|=ReadEEP(EEP_RotateNumberRM);
 408   2          ret<<=8;  
 409   2      
 410   2          ret|=ReadEEP(EEP_RotateNumberRL);
 411   2      
 412   2          #if(_DEBUG_EncorderHandler==ON)
                  Printf("\r\nGetRotateNumberREX=%02x%04x",(WORD)(ret>>16),(WORD)ret);
                #endif
 415   2      
 416   2        }
 417   1      
 418   1        
 419   1        return ret;
 420   1      }
 421          
 422          void SaveRotateNumber(DWORD val)
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 8   

 423          {
 424   1        DWORD temp=0;
 425   1      
 426   1        if(bytFastEncoderMode==ON)
 427   1          {
 428   2      
 429   2        temp=ReadEEP(EEP_RotateNumberH);
 430   2        temp<<=8;
 431   2        temp|=ReadEEP(EEP_RotateNumberM);
 432   2        temp<<=8; 
 433   2        temp|=ReadEEP(EEP_RotateNumberL);
 434   2      
 435   2        if(temp!=val)
 436   2        { 
 437   3      
 438   3        if(val>999999)
 439   3          {
 440   4          val-=999999 ;///>99999 clean to 0
 441   4      
 442   4          #if(_DEBUG_EncorderHandler==ON)
                  Printf("\r\nSaveRotateNumber>999999");
                  #endif
 445   4          }
 446   3        WriteEEP(EEP_RotateNumberL,(val&0xff));
 447   3        val>>=8;
 448   3        WriteEEP(EEP_RotateNumberM,(val&0xff));
 449   3        val>>=8;
 450   3        WriteEEP(EEP_RotateNumberH,(val&0xff));
 451   3      
 452   3        #if(_DEBUG_EncorderHandler==ON)
                Printf("\r\nSaveRotateNumber=%d",(WORD)val);
                #endif
 455   3        }
 456   2          }
 457   1        else
 458   1          {
 459   2          temp=ReadEEP(EEP_RotateNumberRH);
 460   2          temp<<=8;
 461   2          temp|=ReadEEP(EEP_RotateNumberRM);
 462   2          temp<<=8; 
 463   2          temp|=ReadEEP(EEP_RotateNumberRL);
 464   2          
 465   2          if(temp!=val)
 466   2          { 
 467   3          
 468   3          if(val>999999)
 469   3            {
 470   4            val-=999999 ;///>99999 clean to 0
 471   4          
 472   4        #if(_DEBUG_EncorderHandler==ON)
                    Printf("\r\nSaveRotateNumberREX>999999");
                #endif
 475   4            }
 476   3          WriteEEP(EEP_RotateNumberRL,(val&0xff));
 477   3          val>>=8;
 478   3          WriteEEP(EEP_RotateNumberRM,(val&0xff));
 479   3          val>>=8;
 480   3          WriteEEP(EEP_RotateNumberRH,(val&0xff));
 481   3          
 482   3      #if(_DEBUG_EncorderHandler==ON)
                  Printf("\r\nSaveRotateNumberREX=%d",(WORD)val);
              #endif
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 9   

 485   3      
 486   3          }
 487   2      
 488   2        }
 489   1      }
 490          void  LoadEEPROM (void)
 491          {
 492   1         PowerFlag = ReadEEP(EEP_Powerflag);
 493   1         CameraVolt= ReadEEP(EEP_CameraVolt);
 494   1         PWR_START_flag= ReadEEP(EEP_DC12_PWR_START);
 495   1        PowerOffToOnFlag= ReadEEP(EEP_PowerOffToOnflag);
 496   1      
 497   1        Encorder1= ((ReadEEP(EEP_Encorder1)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder1));
 498   1        Decimal1= ((ReadEEP(EEP_Decimal1)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal1));
 499   1      
 500   1        Encorder2= ((ReadEEP(EEP_Encorder2)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder2));
 501   1        Decimal2= ((ReadEEP(EEP_Decimal2)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal2));
 502   1      
 503   1        Encorder3= ((ReadEEP(EEP_Encorder3)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder3));
 504   1        Decimal3= ((ReadEEP(EEP_Decimal3)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal3));
 505   1      
 506   1        Encorder4= ((ReadEEP(EEP_Encorder4)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder4));
 507   1        Decimal4= ((ReadEEP(EEP_Decimal4)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal4));
 508   1      
 509   1        if(bytFastEncoderMode==ON)
 510   1          {
 511   2        ulongRotateNumber=ReadEEP(EEP_RotateNumberH);
 512   2        ulongRotateNumber<<=8;
 513   2        ulongRotateNumber|=ReadEEP(EEP_RotateNumberM);  
 514   2        ulongRotateNumber<<=8;
 515   2        ulongRotateNumber|=ReadEEP(EEP_RotateNumberL);  
 516   2          }
 517   1        else
 518   1          {
 519   2          ulongRotateNumber=ReadEEP(EEP_RotateNumberRH);
 520   2          ulongRotateNumber<<=8;
 521   2          ulongRotateNumber|=ReadEEP(EEP_RotateNumberRM); 
 522   2          ulongRotateNumber<<=8;
 523   2          ulongRotateNumber|=ReadEEP(EEP_RotateNumberRL);
 524   2      
 525   2          }
 526   1        
 527   1        if(ReadEEP(EEP_LowBattery_Flag))
 528   1          SET_BATTERY_CAPACITY_LOW_FLAG();
 529   1      
 530   1        if(PWR_START_flag==ON)
 531   1        {
 532   2          if(PowerFlag==OFF)
 533   2          {
 534   3          WriteEEP(EEP_Powerflag,ON);
 535   3          PowerFlag=ON;
 536   3          }
 537   2          
 538   2          if(PowerOffToOnFlag==ON)
 539   2            {
 540   3            WriteEEP(EEP_PowerOffToOnflag,OFF);
 541   3            PowerOffToOnFlag=OFF;
 542   3            }
 543   2      
 544   2        } 
 545   1        else //PWR_START_flag==OFF
 546   1          {
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 10  

 547   2            
 548   2            if(PowerOffToOnFlag==ON)
 549   2            {
 550   3            WriteEEP(EEP_Powerflag,ON);
 551   3            PowerFlag=ON;
 552   3      
 553   3            
 554   3            WriteEEP(EEP_PowerOffToOnflag,OFF);
 555   3            PowerOffToOnFlag=OFF;
 556   3            }
 557   2            else if(PowerFlag==ON)
 558   2              {
 559   3              WriteEEP(EEP_Powerflag,OFF);
 560   3              PowerFlag=OFF;        
 561   3              }
 562   2          }
 563   1      
 564   1      }
 565          
 566          WORD GetADCValue(BYTE sel)
 567          {
 568   1          
 569   1      ADCTL=0x80|0x08|sel;  //start adc sampling
 570   1      
 571   1      while(ADCTL&0x08);  // printf("ADC is busying\r\n");  //wating for adc
 572   1      
 573   1      return (WORD)(((ADCVL&0x03) |(ADCV<<2))&0x03ff);
 574   1      
 575   1      }
 576          
 577          WORD GetBatteryBTH(void)
 578          {
 579   1      WORD max=0;
 580   1      max=GetADCValue(P16_BTH);
 581   1      //max=GetADCValue(P15_BTH);
 582   1      
 583   1      //max=850;
 584   1      
 585   1      return max;
 586   1      }
 587          
 588          WORD GetBatteryVoltage(void)
 589          {
 590   1      WORD max=0;
 591   1      max=GetADCValue(P17_BAT);
 592   1      
 593   1      //max=710;  //low
 594   1      //max=835;    //normal
 595   1      //max=900;  //full
 596   1      
 597   1      return max;
 598   1      }
 599          
 600          
 601          void EncorderHandler(void)
 602          {
 603   1      WORD EncorderCountTemp,temp_val;
 604   1      #if (HS_DEBUG==ON)
              WORD temp_EncorderCountTemp;
              #endif
 607   1      
 608   1      //BYTE param[4];
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 11  

 609   1      float EncorderParaTemp1,EncorderParaTemp2,EncorderParaTemp3,EncorderParaTemp4;
 610   1      float EncorderOffset1,EncorderOffset2,EncorderOffset3/*,EncorderOffset4*/;
 611   1        
 612   1        if(ChangeKey)
 613   1        { 
 614   2          #if (HS_DEBUG==ON)
                  Printf("\r\nEncorderCount=%d",(WORD)EncorderCount);
                  #endif
 617   2          //Printf("\r\nEncorderLen_Offset0=%d ",(WORD)EncorderLen_Offset);
 618   2          //Printf("\r\nEncorderCountPN0=%d ",(WORD)EncorderCountPN);
 619   2          #if 1//ryan@20200430
 620   2      //    EncorderParaTemp1=(Encorder1+(Decimal1))*0.01f;
 621   2      //    EncorderParaTemp2=(Encorder2+(Decimal2))*0.01f;
 622   2      //    EncorderParaTemp3=(Encorder3+(Decimal3))*0.01f;
 623   2      //    EncorderParaTemp4=(Encorder4+(Decimal4))*0.01f;
 624   2          EncorderParaTemp1=(Encorder1+(Decimal1*0.01));
 625   2          EncorderParaTemp2=(Encorder2+(Decimal2*0.01));
 626   2          EncorderParaTemp3=(Encorder3+(Decimal3*0.01));
 627   2          EncorderParaTemp4=(Encorder4+(Decimal4*0.01));
 628   2      
 629   2          #else
                  EncorderParaTemp1=(Encorder1)*0.01f;
                  EncorderParaTemp2=(Encorder2)*0.01f;
                  EncorderParaTemp3=(Encorder3)*0.01f;
                  EncorderParaTemp4=(Encorder4)*0.01f;
                  #endif
 635   2          //EncorderParaTemp1=(Encorder1*0.01f)+Decimal1;
 636   2          //EncorderParaTemp2=(Encorder2*0.01f)+Decimal2;
 637   2          //EncorderParaTemp3=(Encorder3*0.01f)+Decimal3;
 638   2          //EncorderParaTemp4=(Encorder4*0.01f)+Decimal4;
 639   2          
 640   2          #if 0
                  Printf("\r\nEncorder1=%d ",(WORD)Encorder1);
                  Printf("\r\nEncorder2=%d ",(WORD)Encorder2);
                  Printf("\r\nEncorder3=%d ",(WORD)Encorder3);
                  Printf("\r\nEncorder4=%d ",(WORD)Encorder4);
                  
                  Printf("\r\nEncorderParaTemp1=%d ",(WORD)(EncorderParaTemp1*100));
                  Printf("\r\nEncorderParaTemp2=%d ",(WORD)(EncorderParaTemp2*100));
                  Printf("\r\nEncorderParaTemp3=%d ",(WORD)(EncorderParaTemp3*100));
                  Printf("\r\nEncorderParaTemp4=%d ",(WORD)(EncorderParaTemp4*100));
                  #endif
 651   2          #if 0
                  EncorderOffset1=(30.625*EncorderParaTemp1*(240-EncorderLen_Offset))/1000;
                  EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240-EncorderLen_Offset))/1000;
                  EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450-EncorderLen_Offset)/1000);
                  //EncorderOffset4=EncorderOffset3+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(780-600)/1000);
                  #else
 657   2          
 658   2          EncorderOffset1=(30.625*EncorderParaTemp1*240)/1000;
 659   2          EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240))/1000;
 660   2          EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450)/1000);
 661   2          #endif
 662   2          #if 0
                  Printf("\r\nEncorderOffset1=%d ",(WORD)(EncorderOffset1*100));
                  Printf("\r\nEncorderOffset2=%d ",(WORD)(EncorderOffset2*100));
                  Printf("\r\nEncorderOffset3=%d ",(WORD)(EncorderOffset3*100));
                  #endif
 667   2          //Printf("\r\nEncorderOffset4=%d ",(WORD)(EncorderOffset4*100));
 668   2          
 669   2          if(EncorderCount>=0)
 670   2            {
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 12  

 671   3            EncorderCountPN=0;
 672   3            EncorderCountTemp=(EncorderCount/2);
 673   3            }
 674   2          else
 675   2            {
 676   3            EncorderCountPN=1;
 677   3            EncorderCountTemp=(0-EncorderCount)/2;
 678   3            }
 679   2          //EncorderCountTemp+=450;
 680   2          //EncorderCount
 681   2          #if 0
                  if(EncorderCount>=0)
                    EncorderCountPN=0;
                  else
                    EncorderCountPN=1;
                  #endif
 687   2          #if 0
                  if(EncorderCountTemp>EncorderLen_Offset)
                    {
                    EncorderCountPN=0;
                    temp_EncorderCountTemp=EncorderCountTemp-EncorderLen_Offset;
                    }
                  else
                    {
                    EncorderCountPN=1;
                    temp_EncorderCountTemp=EncorderLen_Offset-EncorderCountTemp;
                    }
                  #endif
 699   2          if(EncorderCountTemp<=240&&EncorderCountTemp>=0)
 700   2            {
 701   3            
 702   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                    Printf("\r\nEncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
                    Printf("\r\nEncorderCountPN=%d ",(WORD)EncorderCountPN);
                    #endif
 707   3            //if(EncorderCountPN==1)
 708   3            #if 0
                      EncorderLen=(30.625*EncorderParaTemp1*(temp_EncorderCountTemp))/1000;
                    #else
 711   3            EncorderLen=(30.625*EncorderParaTemp1*EncorderCountTemp)/1000;
 712   3            #endif
 713   3              //EncorderLen=(30.625*EncorderParaTemp1*(EncorderCountTemp-EncorderLen_Offset))/1000;
 714   3              
 715   3            //EncorderLen=(30.625*1*EncorderCountTemp)/1000;
 716   3            temp_val=30.625*EncorderParaTemp1*EncorderCountTemp;
 717   3            EncorderLenint=EncorderLen+0.05f;
 718   3            //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 719   3            //EncorderLenint=EncorderLen;   
 720   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 721   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 722   3            EncorderLenfloaat%=100;
 723   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 727   3            #if 0
                    Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                    Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                    Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);      
                    Printf("\r\ntemp_val=%d ",(WORD)temp_val);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 13  

                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
 735   3            }
 736   2          else if(EncorderCountTemp>240&&EncorderCountTemp<=450)
 737   2            {
 738   3        
 739   3            #if 0
                    EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(temp_EncorderCountTemp-(240-EncorderLen_Offset))
             -/1000);
                    #else
 742   3            EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(EncorderCountTemp-240)/1000);
 743   3            #endif
 744   3            
 745   3            #if (HS_DEBUG==ON)
                    Printf("\r\ntemp_EncorderCountTemp=%d ",(WORD)(temp_EncorderCountTemp-(240-EncorderLen_Offset)));
                    Printf("\r\nEncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
                    Printf("\r\ntemp_EncorderCountTemp=%d ",(WORD)temp_EncorderCountTemp);
                    Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                    //EncorderLen=7.35+(32.091*1*(EncorderCountTemp-240)/1000);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                    #endif
 753   3            EncorderLenint=EncorderLen+0.05f;     
 754   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
                    #endif
 757   3            //EncorderLenint=EncorderLen;
 758   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 759   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 760   3            EncorderLenfloaat%=100;
 761   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 765   3            
 766   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif      
 769   3            }
 770   2          #if 1
 771   2          else if(EncorderCountTemp>450&&EncorderCountTemp<=780)
 772   2            {
 773   3            #if 0
                    EncorderLen=EncorderOffset2+(33.504*1*(temp_EncorderCountTemp-(450-EncorderLen_Offset))/1000);
                    #else     
 776   3            EncorderLen=EncorderOffset2+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
 777   3            #endif
 778   3            
 779   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                    #endif
 782   3            
 783   3            EncorderLenint=EncorderLen+0.05f;
 784   3            //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 785   3            //EncorderLenint=EncorderLen;
 786   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 787   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 788   3            EncorderLenfloaat%=100;
 789   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 793   3            
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 14  

 794   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
 797   3            }
 798   2          #else
                  else if(EncorderCountTemp>450&&EncorderCountTemp<=600)
                    {
                    EncorderLen=14.089+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
                    //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
              
                    EncorderLenint=EncorderLen+0.05f;
                    //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                    //EncorderLenint=EncorderLen;
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    }   
                  else if(EncorderCountTemp>600&&EncorderCountTemp<=780)
                    {
                    EncorderLen=19.089+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(EncorderCountTemp-600)/1000);
                    //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
              
                    EncorderLenint=EncorderLen+0.05f;
                    //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                    //EncorderLenint=EncorderLen;
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    }
                  #endif
 826   2          else if(EncorderCountTemp>780)
 827   2            {
 828   3            #if 0
                    EncorderLen=EncorderOffset3+(34.896*1*(EncorderCountTemp-(780-EncorderLen_Offset))/1000);
                    #else
 831   3            EncorderLen=EncorderOffset3+(34.896*EncorderParaTemp4*(EncorderCountTemp-780)/1000);
 832   3            #endif
 833   3      
 834   3            #if (HS_DEBUG==ON)  
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
              
                    Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                    #endif
 839   3            EncorderLenint=EncorderLen+0.05f;
 840   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
                    #endif
 843   3            //EncorderLenint=EncorderLen;
 844   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 845   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 846   3            #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
 849   3            EncorderLenfloaat%=100;
 850   3            #if (HS_DEBUG==ON)    
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
 853   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    #if (HS_DEBUG==ON)
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 15  

                    Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
                    EncorderLenfloaat%=10;      
                    #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
                    #endif      
 863   3            }
 864   2            
 865   2          ChangeKey=0;
 866   2          //param[0]=EncorderLenint;
 867   2          //param[1]=EncorderLenfloaat;
 868   2          //param[2]=EncorderCountPN;
 869   2          //protocol_send_cmd_with_param_num(0x0a, (BYTE *)param, 3);
 870   2          //protocol_send_cmd_with_param_num(0x80, (BYTE *)param, 3);
 871   2           if(GET_DVR_SystemReadyNotic()==_TRUE)
 872   2            {
 873   3           MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
 874   3            MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 875   3            MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 876   3            }
 877   2          #if (_DEBUG_EncorderHandler==ON)//ryan@20200505
                  Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
                  Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                  #endif
 881   2        }
 882   1        //GetKey(0);
 883   1      }
 884          
 885            void EncorderHandler_TELI(void)
 886            {
 887   1        WORD EncorderCountTemp,temp_val;
 888   1      #if (HS_DEBUG==ON)
                WORD temp_EncorderCountTemp;
              #endif
 891   1        short EncorderCount_T;
 892   1        
 893   1        //BYTE param[4];
 894   1        float EncorderParaTemp1,EncorderParaTemp2,EncorderParaTemp3,EncorderParaTemp4;
 895   1        float EncorderOffset1,EncorderOffset2,EncorderOffset3/*,EncorderOffset4*/;
 896   1      
 897   1        
 898   1            
 899   1          if(ChangeKey)
 900   1          { 
 901   2      
 902   2            EncorderCount_T=(EncorderCount)/6.6;
 903   2            
 904   2          #if (HS_DEBUG==ON)
                    Printf("\r\n(TELI)EncorderCount_T=%d",(WORD)((EncorderCount_T)));
                    Printf("\r\nGetRotateNumber=%01x%04x",(WORD)(ulongRotateNumber>>16),(WORD)ulongRotateNumber);     
                  #endif
 908   2            //Printf("\r\nEncorderLen_Offset0=%d ",(WORD)EncorderLen_Offset);
 909   2            //Printf("\r\nEncorderCountPN0=%d ",(WORD)EncorderCountPN);
 910   2          #if 1//ryan@20200430
 911   2        //    EncorderParaTemp1=(Encorder1+(Decimal1))*0.01f;
 912   2        //    EncorderParaTemp2=(Encorder2+(Decimal2))*0.01f;
 913   2        //    EncorderParaTemp3=(Encorder3+(Decimal3))*0.01f;
 914   2        //    EncorderParaTemp4=(Encorder4+(Decimal4))*0.01f;
 915   2            EncorderParaTemp1=(Encorder1+(Decimal1*0.01));
 916   2            EncorderParaTemp2=(Encorder2+(Decimal2*0.01));
 917   2            EncorderParaTemp3=(Encorder3+(Decimal3*0.01));
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 16  

 918   2            EncorderParaTemp4=(Encorder4+(Decimal4*0.01));
 919   2        
 920   2          #else
                    EncorderParaTemp1=(Encorder1)*0.01f;
                    EncorderParaTemp2=(Encorder2)*0.01f;
                    EncorderParaTemp3=(Encorder3)*0.01f;
                    EncorderParaTemp4=(Encorder4)*0.01f;
                  #endif
 926   2            //EncorderParaTemp1=(Encorder1*0.01f)+Decimal1;
 927   2            //EncorderParaTemp2=(Encorder2*0.01f)+Decimal2;
 928   2            //EncorderParaTemp3=(Encorder3*0.01f)+Decimal3;
 929   2            //EncorderParaTemp4=(Encorder4*0.01f)+Decimal4;
 930   2            
 931   2          #if 0
                    Printf("\r\nEncorder1=%d ",(WORD)Encorder1);
                    Printf("\r\nEncorder2=%d ",(WORD)Encorder2);
                    Printf("\r\nEncorder3=%d ",(WORD)Encorder3);
                    Printf("\r\nEncorder4=%d ",(WORD)Encorder4);
                    
                    Printf("\r\nEncorderParaTemp1=%d ",(WORD)(EncorderParaTemp1*100));
                    Printf("\r\nEncorderParaTemp2=%d ",(WORD)(EncorderParaTemp2*100));
                    Printf("\r\nEncorderParaTemp3=%d ",(WORD)(EncorderParaTemp3*100));
                    Printf("\r\nEncorderParaTemp4=%d ",(WORD)(EncorderParaTemp4*100));
                  #endif
 942   2          #if 0
                    EncorderOffset1=(30.625*EncorderParaTemp1*(240-EncorderLen_Offset))/1000;
                    EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240-EncorderLen_Offset))/1000;
                    EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450-EncorderLen_Offset)/1000);
                    //EncorderOffset4=EncorderOffset3+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(780-600)/1000);
                  #else
 948   2            
 949   2            EncorderOffset1=(30.625*EncorderParaTemp1*240)/1000;
 950   2            EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240))/1000;
 951   2            EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450)/1000);
 952   2          #endif
 953   2          #if 0
                    Printf("\r\nEncorderOffset1=%d ",(WORD)(EncorderOffset1*100));
                    Printf("\r\nEncorderOffset2=%d ",(WORD)(EncorderOffset2*100));
                    Printf("\r\nEncorderOffset3=%d ",(WORD)(EncorderOffset3*100));
                  #endif
 958   2            //Printf("\r\nEncorderOffset4=%d ",(WORD)(EncorderOffset4*100));
 959   2            
 960   2            if(EncorderCount_T>=0)
 961   2              {
 962   3              EncorderCountPN=0;
 963   3              EncorderCountTemp=(EncorderCount_T/2);
 964   3              }
 965   2            else
 966   2              {
 967   3              EncorderCountPN=1;
 968   3              EncorderCountTemp=(0-EncorderCount_T)/2;
 969   3              }
 970   2            
 971   2            //EncorderCountTemp+=450;
 972   2            //EncorderCount
 973   2          #if 0
                    if(EncorderCount>=0)
                      EncorderCountPN=0;
                    else
                      EncorderCountPN=1;
                  #endif
 979   2          #if 0
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 17  

                    if(EncorderCountTemp>EncorderLen_Offset)
                      {
                      EncorderCountPN=0;
                      temp_EncorderCountTemp=EncorderCountTemp-EncorderLen_Offset;
                      }
                    else
                      {
                      EncorderCountPN=1;
                      temp_EncorderCountTemp=EncorderLen_Offset-EncorderCountTemp;
                      }
                  #endif
 991   2            if(EncorderCountTemp<=240&&EncorderCountTemp>=0)
 992   2              {
 993   3              
 994   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                      Printf("\r\n(TELI)EncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
                      Printf("\r\n(TELI)EncorderCountPN=%d ",(WORD)EncorderCountPN);
                    #endif
 999   3              //if(EncorderCountPN==1)
1000   3            #if 0
                        EncorderLen=(30.625*EncorderParaTemp1*(temp_EncorderCountTemp))/1000;
                    #else
1003   3              EncorderLen=(30.625*EncorderParaTemp1*EncorderCountTemp)/1000;
1004   3            #endif
1005   3                //EncorderLen=(30.625*EncorderParaTemp1*(EncorderCountTemp-EncorderLen_Offset))/1000;
1006   3                
1007   3              //EncorderLen=(30.625*1*EncorderCountTemp)/1000;
1008   3              temp_val=30.625*EncorderParaTemp1*EncorderCountTemp;
1009   3              EncorderLenint=EncorderLen+0.05f;
1010   3              //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
1011   3              //EncorderLenint=EncorderLen;   
1012   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1013   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
1014   3              EncorderLenfloaat%=100;
1015   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
1019   3            #if 0
                      Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                      Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                      Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);      
                      Printf("\r\ntemp_val=%d ",(WORD)temp_val);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
1027   3              }
1028   2            else if(EncorderCountTemp>240&&EncorderCountTemp<=450)
1029   2              {
1030   3          
1031   3            #if 0
                      EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(temp_EncorderCountTemp-(240-EncorderLen_Offset)
             -)/1000);
                    #else
1034   3              EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(EncorderCountTemp-240)/1000);
1035   3            #endif
1036   3              
1037   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)temp_EncorderCountTemp=%d ",(WORD)(temp_EncorderCountTemp-(240-EncorderLen_Offset)))
             -;
                      Printf("\r\n(TELI)EncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 18  

                      Printf("\r\n(TELI)temp_EncorderCountTemp=%d ",(WORD)temp_EncorderCountTemp);
                      Printf("\r\n(TELI)EncorderLen=%d ",(WORD)EncorderLen);
                      //EncorderLen=7.35+(32.091*1*(EncorderCountTemp-240)/1000);
                      Printf("\r\n(TELI)EncorderCount_T=%d ",(WORD)EncorderCount_T);
                    #endif
1045   3              EncorderLenint=EncorderLen+0.05f;     
1046   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
                    #endif
1049   3              //EncorderLenint=EncorderLen;
1050   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1051   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
1052   3              EncorderLenfloaat%=100;
1053   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
1057   3              
1058   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif      
1061   3              }
1062   2          #if 1
1063   2            else if(EncorderCountTemp>450&&EncorderCountTemp<=780)
1064   2              {
1065   3            #if 0
                      EncorderLen=EncorderOffset2+(33.504*1*(temp_EncorderCountTemp-(450-EncorderLen_Offset))/1000);
                    #else     
1068   3              EncorderLen=EncorderOffset2+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
1069   3            #endif
1070   3              
1071   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderCount_T=%d ",(WORD)EncorderCount_T);
                    #endif
1074   3              
1075   3              EncorderLenint=EncorderLen+0.05f;
1076   3              //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
1077   3              //EncorderLenint=EncorderLen;
1078   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1079   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
1080   3              EncorderLenfloaat%=100;
1081   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
1085   3              
1086   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
1089   3              }
1090   2          #else
                    else if(EncorderCountTemp>450&&EncorderCountTemp<=600)
                      {
                      EncorderLen=14.089+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
                      //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                
                      EncorderLenint=EncorderLen+0.05f;
                      //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                      //EncorderLenint=EncorderLen;
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 19  

                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                      }   
                    else if(EncorderCountTemp>600&&EncorderCountTemp<=780)
                      {
                      EncorderLen=19.089+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(EncorderCountTemp-600)/1000);
                      //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                
                      EncorderLenint=EncorderLen+0.05f;
                      //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                      //EncorderLenint=EncorderLen;
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                      }
                  #endif
1118   2            else if(EncorderCountTemp>780)
1119   2              {
1120   3            #if 0
                      EncorderLen=EncorderOffset3+(34.896*1*(EncorderCountTemp-(780-EncorderLen_Offset))/1000);
                    #else
1123   3              EncorderLen=EncorderOffset3+(34.896*EncorderParaTemp4*(EncorderCountTemp-780)/1000);
1124   3            #endif
1125   3        
1126   3            #if (HS_DEBUG==ON)  
                      Printf("\r\n(TELI)EncorderCount_T=%d ",(WORD)EncorderCount_T);
                
                      Printf("\r\n(TELI)EncorderLen=%d ",(WORD)EncorderLen);
                    #endif
1131   3              EncorderLenint=EncorderLen+0.05f;
1132   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
                    #endif
1135   3              //EncorderLenint=EncorderLen;
1136   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1137   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
1138   3            #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
1141   3              EncorderLenfloaat%=100;
1142   3            #if (HS_DEBUG==ON)    
                      Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
1145   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                    #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
                      EncorderLenfloaat%=10;      
                    #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
                    #endif      
1155   3              }
1156   2              
1157   2            ChangeKey=0;
1158   2            //param[0]=EncorderLenint;
1159   2            //param[1]=EncorderLenfloaat;
1160   2            //param[2]=EncorderCountPN;
1161   2            //protocol_send_cmd_with_param_num(0x0a, (BYTE *)param, 3);
1162   2            //protocol_send_cmd_with_param_num(0x80, (BYTE *)param, 3);
1163   2             if(GET_DVR_SystemReadyNotic()==_TRUE)
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 20  

1164   2              {
1165   3             MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
1166   3              MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
1167   3              MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
1168   3              }
1169   2          #if (_DEBUG_EncorderHandler==ON)//ryan@20200505
                    Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
                    Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                  #endif
1173   2          }
1174   1          //GetKey(0);
1175   1        }
1176          
1177            //bit CCFL_status;  
1178          void main_loop(void)
1179          {
1180   1      
1181   1        Printf("\r\nStart Main Loop...");
1182   1      /*
1183   1        if(bytFastEncoderMode==ON)
1184   1          {
1185   1          ulongRotateNumber=GetRotateNumber();
1186   1          Printf("\r\n(TELI Mode)");
1187   1          }
1188   1        else  
1189   1          Printf("\r\n(REX Mode)");
1190   1      
1191   1          
1192   1        */
1193   1        ulongRotateNumber=GetRotateNumber();
1194   1        //---------------------------------------------------------------
1195   1        //                   Main Loop
1196   1        //---------------------------------------------------------------
1197   1        while(1) 
1198   1        {
1199   2      
1200   2          #if (_DEBUG_MESSAGE_Monitor==ON)
                  while( RS_ready() ) 
                    Monitor();        // for new monitor functions    
                  #endif      
1204   2      
1205   2          DvrReceivePaser();  
1206   2          SysTimerHandler();      
1207   2        //  SysJudgeHandler();  
1208   2          SysPowerHandler();  
1209   2          Scankey();
1210   2          
1211   2          if(bytFastEncoderMode==ON)
1212   2          EncorderHandler_TELI();
1213   2          else      
1214   2          EncorderHandler();
1215   2      
1216   2        
1217   2      
1218   2            if(PowerFlag==OFF)   //// POWEROFF
1219   2            break;
1220   2        
1221   2        }
1222   1      
1223   1      }
1224          
1225          void main(void)
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 21  

1226          {
1227   1      
1228   1      InitCPU();
1229   1      
1230   1      SysPowerInitial();
1231   1      
1232   1      Printf("\r\nStart Boot...");
1233   1      
1234   1      main_init();
1235   1      
1236   1      //set panel 
1237   1      //select UP
1238   1      SET_P_IO1();
1239   1      //Select Left
1240   1      SET_P_IO2();
1241   1      
1242   1      //variable initialize
1243   1      InitVars();
1244   1      
1245   1      //load eeprom data
1246   1      LoadEEPROM();
1247   1      
1248   1      //event initialize
1249   1      InitialTimerEvent();
1250   1      
1251   1      SetAD5110Step(CameraVolt);
1252   1       Printf("\r\n(CameraVolt=%d)",(WORD)CameraVolt);
1253   1      
1254   1      //if(PWR_START_flag==ON)
1255   1      //  PowerFlag=ON;
1256   1      
1257   1      if((GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)&&(Check_ADAP_IN()==_FALSE))
1258   1        PowerFlag=OFF;
1259   1      
1260   1        if(PowerFlag==ON)
1261   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1262   1      else
1263   1      {
1264   2        //UserInterfacePowerSwitch(_POWER_ACTION_AC_ON_TO_OFF);
1265   2        SET_POWER_STATUS(_POWER_STATUS_NORMAL); 
1266   2        SET_TARGET_POWER_STATUS(_POWER_STATUS_OFF);
1267   2        
1268   2      }
1269   1        RepeatKey=OFF;  
1270   1      //   SysJudgeStateChangeEvent(_MODE_STATUS_POWER_OFF);    
1271   1      
1272   1        while(1) {
1273   2          if(PowerFlag==ON)
1274   2          main_loop();    //exit when power off
1275   2          
1276   2          WaitPowerOn();
1277   2        }
1278   1      }
1279          
1280          void WaitPowerOn(void)
1281          {
1282   1      
1283   1        Printf("\r\n(Going to power off...)");
1284   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_OFF);
1285   1      
1286   1        if(GET_DVR_EntrySleepMode()==TRUE)
1287   1          CLR_DVR_EntrySleepMode();
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 22  

1288   1      
1289   1        CLR_DVR_SystemReadyNotic(); 
1290   1        MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);    
1291   1        CLR_DVR_Shutdown();
1292   1        MCUTimerCancelTimerEvent( _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1293   1      
1294   1        //CLR_BATTERY_CAPACITY_HIGH_FLAG();
1295   1        Power_down_mode=_DontgoingToPD;
1296   1        P3M1=0x00;//p3.4 and P3.5 set output ryan@20210226
1297   1        bytHoldOn3SPowerOff=OFF;
1298   1      
1299   1        //if(bytFastEncoderMode==ON)
1300   1        SaveRotateNumber(ulongRotateNumber);
1301   1        
1302   1        while(1) 
1303   1        {
1304   2      
1305   2            
1306   2              #if (_DEBUG_MESSAGE_Monitor==ON)
                      while( RS_ready() ) 
                      Monitor();        // for new monitor functions    
                      #endif  
1310   2      
1311   2            SysPowerHandler();  
1312   2            SysTimerHandler();
1313   2            Scankey();
1314   2            
1315   2            if(PowerFlag==ON)   //// POWER-ON
1316   2            break;
1317   2      
1318   2            #if (_POWER_DOWN_ENABLE==ON)
1319   2      
1320   2            if((Power_down_mode==_DontgoingToPD)&&(GET_POWER_STATUS()==_POWER_STATUS_OFF)&&(GET_AC_PLUG()/*Check_AD
             -AP_IN()*/==_FALSE))
1321   2            {
1322   3            Power_down_mode=_ReadyToPD;
1323   3            MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_POWER_DOWN_MODE);
1324   3            } 
1325   2            else if((Check_ADAP_IN()==_TRUE)||(((~P4>>3)& 0x01) ))
1326   2              {
1327   3              Power_down_mode=_DontgoingToPD;
1328   3              MCUTimerCancelTimerEvent( _SYSTEM_TIMER_POWER_DOWN_MODE);
1329   3              }
1330   2            else  if(Power_down_mode==_GoingToPD)
1331   2              SET_MCU_POWER_DOWN_MODE();        
1332   2      
1333   2            #endif  
1334   2            
1335   2        }
1336   1      
1337   1      
1338   1        WriteEEP(EEP_PowerOffToOnflag,ON);
1339   1        EncorderCount=0;
1340   1        EncorderLenint=0;
1341   1        EncorderLenfloaat=0;
1342   1        EncorderCountPN=0;
1343   1         RS2_in=0; //clean DVR CMD.
1344   1        RS2_out=0;//clean DVR CMD.
1345   1        //CLR_BATTERY_CAPACITY_LOW_FLAG();  
1346   1              CLR_BATTERY_ABNORMAL();
1347   1        SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);
1348   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);  
C51 COMPILER V9.60.0.0   MAIN                                                              04/22/2021 09:18:52 PAGE 23  

1349   1        Printf("\r\n(Start up  Power On Mode...)");
1350   1      
1351   1        ISPCR = 0x20;/// reboot to AP.
1352   1      
1353   1      }
1354          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6601    ----
   CONSTANT SIZE    =    119    ----
   XDATA SIZE       =    117     144
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
