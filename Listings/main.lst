C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECTEXTE
                    -ND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  main.c                                                                    */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          
   9          
  10          #include <math.h>
  11          #include <stdio.h>
  12          
  13          #include "Config.h"
  14          
  15          #include "reg.h"
  16          #include "typedefs.h"
  17          #include "main.h"
  18          #include "i2c.h"
  19          #include "adc.h"
  20          #include "etc_eep.h"
  21          #include "Printf.h"
*** WARNING C320 IN LINE 44 OF .\Include\Printf.h: DEBUG is defined 
  22          #include "KeyRemo.h"
  23          #include "Monitor.h"
  24          #include "CPU.h"
  25          #include "HS_DVRProtocol.h"
  26          
  27          StructBatteryInfoType g_stBatteryInfo = {0};
  28          StructDVRInfoType g_stDVRInfo = {0};
  29          extern DATA  DWORD tic_Init_time;
  30          extern bit  AccessEnable;
  31          
  32          BYTE  PowerFlag;
  33          BYTE  CameraVolt;
  34          BYTE  PWR_START_flag;
  35          BYTE LowBatteryFlag;
  36          BYTE PowerOffToOnFlag;
  37          BYTE DVRChangeCurrent=0;
  38          BYTE Power_down_mode=_DontgoingToPD;
  39          BYTE bytFastEncoderMode=OFF;
  40          float EncorderLen=0;
  41          WORD EncorderLen_Offset=0;
  42          BYTE EncorderLenint=0,EncorderCountPN=0,EncorderCountPN_offset=0;
  43          WORD EncorderLenfloaat=0;
  44          //BYTE Encorder1=0.85,Encorder2=0.8,Encorder3=0.75,Encorder4=0.75;
  45          //float Encorder1=100,Encorder2=100,Encorder3=100,Encorder4=100;
  46          float Encorder1=1,Encorder2=1,Encorder3=1,Encorder4=1;
  47          float Decimal1=0,Decimal2=0,Decimal3=0,Decimal4=0;
  48          DWORD ulongRotateNumber=0;
  49            
  50          extern WORD BatteryBTH,BatteryVoltage;
  51          
  52          #if (_DEBUG_MESSAGE_BatteryBTH==ON)
  53          WORD BTH_Temp=250;
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 2   

  54          #endif
  55          #if (_DEBUG_MESSAGE_BatteryVoltage==ON)
  56          WORD Battery_Voltage_Temp  =835;
  57          #endif
  58          
  59          //extern BYTE FLASH_FLAG;
  60          //extern WORD LED_FLASH_COUNT;
  61          extern bit ChangeKey;
  62          extern short EncorderCount;
  63          
  64          extern  DATA  WORD  tic_pc;
  65          extern DATA BYTE  RS_in;
  66          extern DATA BYTE  RS2_in;
  67          extern DATA BYTE RS2_out;
  68          extern StructPowerInfoType idata g_stPowerInfo ;
  69          extern DATA WORD keytic;
  70          extern bit RepeatKey;
  71          extern BYTE IE_Temp;
  72          extern BYTE bytHoldOn3SPowerOff;
  73          
  74          struct RegisterInfo UserRange={0,40,21};
  75          struct RegisterInfo AD5110Range={0,40,21};
  76          
  77          BYTE  DebugLevel;
  78          
  79          ///AD5110 step voltage
  80          BYTE  AD5110_setp[]={0x05,0x06,0x08,0x0A,0x0B,0x0D,0x0F,0x10,0x12,0x14,\
  81                    0x16,0x18,0x1a,0x1c,0x1e,0x20,0x22,0x25,0x27,0x2a,\
  82                    0x2c,0x2f,0x32,0x35,0x38,0x3b,0x3e,0x42,0x45,0x48,\
  83                    0x4b,0x50,0x55,0x58,0x5d,0x61,0x66,0x6b,0x70,0x75,\
  84                    0x7a  };
  85          
  86          
  87          void isp_write(unsigned char* buf, unsigned char addr_high, unsigned char addr_low, unsigned char len)
  88          {
  89   1        IFMT = 0x02;
  90   1        IFADRH = addr_high;
  91   1        do
  92   1        {
  93   2          IFADRL = addr_low;
  94   2          IFD = *buf;
  95   2          SCMD = 0x46;
  96   2          SCMD = 0xB9;
  97   2           
  98   2          buf++;
  99   2          addr_low++;
 100   2          if (addr_low == 0)
 101   2          {
 102   3             addr_high++;
 103   3             IFADRH = addr_high;
 104   3          }
 105   2          len--;
 106   2        }
 107   1        while (len != 0);
 108   1      }
 109          
 110          void isp_init(void)
 111          {
 112   1        ISPCR = 0x81;
 113   1      }
 114          
 115          void enter_isp(void)
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 3   

 116          {
 117   1              // Clear the magic mark
 118   1              unsigned char mark = 0x00;
 119   1              isp_init();
 120   1              isp_write(&mark, 0xEF, 0xFF, 1);
 121   1              ISPCR = 0x60;
 122   1      }
 123          
 124          
 125          BYTE mcuLib_ProtocolAppend(BYTE *pucBuf, BYTE * piLen, BYTE ucByte) {
 126   1          if (ucByte == 0x7E || ucByte == 0x7D) {
 127   2              pucBuf[*piLen] = 0x7D;
 128   2              (*piLen)++;
 129   2              pucBuf[*piLen] = 0x50 | (ucByte & 0x0F);
 130   2              (*piLen)++;
 131   2          } else {
 132   2              pucBuf[*piLen] = ucByte;
 133   2              (*piLen)++;
 134   2          }
 135   1          return 0;
 136   1      }
 137          
 138          BYTE mcuLib_ProtocolSendCmdWithParamNum(BYTE ucType, BYTE* pucParam, BYTE ucSize) {
 139   1          BYTE ucChecksum = 0;
 140   1          BYTE pucBuf[16];
 141   1          BYTE iLen;
 142   1          BYTE i;
 143   1         
 144   1          pucBuf[0] = 0x7E;
 145   1          iLen = 1;
 146   1          ucChecksum ^= ucType;
 147   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucType);
 148   1          ucChecksum ^= ucSize;
 149   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucSize);
 150   1      
 151   1          for (i = 0; i < ucSize; i++) {
 152   2              ucChecksum ^= pucParam[i];
 153   2              mcuLib_ProtocolAppend(pucBuf, &iLen, pucParam[i]);
 154   2          }
 155   1      
 156   1          mcuLib_ProtocolAppend(pucBuf, &iLen, ucChecksum);
 157   1      
 158   1        for (i = 0; i < (iLen); i++) {
 159   2            RS2_tx(pucBuf[i]);
 160   2          }
 161   1      
 162   1        
 163   1          return 0;
 164   1      }
 165          
 166          
 167          void MCU_SendCmdToDVR(BYTE ucType)
 168          {
 169   1        BYTE buf[7]={0,0,0,0,0,0,0};
 170   1        WORD val;
 171   1        DWORD encoder;
 172   1      switch(ucType)
 173   1      {
 174   2        case MCU_PROTOCOL_CMD_REPLY_MCU_FW: //Reply MCU firmware version
 175   2          buf[0]=ReadEEP(EEP_FWREV_MAJOR);      //FWVER
 176   2          buf[1]=ReadEEP(EEP_FWREV_MINOR1);
 177   2          buf[2]=ReadEEP(EEP_FWREV_MINOR2);
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 4   

 178   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_REPLY_MCU_FW,buf,3);  
 179   2          break;
 180   2      
 181   2        case MCU_PROTOCOL_CMD_REGULAR_DATA:     //Regular data
 182   2      
 183   2        //val=(((GET_BATTERY_CAPACITY()*32)/10000)*100)+(((GET_BATTERY_CAPACITY()*32)%10000)/100);
 184   2        //val=(val*54)/100;
 185   2        #if 1
 186   2        val=((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_B
             -ATTERY_CAPACITY()*59)/*-800*/)/100));
 187   2      
 188   2          if((val/1000))
 189   2          val=(val/10)+1;
 190   2          else 
 191   2          val=(val/10);
 192   2      /*
 193   2           if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)
 194   2          val=121;  
 195   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL1)
 196   2          val=127;  
 197   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL2)
 198   2          val=132;
 199   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL3)
 200   2          val=146;  
 201   2        else   if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL4)  
 202   2          val=155;
 203   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)
 204   2          val=115;  
 205   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)
 206   2          val=160;  
 207   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX_STOP)
 208   2          val=164;
 209   2        else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_NO_STARTUP)
 210   2          val=117;
 211   2        else   if(GET_BATTERY_STATE()==_BATT_STATUS_NO_BATT)  
 212   2          val=0;
 213   2      */
 214   2      
 215   2        #else
                val=((((GET_BATTERY_CAPACITY()*(32+1))/*-800*/)/10000)*100)+((((GET_BATTERY_CAPACITY()*(32+1))/*-800*/)%1
             -0000)/100);
                val=(val*(54+1))/100;
                #endif
 219   2          
 220   2          #if 1
 221   2          buf[0]=val;         ///battery info.
 222   2          #else
                  buf[0]=GET_BATTERY_STATE();         ///abttery info.
                  #endif
 225   2          #if 0//for test
                  
                    buf[2]=(BatteryVoltage>>8);
                    
                    buf[3]=(BatteryVoltage&0xff);
              
                  #else
 232   2          buf[2]=(BatteryBTH>>8);
 233   2      
 234   2          buf[3]=(BatteryBTH&0xff);
 235   2          #endif
 236   2          buf[4]=((EncorderLenint/10)<<4)|(EncorderLenint%10);   
 237   2      
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 5   

 238   2          #if (_2ND_DECIMAL==ON)//ryan@20200505
 239   2          buf[5]=((EncorderLenfloaat/10)<<4)|(EncorderLenfloaat%10);
 240   2          #else
                  buf[5]=(EncorderLenfloaat<<4);
                  #endif
 243   2          buf[6]=EncorderCountPN;
 244   2      
 245   2          if(GET_AC_PLUG()==_TRUE)
 246   2          buf[1]|=0x01;
 247   2      
 248   2          if(GET_BTH_STATE()==_BATT_STATUS_TEMP_HIGH)
 249   2          buf[1]|=0x02;
 250   2          
 251   2          if(GET_BTH_STATE()==_BATT_STATUS_TEMP_LOW)
 252   2          buf[1]|=0x04;
 253   2      
 254   2          if(GET_NO_BATTERY()==_TRUE)
 255   2          buf[1]|=0x08;
 256   2      
 257   2          if(GET_BATTERY_ABNORMAL()==_TRUE)
 258   2          buf[1]|=0x10;
 259   2          
 260   2          if(GET_BATTERY_HIGH_TMEP_WARN()==_TRUE)
 261   2          buf[1]|=0x20;
 262   2          
 263   2          if(GET_BATTERY_LOW_TMEP_WARN()==_TRUE)
 264   2          buf[1]|=0x40;
 265   2      
 266   2          if(((GET_STAT1()==OFF)&&(GET_STAT2()==ON)&&(BatteryBTH>90))&&(GET_BATTERY_CAPACITY_HIGH_FLAG()==_FALSE)&
             -&( GET_BTH_STATE()==_BATT_STATUS_TEMP_NORMAL)&&(GET_CHARGE_TMEP_ABNORMAL()==_FALSE)&&(GET_NO_BATTERY()==_FALSE))///charg
             -ing
 267   2          buf[1]|=0x80;
 268   2      
 269   2          
 270   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_REGULAR_DATA,buf,7);                        
 271   2          break;
 272   2      
 273   2        case MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN:    //system shutdown
 274   2          if(GET_AC_PLUG_OUT()==_TRUE)      
 275   2            {
 276   3            buf[0]=1; 
 277   3            CLR_AC_PLUG_OUT();  
 278   3            #if(_DEBUG_MESSAGE_SysTimerEvent==ON)
 279   3            GraphicsPrint(RED,"\r\n(AC_PLUG_OUT)");
 280   3            #endif  
 281   3            }
 282   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_SYSTEM_SHUTDOWN,buf,1);                     
 283   2          break;
 284   2      
 285   2        case MCU_PROTOCOL_CMD_ENTRY_FACTORY:  //Entry factory mode
 286   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_ENTRY_FACTORY,buf,1); 
 287   2          break;
 288   2      
 289   2        case MCU_PROTOCOL_CMD_SLEEP_WAKE_UP:
 290   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_SLEEP_WAKE_UP,buf,1); 
 291   2          break;
 292   2        case MCU_PROTOCOL_CMD_GET_ENCODER_COUNT:
 293   2          encoder=ulongRotateNumber;
 294   2          
 295   2          buf[0]=encoder/100000;
 296   2          buf[0]<<=4;
 297   2          encoder%=100000;
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 6   

 298   2          buf[0]|=encoder/10000;
 299   2          encoder%=10000;
 300   2          
 301   2          buf[1]=encoder/1000;    
 302   2          buf[1]<<=4; 
 303   2          encoder%=1000;    
 304   2          buf[1]|=encoder/100;
 305   2          encoder%=100;
 306   2          
 307   2          buf[2]=encoder/10;    
 308   2          buf[2]<<=4; 
 309   2          encoder%=10;    
 310   2          buf[2]|=encoder;
 311   2            
 312   2          mcuLib_ProtocolSendCmdWithParamNum(MCU_PROTOCOL_CMD_GET_ENCODER_COUNT,buf,3); 
 313   2          break;
 314   2      default:
 315   2        break;
 316   2          
 317   2      }
 318   1        
 319   1      }
 320          
 321          
 322          void InitialTimerEvent(void)
 323          {
 324   1        MCUTimerInitialTimerEvent();  //clear all of timer event  
 325   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_FIRST_GET_BATT_BTH_STATE);
 326   1            MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_BATT_STATE);
 327   1        MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_JUDGE_AC_MODE);
 328   1          MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_BTH_STATE);
 329   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_GRN_BLINK);
 330   1        MCUTimerActiveTimerEvent(1, _SYSTEM_TIMER_EVENT_JUDGE_CHECK_AC_CABLE);
 331   1        MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 332   1        MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_CHECK_CHARGE_STATE);  //check charge
 333   1        SET_AC_PLUG();
 334   1      
 335   1      #if(_DEBUG_MESSAGE_WORKING_TIME == ON)
 336   1        MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_EVENT_SHOW_WORKING_TIMER);
 337   1      #endif
 338   1      
 339   1      }
 340          
 341          BYTE Mapping1( int fromValue, CODE_P struct RegisterInfo *fromRange,
 342                                           int * toValue, CODE_P struct RegisterInfo *toRange ){
 343   1      
 344   1        // calculate intermediate values
 345   1        int a;
 346   1        int b;
 347   1      
 348   1        // perform mapping
 349   1        if ( fromValue <= fromRange->Default ) {
 350   2          a = toRange->Default - toRange->Min;
 351   2          b = fromRange->Default - fromRange->Min;
 352   2          // prevent divide by zero
 353   2          if( b==0 )    return (FALSE);
 354   2          *toValue = (int) ( (DWORD)fromValue- (DWORD)fromRange->Min ) * a / b 
 355   2                  +(DWORD)toRange->Min;
 356   2        }
 357   1        else {
 358   2          a = toRange->Max - toRange->Default;
 359   2          b = fromRange->Max - fromRange->Default;
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 7   

 360   2          // prevent divide by zero
 361   2          if( b==0 )    return (FALSE);
 362   2              *toValue = (int) ( (DWORD)fromValue - (DWORD)fromRange->Default ) * a / b
 363   2                             + (DWORD)toRange->Default;
 364   2        }
 365   1      
 366   1        return ( TRUE );
 367   1         
 368   1      }
 369          
 370          void SetAD5110Step(BYTE newv) 
 371          {
 372   1      
 373   1        int regv;
 374   1      
 375   1        Mapping1( newv, &UserRange , &regv, &AD5110Range);
 376   1        WriteAD5110(AD5110_CMD_Write_Data_To_RDAC ,AD5110_setp[regv]);
 377   1                  
 378   1      }
 379          
 380          DWORD GetRotateNumber(void)
 381          {
 382   1        DWORD ret=0;
 383   1        ret=ReadEEP(EEP_RotateNumberH);
 384   1        ret<<=8;
 385   1        
 386   1        ret|=ReadEEP(EEP_RotateNumberM);
 387   1        ret<<=8;  
 388   1      
 389   1        ret|=ReadEEP(EEP_RotateNumberL);
 390   1      
 391   1        #if(_DEBUG_EncorderHandler==ON)
 392   1        Printf("\r\nGetRotateNumber=%02x%04x",(WORD)(ret>>16),(WORD)ret);
 393   1        #endif
 394   1      
 395   1        return ret;
 396   1      }
 397          
 398          void SaveRotateNumber(DWORD val)
 399          {
 400   1        DWORD temp=0;
 401   1      
 402   1        temp=ReadEEP(EEP_RotateNumberH);
 403   1        temp<<=8;
 404   1        temp|=ReadEEP(EEP_RotateNumberM);
 405   1        temp<<=8; 
 406   1        temp|=ReadEEP(EEP_RotateNumberL);
 407   1      
 408   1        if(temp!=val)
 409   1        { 
 410   2      
 411   2        if(val>999999)
 412   2          {
 413   3          val-=999999 ;///>99999 clean to 0
 414   3      
 415   3          #if(_DEBUG_EncorderHandler==ON)
 416   3          Printf("\r\nSaveRotateNumber>999999");
 417   3          #endif
 418   3          }
 419   2        WriteEEP(EEP_RotateNumberL,(val&0xff));
 420   2        val>>=8;
 421   2        WriteEEP(EEP_RotateNumberM,(val&0xff));
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 8   

 422   2        val>>=8;
 423   2        WriteEEP(EEP_RotateNumberH,(val&0xff));
 424   2      
 425   2        #if(_DEBUG_EncorderHandler==ON)
 426   2        Printf("\r\nSaveRotateNumber=%d",(WORD)val);
 427   2        #endif
 428   2        }
 429   1      
 430   1      }
 431          
 432          void  LoadEEPROM (void)
 433          {
 434   1         PowerFlag = ReadEEP(EEP_Powerflag);
 435   1         CameraVolt= ReadEEP(EEP_CameraVolt);
 436   1         PWR_START_flag= ReadEEP(EEP_DC12_PWR_START);
 437   1        PowerOffToOnFlag= ReadEEP(EEP_PowerOffToOnflag);
 438   1      
 439   1        Encorder1= ((ReadEEP(EEP_Encorder1)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder1));
 440   1        Decimal1= ((ReadEEP(EEP_Decimal1)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal1));
 441   1      
 442   1        Encorder2= ((ReadEEP(EEP_Encorder2)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder2));
 443   1        Decimal2= ((ReadEEP(EEP_Decimal2)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal2));
 444   1      
 445   1        Encorder3= ((ReadEEP(EEP_Encorder3)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder3));
 446   1        Decimal3= ((ReadEEP(EEP_Decimal3)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal3));
 447   1      
 448   1        Encorder4= ((ReadEEP(EEP_Encorder4)>>4)*10)+(0x0f&ReadEEP(EEP_Encorder4));
 449   1        Decimal4= ((ReadEEP(EEP_Decimal4)>>4)*10)+(0x0f&ReadEEP(EEP_Decimal4));
 450   1      
 451   1      
 452   1        ulongRotateNumber=ReadEEP(EEP_RotateNumberH);
 453   1        ulongRotateNumber<<=8;
 454   1        ulongRotateNumber|=ReadEEP(EEP_RotateNumberM);  
 455   1        ulongRotateNumber<<=8;
 456   1        ulongRotateNumber|=ReadEEP(EEP_RotateNumberL);  
 457   1      
 458   1        if(ReadEEP(EEP_LowBattery_Flag))
 459   1          SET_BATTERY_CAPACITY_LOW_FLAG();
 460   1      
 461   1        if(PWR_START_flag==ON)
 462   1        {
 463   2          if(PowerFlag==OFF)
 464   2          {
 465   3          WriteEEP(EEP_Powerflag,ON);
 466   3          PowerFlag=ON;
 467   3          }
 468   2          
 469   2          if(PowerOffToOnFlag==ON)
 470   2            {
 471   3            WriteEEP(EEP_PowerOffToOnflag,OFF);
 472   3            PowerOffToOnFlag=OFF;
 473   3            }
 474   2      
 475   2        } 
 476   1        else //PWR_START_flag==OFF
 477   1          {
 478   2            
 479   2            if(PowerOffToOnFlag==ON)
 480   2            {
 481   3            WriteEEP(EEP_Powerflag,ON);
 482   3            PowerFlag=ON;
 483   3      
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 9   

 484   3            
 485   3            WriteEEP(EEP_PowerOffToOnflag,OFF);
 486   3            PowerOffToOnFlag=OFF;
 487   3            }
 488   2            else if(PowerFlag==ON)
 489   2              {
 490   3              WriteEEP(EEP_Powerflag,OFF);
 491   3              PowerFlag=OFF;        
 492   3              }
 493   2          }
 494   1      
 495   1      }
 496          
 497          WORD GetADCValue(BYTE sel)
 498          {
 499   1          
 500   1      ADCTL=0x80|0x08|sel;  //start adc sampling
 501   1      
 502   1      while(ADCTL&0x08);  // printf("ADC is busying\r\n");  //wating for adc
 503   1      
 504   1      return (WORD)(((ADCVL&0x03) |(ADCV<<2))&0x03ff);
 505   1      
 506   1      }
 507          
 508          WORD GetBatteryBTH(void)
 509          {
 510   1      WORD max=0;
 511   1      max=GetADCValue(P16_BTH);
 512   1      //max=GetADCValue(P15_BTH);
 513   1      
 514   1      //max=850;
 515   1      
 516   1      return max;
 517   1      }
 518          
 519          WORD GetBatteryVoltage(void)
 520          {
 521   1      WORD max=0;
 522   1      max=GetADCValue(P17_BAT);
 523   1      
 524   1      //max=710;  //low
 525   1      //max=835;    //normal
 526   1      //max=900;  //full
 527   1      
 528   1      return max;
 529   1      }
 530          
 531          
 532          void EncorderHandler(void)
 533          {
 534   1      WORD EncorderCountTemp,temp_val;
 535   1      #if (HS_DEBUG==ON)
 536   1      WORD temp_EncorderCountTemp;
 537   1      #endif
 538   1      
 539   1      //BYTE param[4];
 540   1      float EncorderParaTemp1,EncorderParaTemp2,EncorderParaTemp3,EncorderParaTemp4;
 541   1      float EncorderOffset1,EncorderOffset2,EncorderOffset3/*,EncorderOffset4*/;
 542   1        
 543   1        if(ChangeKey)
 544   1        { 
 545   2          #if (HS_DEBUG==ON)
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 10  

 546   2          Printf("\r\nEncorderCount=%d",(WORD)EncorderCount);
 547   2          #endif
 548   2          //Printf("\r\nEncorderLen_Offset0=%d ",(WORD)EncorderLen_Offset);
 549   2          //Printf("\r\nEncorderCountPN0=%d ",(WORD)EncorderCountPN);
 550   2          #if 1//ryan@20200430
 551   2      //    EncorderParaTemp1=(Encorder1+(Decimal1))*0.01f;
 552   2      //    EncorderParaTemp2=(Encorder2+(Decimal2))*0.01f;
 553   2      //    EncorderParaTemp3=(Encorder3+(Decimal3))*0.01f;
 554   2      //    EncorderParaTemp4=(Encorder4+(Decimal4))*0.01f;
 555   2          EncorderParaTemp1=(Encorder1+(Decimal1*0.01));
 556   2          EncorderParaTemp2=(Encorder2+(Decimal2*0.01));
 557   2          EncorderParaTemp3=(Encorder3+(Decimal3*0.01));
 558   2          EncorderParaTemp4=(Encorder4+(Decimal4*0.01));
 559   2      
 560   2          #else
                  EncorderParaTemp1=(Encorder1)*0.01f;
                  EncorderParaTemp2=(Encorder2)*0.01f;
                  EncorderParaTemp3=(Encorder3)*0.01f;
                  EncorderParaTemp4=(Encorder4)*0.01f;
                  #endif
 566   2          //EncorderParaTemp1=(Encorder1*0.01f)+Decimal1;
 567   2          //EncorderParaTemp2=(Encorder2*0.01f)+Decimal2;
 568   2          //EncorderParaTemp3=(Encorder3*0.01f)+Decimal3;
 569   2          //EncorderParaTemp4=(Encorder4*0.01f)+Decimal4;
 570   2          
 571   2          #if 0
                  Printf("\r\nEncorder1=%d ",(WORD)Encorder1);
                  Printf("\r\nEncorder2=%d ",(WORD)Encorder2);
                  Printf("\r\nEncorder3=%d ",(WORD)Encorder3);
                  Printf("\r\nEncorder4=%d ",(WORD)Encorder4);
                  
                  Printf("\r\nEncorderParaTemp1=%d ",(WORD)(EncorderParaTemp1*100));
                  Printf("\r\nEncorderParaTemp2=%d ",(WORD)(EncorderParaTemp2*100));
                  Printf("\r\nEncorderParaTemp3=%d ",(WORD)(EncorderParaTemp3*100));
                  Printf("\r\nEncorderParaTemp4=%d ",(WORD)(EncorderParaTemp4*100));
                  #endif
 582   2          #if 0
                  EncorderOffset1=(30.625*EncorderParaTemp1*(240-EncorderLen_Offset))/1000;
                  EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240-EncorderLen_Offset))/1000;
                  EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450-EncorderLen_Offset)/1000);
                  //EncorderOffset4=EncorderOffset3+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(780-600)/1000);
                  #else
 588   2          
 589   2          EncorderOffset1=(30.625*EncorderParaTemp1*240)/1000;
 590   2          EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240))/1000;
 591   2          EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450)/1000);
 592   2          #endif
 593   2          #if 0
                  Printf("\r\nEncorderOffset1=%d ",(WORD)(EncorderOffset1*100));
                  Printf("\r\nEncorderOffset2=%d ",(WORD)(EncorderOffset2*100));
                  Printf("\r\nEncorderOffset3=%d ",(WORD)(EncorderOffset3*100));
                  #endif
 598   2          //Printf("\r\nEncorderOffset4=%d ",(WORD)(EncorderOffset4*100));
 599   2          
 600   2          if(EncorderCount>=0)
 601   2            {
 602   3            EncorderCountPN=0;
 603   3            EncorderCountTemp=(EncorderCount/2);
 604   3            }
 605   2          else
 606   2            {
 607   3            EncorderCountPN=1;
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 11  

 608   3            EncorderCountTemp=(0-EncorderCount)/2;
 609   3            }
 610   2          //EncorderCountTemp+=450;
 611   2          //EncorderCount
 612   2          #if 0
                  if(EncorderCount>=0)
                    EncorderCountPN=0;
                  else
                    EncorderCountPN=1;
                  #endif
 618   2          #if 0
                  if(EncorderCountTemp>EncorderLen_Offset)
                    {
                    EncorderCountPN=0;
                    temp_EncorderCountTemp=EncorderCountTemp-EncorderLen_Offset;
                    }
                  else
                    {
                    EncorderCountPN=1;
                    temp_EncorderCountTemp=EncorderLen_Offset-EncorderCountTemp;
                    }
                  #endif
 630   2          if(EncorderCountTemp<=240&&EncorderCountTemp>=0)
 631   2            {
 632   3            
 633   3            #if (HS_DEBUG==ON)
 634   3            Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
 635   3            Printf("\r\nEncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
 636   3            Printf("\r\nEncorderCountPN=%d ",(WORD)EncorderCountPN);
 637   3            #endif
 638   3            //if(EncorderCountPN==1)
 639   3            #if 0
                      EncorderLen=(30.625*EncorderParaTemp1*(temp_EncorderCountTemp))/1000;
                    #else
 642   3            EncorderLen=(30.625*EncorderParaTemp1*EncorderCountTemp)/1000;
 643   3            #endif
 644   3              //EncorderLen=(30.625*EncorderParaTemp1*(EncorderCountTemp-EncorderLen_Offset))/1000;
 645   3              
 646   3            //EncorderLen=(30.625*1*EncorderCountTemp)/1000;
 647   3            temp_val=30.625*EncorderParaTemp1*EncorderCountTemp;
 648   3            EncorderLenint=EncorderLen+0.05f;
 649   3            //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 650   3            //EncorderLenint=EncorderLen;   
 651   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 652   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 653   3            EncorderLenfloaat%=100;
 654   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 658   3            #if 0
                    Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                    Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                    Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);      
                    Printf("\r\ntemp_val=%d ",(WORD)temp_val);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
 666   3            }
 667   2          else if(EncorderCountTemp>240&&EncorderCountTemp<=450)
 668   2            {
 669   3        
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 12  

 670   3            #if 0
                    EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(temp_EncorderCountTemp-(240-EncorderLen_Offset))
             -/1000);
                    #else
 673   3            EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(EncorderCountTemp-240)/1000);
 674   3            #endif
 675   3            
 676   3            #if (HS_DEBUG==ON)
 677   3            Printf("\r\ntemp_EncorderCountTemp=%d ",(WORD)(temp_EncorderCountTemp-(240-EncorderLen_Offset)));
 678   3            Printf("\r\nEncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
 679   3            Printf("\r\ntemp_EncorderCountTemp=%d ",(WORD)temp_EncorderCountTemp);
 680   3            Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
 681   3            //EncorderLen=7.35+(32.091*1*(EncorderCountTemp-240)/1000);
 682   3            Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
 683   3            #endif
 684   3            EncorderLenint=EncorderLen+0.05f;     
 685   3            #if (HS_DEBUG==ON)
 686   3            Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
 687   3            #endif
 688   3            //EncorderLenint=EncorderLen;
 689   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 690   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 691   3            EncorderLenfloaat%=100;
 692   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 696   3            
 697   3            #if (HS_DEBUG==ON)
 698   3            Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
 699   3            #endif      
 700   3            }
 701   2          #if 1
 702   2          else if(EncorderCountTemp>450&&EncorderCountTemp<=780)
 703   2            {
 704   3            #if 0
                    EncorderLen=EncorderOffset2+(33.504*1*(temp_EncorderCountTemp-(450-EncorderLen_Offset))/1000);
                    #else     
 707   3            EncorderLen=EncorderOffset2+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
 708   3            #endif
 709   3            
 710   3            #if (HS_DEBUG==ON)
 711   3            Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
 712   3            #endif
 713   3            
 714   3            EncorderLenint=EncorderLen+0.05f;
 715   3            //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 716   3            //EncorderLenint=EncorderLen;
 717   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 718   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 719   3            EncorderLenfloaat%=100;
 720   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    #endif
 724   3            
 725   3            #if (HS_DEBUG==ON)
 726   3            Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
 727   3            #endif
 728   3            }
 729   2          #else
                  else if(EncorderCountTemp>450&&EncorderCountTemp<=600)
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 13  

                    {
                    EncorderLen=14.089+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
                    //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
              
                    EncorderLenint=EncorderLen+0.05f;
                    //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                    //EncorderLenint=EncorderLen;
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    }   
                  else if(EncorderCountTemp>600&&EncorderCountTemp<=780)
                    {
                    EncorderLen=19.089+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(EncorderCountTemp-600)/1000);
                    //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                    Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
              
                    EncorderLenint=EncorderLen+0.05f;
                    //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                    //EncorderLenint=EncorderLen;
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    EncorderLenfloaat%=10;
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    }
                  #endif
 757   2          else if(EncorderCountTemp>780)
 758   2            {
 759   3            #if 0
                    EncorderLen=EncorderOffset3+(34.896*1*(EncorderCountTemp-(780-EncorderLen_Offset))/1000);
                    #else
 762   3            EncorderLen=EncorderOffset3+(34.896*EncorderParaTemp4*(EncorderCountTemp-780)/1000);
 763   3            #endif
 764   3      
 765   3            #if (HS_DEBUG==ON)  
 766   3            Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
 767   3      
 768   3            Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
 769   3            #endif
 770   3            EncorderLenint=EncorderLen+0.05f;
 771   3            #if (HS_DEBUG==ON)
 772   3            Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
 773   3            #endif
 774   3            //EncorderLenint=EncorderLen;
 775   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 776   3            EncorderLenfloaat=(EncorderLen+0.05)*100;
 777   3            #if (HS_DEBUG==ON)
 778   3            Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
 779   3            #endif
 780   3            EncorderLenfloaat%=100;
 781   3            #if (HS_DEBUG==ON)    
 782   3            Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
 783   3            #endif
 784   3            #else
                    EncorderLenfloaat=(EncorderLen+0.05)*10;
                    #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
                    EncorderLenfloaat%=10;      
                    #if (HS_DEBUG==ON)
                    Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 14  

                    #endif      
 794   3            }
 795   2            
 796   2          ChangeKey=0;
 797   2          //param[0]=EncorderLenint;
 798   2          //param[1]=EncorderLenfloaat;
 799   2          //param[2]=EncorderCountPN;
 800   2          //protocol_send_cmd_with_param_num(0x0a, (BYTE *)param, 3);
 801   2          //protocol_send_cmd_with_param_num(0x80, (BYTE *)param, 3);
 802   2           if(GET_DVR_SystemReadyNotic()==_TRUE)
 803   2            {
 804   3           MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
 805   3            MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 806   3            MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
 807   3            }
 808   2          #if (_DEBUG_EncorderHandler==ON)//ryan@20200505
 809   2          Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);
 810   2          Printf("\r\nEncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
 811   2          #endif
 812   2        }
 813   1        //GetKey(0);
 814   1      }
 815          
 816            void EncorderHandler_TELI(void)
 817            {
 818   1        WORD EncorderCountTemp,temp_val;
 819   1      #if (HS_DEBUG==ON)
 820   1        WORD temp_EncorderCountTemp;
 821   1      #endif
 822   1        short EncorderCount_T;
 823   1        
 824   1        //BYTE param[4];
 825   1        float EncorderParaTemp1,EncorderParaTemp2,EncorderParaTemp3,EncorderParaTemp4;
 826   1        float EncorderOffset1,EncorderOffset2,EncorderOffset3/*,EncorderOffset4*/;
 827   1      
 828   1        
 829   1            
 830   1          if(ChangeKey)
 831   1          { 
 832   2      
 833   2            EncorderCount_T=(EncorderCount)/6.6;
 834   2            
 835   2          #if (HS_DEBUG==ON)
 836   2            Printf("\r\n(TELI)EncorderCount_T=%d",(WORD)((EncorderCount_T)));
 837   2            Printf("\r\nGetRotateNumber=%01x%04x",(WORD)(ulongRotateNumber>>16),(WORD)ulongRotateNumber);     
 838   2          #endif
 839   2            //Printf("\r\nEncorderLen_Offset0=%d ",(WORD)EncorderLen_Offset);
 840   2            //Printf("\r\nEncorderCountPN0=%d ",(WORD)EncorderCountPN);
 841   2          #if 1//ryan@20200430
 842   2        //    EncorderParaTemp1=(Encorder1+(Decimal1))*0.01f;
 843   2        //    EncorderParaTemp2=(Encorder2+(Decimal2))*0.01f;
 844   2        //    EncorderParaTemp3=(Encorder3+(Decimal3))*0.01f;
 845   2        //    EncorderParaTemp4=(Encorder4+(Decimal4))*0.01f;
 846   2            EncorderParaTemp1=(Encorder1+(Decimal1*0.01));
 847   2            EncorderParaTemp2=(Encorder2+(Decimal2*0.01));
 848   2            EncorderParaTemp3=(Encorder3+(Decimal3*0.01));
 849   2            EncorderParaTemp4=(Encorder4+(Decimal4*0.01));
 850   2        
 851   2          #else
                    EncorderParaTemp1=(Encorder1)*0.01f;
                    EncorderParaTemp2=(Encorder2)*0.01f;
                    EncorderParaTemp3=(Encorder3)*0.01f;
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 15  

                    EncorderParaTemp4=(Encorder4)*0.01f;
                  #endif
 857   2            //EncorderParaTemp1=(Encorder1*0.01f)+Decimal1;
 858   2            //EncorderParaTemp2=(Encorder2*0.01f)+Decimal2;
 859   2            //EncorderParaTemp3=(Encorder3*0.01f)+Decimal3;
 860   2            //EncorderParaTemp4=(Encorder4*0.01f)+Decimal4;
 861   2            
 862   2          #if 0
                    Printf("\r\nEncorder1=%d ",(WORD)Encorder1);
                    Printf("\r\nEncorder2=%d ",(WORD)Encorder2);
                    Printf("\r\nEncorder3=%d ",(WORD)Encorder3);
                    Printf("\r\nEncorder4=%d ",(WORD)Encorder4);
                    
                    Printf("\r\nEncorderParaTemp1=%d ",(WORD)(EncorderParaTemp1*100));
                    Printf("\r\nEncorderParaTemp2=%d ",(WORD)(EncorderParaTemp2*100));
                    Printf("\r\nEncorderParaTemp3=%d ",(WORD)(EncorderParaTemp3*100));
                    Printf("\r\nEncorderParaTemp4=%d ",(WORD)(EncorderParaTemp4*100));
                  #endif
 873   2          #if 0
                    EncorderOffset1=(30.625*EncorderParaTemp1*(240-EncorderLen_Offset))/1000;
                    EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240-EncorderLen_Offset))/1000;
                    EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450-EncorderLen_Offset)/1000);
                    //EncorderOffset4=EncorderOffset3+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(780-600)/1000);
                  #else
 879   2            
 880   2            EncorderOffset1=(30.625*EncorderParaTemp1*240)/1000;
 881   2            EncorderOffset2=EncorderOffset1+(32.091*EncorderParaTemp2*(450-240))/1000;
 882   2            EncorderOffset3=EncorderOffset2+(33.504*EncorderParaTemp3*(780-450)/1000);
 883   2          #endif
 884   2          #if 0
                    Printf("\r\nEncorderOffset1=%d ",(WORD)(EncorderOffset1*100));
                    Printf("\r\nEncorderOffset2=%d ",(WORD)(EncorderOffset2*100));
                    Printf("\r\nEncorderOffset3=%d ",(WORD)(EncorderOffset3*100));
                  #endif
 889   2            //Printf("\r\nEncorderOffset4=%d ",(WORD)(EncorderOffset4*100));
 890   2            
 891   2            if(EncorderCount_T>=0)
 892   2              {
 893   3              EncorderCountPN=0;
 894   3              EncorderCountTemp=(EncorderCount_T/2);
 895   3              }
 896   2            else
 897   2              {
 898   3              EncorderCountPN=1;
 899   3              EncorderCountTemp=(0-EncorderCount_T)/2;
 900   3              }
 901   2            
 902   2            //EncorderCountTemp+=450;
 903   2            //EncorderCount
 904   2          #if 0
                    if(EncorderCount>=0)
                      EncorderCountPN=0;
                    else
                      EncorderCountPN=1;
                  #endif
 910   2          #if 0
                    if(EncorderCountTemp>EncorderLen_Offset)
                      {
                      EncorderCountPN=0;
                      temp_EncorderCountTemp=EncorderCountTemp-EncorderLen_Offset;
                      }
                    else
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 16  

                      {
                      EncorderCountPN=1;
                      temp_EncorderCountTemp=EncorderLen_Offset-EncorderCountTemp;
                      }
                  #endif
 922   2            if(EncorderCountTemp<=240&&EncorderCountTemp>=0)
 923   2              {
 924   3              
 925   3            #if (HS_DEBUG==ON)
 926   3              Printf("\r\n(TELI)EncorderCountTemp=%d ",(WORD)EncorderCountTemp);
 927   3              Printf("\r\n(TELI)EncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
 928   3              Printf("\r\n(TELI)EncorderCountPN=%d ",(WORD)EncorderCountPN);
 929   3            #endif
 930   3              //if(EncorderCountPN==1)
 931   3            #if 0
                        EncorderLen=(30.625*EncorderParaTemp1*(temp_EncorderCountTemp))/1000;
                    #else
 934   3              EncorderLen=(30.625*EncorderParaTemp1*EncorderCountTemp)/1000;
 935   3            #endif
 936   3                //EncorderLen=(30.625*EncorderParaTemp1*(EncorderCountTemp-EncorderLen_Offset))/1000;
 937   3                
 938   3              //EncorderLen=(30.625*1*EncorderCountTemp)/1000;
 939   3              temp_val=30.625*EncorderParaTemp1*EncorderCountTemp;
 940   3              EncorderLenint=EncorderLen+0.05f;
 941   3              //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
 942   3              //EncorderLenint=EncorderLen;   
 943   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 944   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
 945   3              EncorderLenfloaat%=100;
 946   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
 950   3            #if 0
                      Printf("\r\nEncorderCountTemp=%d ",(WORD)EncorderCountTemp);
                      Printf("\r\nEncorderLen=%d ",(WORD)EncorderLen);
                      Printf("\r\nEncorderLenint=%d ",(WORD)EncorderLenint);      
                      Printf("\r\ntemp_val=%d ",(WORD)temp_val);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
 958   3              }
 959   2            else if(EncorderCountTemp>240&&EncorderCountTemp<=450)
 960   2              {
 961   3          
 962   3            #if 0
                      EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(temp_EncorderCountTemp-(240-EncorderLen_Offset)
             -)/1000);
                    #else
 965   3              EncorderLen=EncorderOffset1+(32.091*EncorderParaTemp2*(EncorderCountTemp-240)/1000);
 966   3            #endif
 967   3              
 968   3            #if (HS_DEBUG==ON)
 969   3              Printf("\r\n(TELI)temp_EncorderCountTemp=%d ",(WORD)(temp_EncorderCountTemp-(240-EncorderLen_Offset)))
             -;
 970   3              Printf("\r\n(TELI)EncorderLen_Offset=%d ",(WORD)EncorderLen_Offset);
 971   3              Printf("\r\n(TELI)temp_EncorderCountTemp=%d ",(WORD)temp_EncorderCountTemp);
 972   3              Printf("\r\n(TELI)EncorderLen=%d ",(WORD)EncorderLen);
 973   3              //EncorderLen=7.35+(32.091*1*(EncorderCountTemp-240)/1000);
 974   3              Printf("\r\n(TELI)EncorderCount_T=%d ",(WORD)EncorderCount_T);
 975   3            #endif
 976   3              EncorderLenint=EncorderLen+0.05f;     
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 17  

 977   3            #if (HS_DEBUG==ON)
 978   3              Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
 979   3            #endif
 980   3              //EncorderLenint=EncorderLen;
 981   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
 982   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
 983   3              EncorderLenfloaat%=100;
 984   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
 988   3              
 989   3            #if (HS_DEBUG==ON)
 990   3              Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
 991   3            #endif      
 992   3              }
 993   2          #if 1
 994   2            else if(EncorderCountTemp>450&&EncorderCountTemp<=780)
 995   2              {
 996   3            #if 0
                      EncorderLen=EncorderOffset2+(33.504*1*(temp_EncorderCountTemp-(450-EncorderLen_Offset))/1000);
                    #else     
 999   3              EncorderLen=EncorderOffset2+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
1000   3            #endif
1001   3              
1002   3            #if (HS_DEBUG==ON)
1003   3              Printf("\r\n(TELI)EncorderCount_T=%d ",(WORD)EncorderCount_T);
1004   3            #endif
1005   3              
1006   3              EncorderLenint=EncorderLen+0.05f;
1007   3              //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
1008   3              //EncorderLenint=EncorderLen;
1009   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1010   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
1011   3              EncorderLenfloaat%=100;
1012   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                    #endif
1016   3              
1017   3            #if (HS_DEBUG==ON)
1018   3              Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
1019   3            #endif
1020   3              }
1021   2          #else
                    else if(EncorderCountTemp>450&&EncorderCountTemp<=600)
                      {
                      EncorderLen=14.089+(33.504*EncorderParaTemp3*(EncorderCountTemp-450)/1000);
                      //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                
                      EncorderLenint=EncorderLen+0.05f;
                      //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                      //EncorderLenint=EncorderLen;
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                      }   
                    else if(EncorderCountTemp>600&&EncorderCountTemp<=780)
                      {
                      EncorderLen=19.089+(33.504*((EncorderParaTemp3+EncorderParaTemp4)/2)*(EncorderCountTemp-600)/1000);
                      //EncorderLen=14.089+(33.504*1*(EncorderCountTemp-450)/1000);
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 18  

                      Printf("\r\nEncorderCount=%d ",(WORD)EncorderCount);
                
                      EncorderLenint=EncorderLen+0.05f;
                      //Printf("\r\nEncorderLenTemp=%d ",(WORD)EncorderLenTemp);
                      //EncorderLenint=EncorderLen;
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                      EncorderLenfloaat%=10;
                      Printf("\r\nEncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                      }
                  #endif
1049   2            else if(EncorderCountTemp>780)
1050   2              {
1051   3            #if 0
                      EncorderLen=EncorderOffset3+(34.896*1*(EncorderCountTemp-(780-EncorderLen_Offset))/1000);
                    #else
1054   3              EncorderLen=EncorderOffset3+(34.896*EncorderParaTemp4*(EncorderCountTemp-780)/1000);
1055   3            #endif
1056   3        
1057   3            #if (HS_DEBUG==ON)  
1058   3              Printf("\r\n(TELI)EncorderCount_T=%d ",(WORD)EncorderCount_T);
1059   3        
1060   3              Printf("\r\n(TELI)EncorderLen=%d ",(WORD)EncorderLen);
1061   3            #endif
1062   3              EncorderLenint=EncorderLen+0.05f;
1063   3            #if (HS_DEBUG==ON)
1064   3              Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
1065   3            #endif
1066   3              //EncorderLenint=EncorderLen;
1067   3            #if (_2ND_DECIMAL==ON)//ryan@20200505
1068   3              EncorderLenfloaat=(EncorderLen+0.05)*100;
1069   3            #if (HS_DEBUG==ON)
1070   3              Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
1071   3            #endif
1072   3              EncorderLenfloaat%=100;
1073   3            #if (HS_DEBUG==ON)    
1074   3              Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
1075   3            #endif
1076   3            #else
                      EncorderLenfloaat=(EncorderLen+0.05)*10;
                    #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
                    #endif
                      EncorderLenfloaat%=10;      
                    #if (HS_DEBUG==ON)
                      Printf("\r\n(TELI)EncorderLenTemp=%d.%dm ",(WORD)EncorderLenint,(WORD)EncorderLenfloaat);
                    #endif
                    #endif      
1086   3              }
1087   2              
1088   2            ChangeKey=0;
1089   2            //param[0]=EncorderLenint;
1090   2            //param[1]=EncorderLenfloaat;
1091   2            //param[2]=EncorderCountPN;
1092   2            //protocol_send_cmd_with_param_num(0x0a, (BYTE *)param, 3);
1093   2            //protocol_send_cmd_with_param_num(0x80, (BYTE *)param, 3);
1094   2             if(GET_DVR_SystemReadyNotic()==_TRUE)
1095   2              {
1096   3             MCU_SendCmdToDVR(MCU_PROTOCOL_CMD_REGULAR_DATA);
1097   3              MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
1098   3              MCUTimerActiveTimerEvent(SEC(1), _SYSTEM_TIMER_EVENT_REPLAY_REGULAR_DATA);
1099   3              }
1100   2          #if (_DEBUG_EncorderHandler==ON)//ryan@20200505
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 19  

1101   2            Printf("\r\n(TELI)EncorderLenint=%d ",(WORD)EncorderLenint);
1102   2            Printf("\r\n(TELI)EncorderLenfloaat=%d ",(WORD)EncorderLenfloaat);
1103   2          #endif
1104   2          }
1105   1          //GetKey(0);
1106   1        }
1107          
1108            //bit CCFL_status;  
1109          void main_loop(void)
1110          {
1111   1      
1112   1        Printf("\r\nStart Main Loop...");
1113   1      
1114   1        if(bytFastEncoderMode==ON)
1115   1          {
1116   2          ulongRotateNumber=GetRotateNumber();
1117   2          Printf("\r\n(TELI Mode)");
1118   2          }
1119   1        else  
1120   1          Printf("\r\n(REX Mode)");
1121   1        
1122   1        //---------------------------------------------------------------
1123   1        //                   Main Loop
1124   1        //---------------------------------------------------------------
1125   1        while(1) 
1126   1        {
1127   2      
1128   2          #if (_DEBUG_MESSAGE_Monitor==ON)
1129   2          while( RS_ready() ) 
1130   2            Monitor();        // for new monitor functions    
1131   2          #endif      
1132   2      
1133   2          DvrReceivePaser();  
1134   2          SysTimerHandler();      
1135   2        //  SysJudgeHandler();  
1136   2          SysPowerHandler();  
1137   2          Scankey();
1138   2          
1139   2          if(bytFastEncoderMode==ON)
1140   2          EncorderHandler_TELI();
1141   2          else      
1142   2          EncorderHandler();
1143   2      
1144   2        
1145   2      
1146   2            if(PowerFlag==OFF)   //// POWEROFF
1147   2            break;
1148   2        
1149   2        }
1150   1      
1151   1      }
1152          
1153          void main(void)
1154          {
1155   1      
1156   1      InitCPU();
1157   1      
1158   1      SysPowerInitial();
1159   1      
1160   1      Printf("\r\nStart Boot...");
1161   1      
1162   1      main_init();
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 20  

1163   1      
1164   1      //set panel 
1165   1      //select UP
1166   1      SET_P_IO1();
1167   1      //Select Left
1168   1      SET_P_IO2();
1169   1      
1170   1      //variable initialize
1171   1      InitVars();
1172   1      
1173   1      //load eeprom data
1174   1      LoadEEPROM();
1175   1      
1176   1      //event initialize
1177   1      InitialTimerEvent();
1178   1      
1179   1      SetAD5110Step(CameraVolt);
1180   1       Printf("\r\n(CameraVolt=%d)",(WORD)CameraVolt);
1181   1      
1182   1      //if(PWR_START_flag==ON)
1183   1      //  PowerFlag=ON;
1184   1      
1185   1      if((GET_BATTERY_CAPACITY_LOW_FLAG()==_TRUE)&&(Check_ADAP_IN()==_FALSE))
1186   1        PowerFlag=OFF;
1187   1      
1188   1        if(PowerFlag==ON)
1189   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
1190   1      else
1191   1      {
1192   2        //UserInterfacePowerSwitch(_POWER_ACTION_AC_ON_TO_OFF);
1193   2        SET_POWER_STATUS(_POWER_STATUS_NORMAL); 
1194   2        SET_TARGET_POWER_STATUS(_POWER_STATUS_OFF);
1195   2        
1196   2      }
1197   1        RepeatKey=OFF;  
1198   1      //   SysJudgeStateChangeEvent(_MODE_STATUS_POWER_OFF);    
1199   1      
1200   1        while(1) {
1201   2          if(PowerFlag==ON)
1202   2          main_loop();    //exit when power off
1203   2          
1204   2          WaitPowerOn();
1205   2        }
1206   1      }
1207          
1208          void WaitPowerOn(void)
1209          {
1210   1      
1211   1        Printf("\r\n(Going to power off...)");
1212   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_OFF);
1213   1      
1214   1        if(GET_DVR_EntrySleepMode()==TRUE)
1215   1          CLR_DVR_EntrySleepMode();
1216   1      
1217   1        CLR_DVR_SystemReadyNotic(); 
1218   1        MCUTimerCancelTimerEvent( _SYSTEM_TIMER_EVENT_JUDGE_WDT_ECHO);    
1219   1        CLR_DVR_Shutdown();
1220   1        MCUTimerCancelTimerEvent( _USER_TIMER_EVENT_OSD_DVR_SHUTDOWN);
1221   1      
1222   1        //CLR_BATTERY_CAPACITY_HIGH_FLAG();
1223   1        Power_down_mode=_DontgoingToPD;
1224   1        P3M1=0x00;//p3.4 and P3.5 set output ryan@20210226
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 21  

1225   1        bytHoldOn3SPowerOff=OFF;
1226   1      
1227   1        if(bytFastEncoderMode==ON)
1228   1        SaveRotateNumber(ulongRotateNumber);
1229   1        
1230   1        while(1) 
1231   1        {
1232   2      
1233   2            
1234   2              #if (_DEBUG_MESSAGE_Monitor==ON)
1235   2              while( RS_ready() ) 
1236   2              Monitor();        // for new monitor functions    
1237   2              #endif  
1238   2      
1239   2            SysPowerHandler();  
1240   2            SysTimerHandler();
1241   2            Scankey();
1242   2            
1243   2            if(PowerFlag==ON)   //// POWER-ON
1244   2            break;
1245   2      
1246   2            #if (_POWER_DOWN_ENABLE==ON)
1247   2      
1248   2            if((Power_down_mode==_DontgoingToPD)&&(GET_POWER_STATUS()==_POWER_STATUS_OFF)&&(GET_AC_PLUG()/*Check_AD
             -AP_IN()*/==_FALSE))
1249   2            {
1250   3            Power_down_mode=_ReadyToPD;
1251   3            MCUTimerActiveTimerEvent(SEC(10), _SYSTEM_TIMER_POWER_DOWN_MODE);
1252   3            } 
1253   2            else if((Check_ADAP_IN()==_TRUE)||(((~P4>>3)& 0x01) ))
1254   2              {
1255   3              Power_down_mode=_DontgoingToPD;
1256   3              MCUTimerCancelTimerEvent( _SYSTEM_TIMER_POWER_DOWN_MODE);
1257   3              }
1258   2            else  if(Power_down_mode==_GoingToPD)
1259   2              SET_MCU_POWER_DOWN_MODE();        
1260   2      
1261   2            #endif  
1262   2            
1263   2        }
1264   1      
1265   1      
1266   1        WriteEEP(EEP_PowerOffToOnflag,ON);
1267   1        EncorderCount=0;
1268   1        EncorderLenint=0;
1269   1        EncorderLenfloaat=0;
1270   1        EncorderCountPN=0;
1271   1         RS2_in=0; //clean DVR CMD.
1272   1        RS2_out=0;//clean DVR CMD.
1273   1        //CLR_BATTERY_CAPACITY_LOW_FLAG();  
1274   1              CLR_BATTERY_ABNORMAL();
1275   1        SET_BATTERY_CHARGE_STATE(_BATT_STATUS_NONE);
1276   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);  
1277   1        Printf("\r\n(Start up  Power On Mode...)");
1278   1      
1279   1        ISPCR = 0x20;/// reboot to AP.
1280   1      
1281   1      }
1282          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 16:41:58 PAGE 22  

   CODE SIZE        =   7482    ----
   CONSTANT SIZE    =    784    ----
   XDATA SIZE       =    121     148
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
