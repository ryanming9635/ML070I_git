C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CPU
OBJECT MODULE PLACED IN .\Output\CPU.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CPU.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\CPU.lst) TABS(2) OBJECT(.\Output\CPU.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  CPU.c                                                                               */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          #include<intrins.h>       ///_nop_(); 
   9          #include "config.h"
  10          #include "typedefs.h"
  11          #include "reg.h"
  12          #include "cpu.h"
  13          #include "main.h"
  14          #include "I2C.h"
  15          #include "Printf.h"
*** WARNING C320 IN LINE 44 OF .\Include\Printf.h: DEBUG is defined 
  16          #include "etc_eep.h"
  17          #include <math.h>
  18          #include "main.h"
  19          
  20          
  21          extern WORD g_usTimerCounter ;  
  22          extern StructPowerInfoType idata g_stPowerInfo;
  23          extern  BYTE DebugLevel;
  24          extern bit g_bNotifyTimer0Int;
  25          extern StructBatteryInfoType g_stBatteryInfo;
  26          extern WORD BatteryBTH;
  27          extern StructBatteryInfoType g_stBatteryInfo ;
  28          extern BYTE PowerFlag;
  29          extern BYTE Power_down_mode;
  30          extern BYTE DVRChangeCurrent;
  31          extern BYTE bytFastEncoderMode;
  32          
  33          
  34          BYTE   year1=0,year2=0,month=0,day=0,hour=0,minute=0,second=0;
  35          BYTE DVR_FACTORY_MODE=0;
  36          BYTE IE_Temp=0;
  37          //===================== Timer =================================================
  38              DATA WORD keytic=0;
  39              DATA BYTE Key=0;
  40              bit KeyReady=0, RepeatKey = ON;
  41          
  42              DATA BYTE tm001;
  43              DATA  WORD  stopWatch;
  44              DATA  WORD  tm01=0;
  45              DATA  BYTE  tic01=0,tic02=0;  //, tic_pc;
  46              DATA  WORD  tic_pc=0;
  47              DATA  DWORD tic_PWR_SAVING=0;
  48              DATA  DWORD tic_Init_time=0;
  49             volatile bit PWR_SAVING_ACT_FLAG=0;
  50              extern BYTE Power_Saving_Flag;
  51              extern bit PWR_OFF_KEY_LOCK;
  52              DATA DWORD  SystemClock;      //00:00
  53              BYTE FormatSDCard=1;
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 2   

  54          
  55          #ifdef SERIAL //=======================================================================
  56          
  57          
  58          
  59          
  60          static  DATA BYTE RS_buf[BUF_MAX];
  61               //     DATA BYTE     RS_buf2[BUF_MAX];
  62              DATA BYTE DVR_buf[DVR_BUF_MAX];
  63          
  64              
  65              DATA BYTE   RS_in, RS_out=0;
  66              DATA BYTE   RS2_in=0,RS2_out=0;
  67              bit         RS_Xbusy=0;     // bit RS_Xbusy=0;
  68              bit     RS2_Xbusy=0;    // bit RS_Xbusy=0;
  69              
  70          
  71          #endif  // SERIAL ======================================================================
  72          
  73          BYTE  keyticSec=0;
  74          BYTE  FormatWait=0;
  75          BYTE  PowerDownWait=0;
  76          BYTE  updn_reg[4]={0,0,0,0};
  77          
  78          bit ChangeKey;
  79          BYTE Time5ms;
  80          //BYTE FLASH_FLAG;
  81          BYTE bytHoldOn3SPowerOff=0;
  82          BYTE bytHoldOn3SPowerOffMode=0;
  83          WORD LED_FLASH_COUNT,Power_Msg_Count;
  84          short EncorderCount=0;
  85          BYTE bytEncorderCountTemp=0;
  86          extern DWORD ulongRotateNumber;
  87          
  88          extern BYTE   KeyBuffer;
  89          
  90          //=============================================================================
  91          //    Main Initialize Routine
  92          //=============================================================================
  93          void main_init (void)
  94          {
  95   1        DWORD rev;
  96   1      
  97   1        rev = GetFWRevEE();
  98   1      
  99   1      
 100   1        Printf("\r\nPrev.FW:%02x%02x%02x", (WORD) ReadEEP(EEP_FWREV_MAJOR), (WORD) ReadEEP(EEP_FWREV_MINOR1), (WO
             -RD) ReadEEP(EEP_FWREV_MINOR2));
 101   1      
 102   1      if( GetFWRevEE()!=((MCU_FW_Major<<16)|(MCU_FW_Sub0<<8)|(MCU_FW_Sub1)))
 103   1          {
 104   2          Printf("\r\nCurr.FW:%02x%02x%02x",(WORD) MCU_FW_Major,(WORD) MCU_FW_Sub0,(WORD) MCU_FW_Sub1);
 105   2          SaveFWRevEE();
 106   2          Printf("\r\nCurr.FW:%02x%02x%02x",(WORD) ReadEEP(EEP_FWREV_MAJOR), (WORD) ReadEEP(EEP_FWREV_MINOR1), (WO
             -RD) ReadEEP(EEP_FWREV_MINOR2));   
 107   2          }
 108   1      
 109   1        //---------- if FW version is not matched, initialize EEPROM data -----------
 110   1      
 111   1        if(GetFWRevEE()==((MCU_FW_Major<<16)|(MCU_FW_Sub0<<8)|(MCU_FW_Sub1))) 
 112   1        {         // exist EEPROM
 113   2      
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 3   

 114   2          //if( rev !=((MCU_FW_Major<<16)|(MCU_FW_Sub0<<8)|(MCU_FW_Sub1)) )
 115   2            {
 116   3              if(GetProjectNameEE()==_FALSE)
 117   3              ClearBasicEE();
 118   3            }
 119   2        }
 120   1        else 
 121   1        {
 122   2          Printf("\r\nCannot access EEPROM!!!!");
 123   2          Printf("\r\nNo initialize");
 124   2          DebugLevel = 0xff;
 125   2          return;
 126   2        }
 127   1        
 128   1        delay(100);
 129   1      
 130   1      
 131   1        SET_POWER_STATUS(_POWER_STATUS_OFF);
 132   1        SET_TARGET_POWER_STATUS(_POWER_STATUS_NORMAL);
 133   1      
 134   1      }
 135          
 136          
 137          
 138          
 139          //=============================================================================
 140          //                            Initialize WINBOND CPU                                                   
 141          //=============================================================================
 142          void InitCPU(void)
 143          {
 144   1        /*----- Initialize interrupt -------------*/
 145   1      
 146   1      //  TH1 = 0xfD;//38400    //    SMOD = 0      SMOD =1 //andy AWT 980924         
 147   1        TH1 = 0xf4; //9600    //    SMOD = 0      SMOD =1 //andy AWT 980924         
 148   1                  // 0ffh :57600 bps        
 149   1                  // 0fdh : 9600 bps  
 150   1                  //0fdh :19200 bps       
 151   1                  // 0fah : 4800 bps                
 152   1                  // 0f4h : 2400 bps                
 153   1                  // 0e8h : 1200 bps                
 154   1      
 155   1        SCON = 0x50;    // 0100 0000 mode 1 - 8 bit UART        
 156   1                  // Enable serial reception            
 157   1          TMOD = 0x22;    // 0010 0010 timer 0 - 8 bit auto reload    
 158   1                  // timer 1 - baud rate generator        
 159   1          TCON = 0x55;    // 0101 0001 timer 0,1 run            
 160   1                  // int 0,  edge triggered           
 161   1                  // int 1,  edge triggered           
 162   1                  // TF1 TR1 TF0 TR0  EI1 IT1 EI0 IT0       
 163   1      #if (_1KHZ_PWM==ON) 
              TH0 = TL0 = (255-6);  // PWM 1Khz frequency
              
              #else
 167   1        TH0 = TL0 = (64);   // 64=4608 Hz at 11.0592MHz
 168   1      #endif
 169   1        PCON = 0x80;    // 0000 0000 SMOD(double baud rate bit) = 1   
 170   1        IP   = 0x02;    // 0000 0000 interrupt priority         
 171   1                  // -  - PT2 PS PT1 PX1 PT0 PX0               
 172   1      
 173   1        #ifdef SERIAL
 174   1        IE   = 0x92;    // 1001 0010 interrupt enable:Serial,TM0    
 175   1                    // EA - ET2 ES ET1 EX1 ET0 EX0          
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 4   

 176   1      
 177   1        TI   = 1;     // LJY000724 // For Starting Serial TX 
 178   1        ES   = 1;     // LJY000724
 179   1        #else
                IE   = 0x82;
                #endif // SERIAL
 182   1      
 183   1        //------------ Timer 2 for Remocon --------------------------------
 184   1        #if (_1KHZ_PWM==ON)
                TL2=0x64-20;//0xE3;
                TH2=0xFF;
                RCAP2L=0x64-20;//0xE3;
                RCAP2H=0xFF;
              
                T2CON  = 0x00;        // Timer2 Clear
                TR2    = 0;
                ET2    = 1;
              
                T2CON = 0x04;       // Timer2 run
                AUXR |=0x80;  //Timer1 for UART2  
                #else
 197   1        T2CON  = 0x00;        // Timer2 Clear
 198   1        TR2    = 0;
 199   1        ET2    = 1;
 200   1        #endif
 201   1        //-----------------------------------------------------------------
 202   1      
 203   1        //Uart2
 204   1        //P0M0=0x7F;
 205   1        //P1M0=0x04;
 206   1             S2CON=0x50;                                 //Set UART Mode 1
 207   1             S2BRT=0xf4;                                 //Set 2UART overflow rate
 208   1            //AUXR2=0x08;                                 //SMOD = 1,TX12 = 0 (/12)
 209   1            //AUXR2|=0x10;                                //S2TR = 1
 210   1        AUXR2 |= 0x18;
 211   1      
 212   1        // Enable serial interrupt
 213   1        AUXIE |= 0x10;///EX2=1
 214   1      
 215   1        RS2_Xbusy=0;
 216   1        //PCA counter..
 217   1        CL=0; 
 218   1        CH=0;
 219   1        //AUXR2|=0x80;  //Fosc/12 for timer-0
 220   1        //CMOD=0x00; // //PCA clock is Sysclk / 12   7.2KHz
 221   1        //CMOD=0x02; // //PCA clock is Sysclk / 2   //43Khz
 222   1        CMOD=0x04; // //PCA clock is timer0  37HZ
 223   1        CCON|=  0x40;       //PCA Run
 224   1        //set pwm port 1.4 & 1.5
 225   1          //PCAPWM3 = 0x80;
 226   1      
 227   1        //P1M0=0x80;          //set input p1.6 
 228   1        //P1M0=0xC0;///add ADC AIN P1.6 & P1.7  (input mode)
 229   1          //P2M0=0x01;
 230   1        //P2M1=0x01;
 231   1        //P3M0=0x00;
 232   1        //P3M1=0x20;
 233   1        P0M0|=0x20|0x80;  //p0_5  //P0_7
 234   1      
 235   1        //P1M0|=0x04|0x40|0x20; ////set input p1.6 and P1.5 for adc function
 236   1        P1M0|=(0x04|0x80|0x40);///adc p1.7,P1.6
 237   1          
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 5   

 238   1        P2M1=0x40;    //|P2_6 set push pull mode ryan@20210312
 239   1      
 240   1        P3M0=0x0C;
 241   1        P3M1=0x00;//|0x30;//p3.4 and P3.5 set push pull mode ryan@20210222
 242   1        P4M0=0x0C;
 243   1        P4M1=0x00;
 244   1      
 245   1      }
 246          
 247          #if (_POWER_DOWN_ENABLE==ON)
 248          void SET_MCU_POWER_DOWN_MODE(void)
 249          {
 250   1      
 251   1        Printf("(SET_MCU_POWER_DOWN_MODE) ");
 252   1      
 253   1         EX2 = 1;
 254   1         IE2 = 0;  ///INT2 wakeup
 255   1         IT2=1;
 256   1      
 257   1        EX3 = 1;
 258   1        IE3= 0;  ///INT3 wakeup
 259   1        IT3=1;
 260   1      
 261   1        IE_Temp=IE;
 262   1        IE=0x80;
 263   1      
 264   1        Power_down_mode=1;
 265   1        P4_0 = 1; //LED RED off
 266   1        P4_1 = 1; //LED GREEN off
 267   1        PCON=0x82;  //inter power down  mode
 268   1        _nop_(); 
 269   1        _nop_(); 
 270   1        _nop_(); 
 271   1      
 272   1      //  InitCPU();
 273   1      
 274   1      }
 275          #endif
 276          
 277          BYTE Check_ADAP_IN(void)  
 278          {
 279   1      
 280   1      if((GET_ADAP_12()==_TRUE)||(P4_2==0))   
 281   1      {
 282   2        MCUTimerDelayXms(50);
 283   2        
 284   2        if((GET_ADAP_12()==_TRUE)||(P4_2==0))   
 285   2          return _TRUE;
 286   2        else
 287   2          return _FALSE;
 288   2      }
 289   1      else
 290   1        return _FALSE;
 291   1      }
 292          
 293          void SET_PWM(BYTE index, BYTE val)
 294          {
 295   1      //#if (_DEBUG_MESSAGE_PWM_TEST)
 296   1        Printf("\r\n(SET_PWM=%02x val=%02x)",(WORD)index,(WORD)val);
 297   1      //#endif
 298   1      switch(index)
 299   1      {
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 6   

 300   2      case _CHG_CURR:  //P1_4
 301   2        #if 1
 302   2          CCAP2L=0x80;  
 303   2          CCAP2H =255-val;  
 304   2          CCAPM2=0x42;
 305   2      
 306   2            if(val==_CHARGE1100mA)
 307   2            {
 308   3            CCAPM2=0x00;  
 309   3            P1_4=0;
 310   3            }
 311   2            
 312   2          if(DVRChangeCurrent==0x10)  
 313   2            {     
 314   3            CCAP2L=0x80;  
 315   3            CCAP2H =255-_CHARGE300mA; 
 316   3            CCAPM2=0x42;  
 317   3            Printf("(*DVRChangeCurrent=300mA)");
 318   3            }
 319   2          else if(DVRChangeCurrent==0x11) 
 320   2            {
 321   3            CCAP2L=0x80;  
 322   3            CCAP2H =255-_CHARGE1000mA;  
 323   3            CCAPM2=0x42;  
 324   3            Printf("(*DVRChangeCurrent=1000mA)");
 325   3            }
 326   2          
 327   2      /*  
 328   2          if(val==High_Current)
 329   2            {
 330   2            CCAPM2=0x00;  
 331   2            P1_4=0;
 332   2            }
 333   2      
 334   2          else
 335   2            {
 336   2            CCAPM2=0x00;  
 337   2            P1_4=1;
 338   2      
 339   2            }
 340   2      */
 341   2        #else
                  #if 0
                  if(val==High_Current)
                    P1_4=0;
                  else
                    P1_4=1;
                  #else
                    CCAP2L=0x80;  
                    CCAP2H =255-val;  
                    CCAPM2=0x42;    
              
                    if(val==High_Current)
                      {
                      CCAPM2=0x00;  
                      P1_4=0;
                      }
                #endif    
                  #endif
 359   2             break; 
 360   2       case _BL_PWM:  //P1_5
 361   2             CCAP3L=0x80;  
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 7   

 362   2             CCAP3H =255-val;  
 363   2            CCAPM3=0x42;        
 364   2             break;
 365   2       case _RUN_PWM:
 366   2            CCON  |=  0x40;       //RUN  PCA Counter  
 367   2            break;
 368   2       case _STOP_PWM:
 369   2            CCON  &=  ~(0xBF);        //STOP PCA Counter
 370   2                break;
 371   2        
 372   2      default: 
 373   2            break;
 374   2      }
 375   1      
 376   1      
 377   1      }
 378          
 379          
 380          #define _ReadKey()     ((~P4>>3)& 0x01)  //PSW P4.3
 381          
 382          
 383          ////////////////////////////////
 384          
 385          //INTERRUPT(1, timer0_int)
 386          void timer0_int(void) interrupt 1 using 1     // interrupt number1, bank register 2
 387          {
 388   1      
 389   1       #if  (_1KHZ_PWM==ON)
               #else
 391   1      BYTE TempKey;
 392   1      
 393   1        tm001++;
 394   1      
 395   1            //Timer Counter 
 396   1          tic02++;
 397   1        
 398   1      
 399   1        if(tic02>=10)   
 400   1        {
 401   2        g_usTimerCounter += 1;     ///per 103us  interrupt
 402   2        tic02=0;
 403   2        g_bNotifyTimer0Int=_TRUE;
 404   2        } 
 405   1      
 406   1          if(Time5ms)
 407   1            Time5ms--;
 408   1          if(Time5ms==0)
 409   1          {
 410   2            //TempKey=(( (P2&0xC0) >> 6) & 0x03);
 411   2            TempKey=(( (P3&0x0C) >> 2) & 0x03); //ENA&ENB, P3.2, P3.3 
 412   2            if(updn_reg[3] !=TempKey )// (( (P2&0x60) >> 5) & 0x03))  //Abel for HS SW key ......951102                   
 413   2            {                                              
 414   3              updn_reg[0] = updn_reg[1];                                
 415   3              updn_reg[1] = updn_reg[2];                                
 416   3              updn_reg[2] = updn_reg[3];                                
 417   3              updn_reg[3] =TempKey;// ( (P2&0x60) >> 5) & 0x03; 
 418   3              ChangeKey=1;    
 419   3            //else      //william-v1.42-961130
 420   3            //ChangeKey=0;  //william-v1.42-961130
 421   3          if(bytFastEncoderMode==ON)  
 422   3            Time5ms=48/*12*/;
 423   3          else
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 8   

 424   3            Time5ms=48;
 425   3      
 426   3            if((updn_reg[0] == 0) && (updn_reg[1] == 1) && (updn_reg[2] == 3)&& (updn_reg[3] == 2))  //UP Key         
 427   3              {
 428   4                 EncorderCount++;        
 429   4                 bytEncorderCountTemp++;
 430   4              }
 431   3            if((updn_reg[0] == 1) && (updn_reg[1] == 3) && (updn_reg[2] == 2)&& (updn_reg[3] == 0))  //UP Key   
 432   3              {
 433   4                 EncorderCount++;      
 434   4                 bytEncorderCountTemp++;
 435   4              }
 436   3             if((updn_reg[0] == 3) && (updn_reg[1] == 2) && (updn_reg[2] == 0)&& (updn_reg[3] == 1))  //UP Key  
 437   3              {
 438   4                EncorderCount++;          
 439   4                bytEncorderCountTemp++;
 440   4              }
 441   3             if((updn_reg[0] == 2) && (updn_reg[1] == 0) && (updn_reg[2] == 1)&& (updn_reg[3] == 3))  //UP Key    
 442   3              {
 443   4                EncorderCount++;          
 444   4              bytEncorderCountTemp++;
 445   4              }
 446   3            if((updn_reg[0] == 0) && (updn_reg[1] == 2)&& (updn_reg[2] == 3)&& (updn_reg[3] == 1))  //DN Key   
 447   3              {
 448   4                 EncorderCount--;    
 449   4                 bytEncorderCountTemp++;
 450   4              }
 451   3             if((updn_reg[0] == 2) && (updn_reg[1] == 3)&& (updn_reg[2] == 1)&& (updn_reg[3] == 0))  //DN Key   
 452   3              {
 453   4                 EncorderCount--;                
 454   4                 bytEncorderCountTemp++;
 455   4              }
 456   3            if((updn_reg[0] == 3) && (updn_reg[1] == 1)&& (updn_reg[2] == 0)&& (updn_reg[3] == 2))  //DN Key  
 457   3              {
 458   4                 EncorderCount--;          
 459   4                 bytEncorderCountTemp++;
 460   4              }
 461   3            if((updn_reg[0] == 1) && (updn_reg[1] == 0)&& (updn_reg[2] == 2)&& (updn_reg[3] == 3))  //DN Key  
 462   3              {
 463   4                 EncorderCount--; 
 464   4                 bytEncorderCountTemp++;
 465   4              }
 466   3            
 467   3            if(bytEncorderCountTemp==200) 
 468   3              {
 469   4                ulongRotateNumber++;
 470   4                bytEncorderCountTemp=0;
 471   4              }
 472   3            }
 473   2          }
 474   1      
 475   1          //Kane @HS 2007 0814 Ver1.31<<<<
 476   1          
 477   1          //---------- 0.01 sec timer ------------
 478   1          
 479   1        #ifdef CLOCK_11M
                  if( tm001 > 48 ) {      // LJY001220 0.01sec
                #elif defined CLOCK_22M
 482   1          if( tm001 > ((48*2)) ) {    // LJY001220 0.01sec
 483   2        #endif
 484   2        
 485   2            stopWatch++;
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 9   

 486   2            tm001 = 0;
 487   2            tic01++;
 488   2          
 489   2            if( tic01==100 ) 
 490   2            {       // 1 sec
 491   3              
 492   3              tic01 = 0;
 493   3              //second++;
 494   3              
 495   3            if(Key)
 496   3              keyticSec++;
 497   3            else
 498   3              keyticSec=0;
 499   3        
 500   3            }
 501   2            if( tic_pc!=0xffff ) 
 502   2              tic_pc++;
 503   2        
 504   2        
 505   2        if(tic_Init_time)
 506   2          tic_Init_time--;
 507   2        if(Power_Msg_Count)
 508   2          Power_Msg_Count--;
 509   2      
 510   2        /////////////////////////////////////////// 
 511   2      #if 1
 512   2        #if 0
              if( _ReadKey() )
              {   if (keytic==50)
                  {
                  Key = ON;
                  RepeatKey = ON;
                  KeyReady = ON;
                  //keytic = 0;
                  }
                  else if( keytic==800 ) {//8sec into DVR factory mode
                  Key = ON;
                  RepeatKey = 1;
                  KeyReady = 1;
                  keytic = 0;///50;
                  DVR_FACTORY_MODE=ON;
                  }
                  
                keytic++;
              }
              else 
                {
                  /*
                  if( (keytic>=50)&&(DVR_FACTORY_MODE==OFF) ) {  //0.5sec push
                  Key = ON;
                  RepeatKey = OFF;
                  KeyReady = ON;
                  keytic = 0;
                  }
                  else
                    */
                  {
                  DVR_FACTORY_MODE=OFF;
                  keytic = 0;
                  Key=OFF;
                  }
                }
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 10  

                #else
 549   2       if( _ReadKey() )
 550   2      {   
 551   3          if (keytic==50)
 552   3          {
 553   4            if((PowerFlag==OFF)||(GET_POWER_STATUS()==_POWER_STATUS_SAVING))
 554   4            {
 555   5            Key = ON;
 556   5            RepeatKey=OFF;  
 557   5            KeyReady = ON;
 558   5            }
 559   4          }
 560   3          else if( (keytic==300)&& (bytHoldOn3SPowerOff==ON)&&(PowerFlag==ON))///hold on the switch for 3S that po
             -wer off
 561   3            {
 562   4              if(RepeatKey==ON)
 563   4              {
 564   5              Key = ON;
 565   5              KeyReady = ON;  
 566   5              bytHoldOn3SPowerOffMode=ON;
 567   5              RepeatKey=OFF;  
 568   5              }
 569   4            }
 570   3          else if( keytic==800 ) {//8sec into DVR factory mode  
 571   4      
 572   4            if(RepeatKey==ON)
 573   4            {
 574   5            Key = ON;
 575   5            KeyReady = ON;      
 576   5            DVR_FACTORY_MODE=ON;
 577   5            RepeatKey=OFF;  
 578   5            }
 579   4              
 580   4          keytic = 51;///51;
 581   4          }
 582   3          
 583   3        keytic++;
 584   3      }
 585   2      else 
 586   2        {
 587   3          if( (keytic>=50)&&(PowerFlag==ON)&&(RepeatKey==ON)) {  //0.5sec push
 588   4          Key = ON;
 589   4          KeyReady = ON;
 590   4          }
 591   3          else
 592   3          {
 593   4          Key=OFF;
 594   4          KeyReady = OFF;
 595   4          }
 596   3          
 597   3          RepeatKey = ON;
 598   3          keytic = 0;   
 599   3        } 
 600   2        #endif  
 601   2      #else
                if( _ReadKey() )
                {
                    if( keytic==800 ) {//8sec into DVR factory mode
                    Key = ON;
                    RepeatKey = 1;
                    KeyReady = 1;
                    keytic = 50;
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 11  

                    DVR_FACTORY_MODE=ON;
                    }
                  keytic++;
                }
                else 
                  {
                        if( (keytic>=50)&&(DVR_FACTORY_MODE==OFF) ) {  //0.5sec push
                    Key = ON;
                    RepeatKey = OFF;
                    KeyReady = ON;
                    keytic = 0;
                    }
                    else
                    {
                    DVR_FACTORY_MODE=OFF;
                    keytic = 0;
                    Key=OFF;
                    }
                  }
              #endif  
 629   2        /////////////////////////////////////////// 
 630   2        }
 631   1        #endif  
 632   1      }
 633          
 634          //=============================================================================//
 635          //                     ShowWorkTimer                                                                    //
 636          //=============================================================================//
 637          void ShowWorkingTimer(void)
 638          {
 639   1      WORD val;
 640   1      
 641   1        GraphicsPrint(RED,"\r\n==================================");
 642   1      
 643   1        if(day)
 644   1        {
 645   2        GraphicsPrint(YELLOW,"\r\nSystem has been working for %d days, %d hours, %d minutes and %d seconds",(WORD
             -)day,(WORD)hour,(WORD)minute,(WORD)second);
 646   2        }
 647   1        else if(hour)
 648   1        {
 649   2        GraphicsPrint(YELLOW,"\r\nSystem has been working for %d hours, %d minutes and %d seconds",(WORD)hour,(WO
             -RD)minute,(WORD)second);
 650   2        }
 651   1        else if(minute)
 652   1          {
 653   2          GraphicsPrint(YELLOW,"\r\nSystem has been working for %d minutes and %d seconds",(WORD)minute,(WORD)seco
             -nd);
 654   2          }
 655   1        else
 656   1          {
 657   2          GraphicsPrint(YELLOW,"\r\nSystem has been working for %d seconds",(WORD)second);
 658   2          }
 659   1      
 660   1        
 661   1      
 662   1        GraphicsPrint(GREEN,"\r\n(BatteryBTH=%d(%d.%dV))",(WORD)BatteryBTH\
 663   1            ,(WORD)((BatteryBTH*32)/10000)\
 664   1          ,(WORD)((BatteryBTH*32)%10000));
 665   1      
 666   1        if(GET_BTH_STATE()==_BATT_STATUS_TEMP_HIGH)
 667   1          GraphicsPrint(RED,"(TEMP_HIGH)");
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 12  

 668   1        else if(GET_BATTERY_HIGH_TMEP_WARN() ==_TRUE)
 669   1          GraphicsPrint(YELLOW,"(HIGH_TMEP_WARN)"); 
 670   1      /// else if((GET_BTH_STATE()==_BATT_STATUS_TEMP_LOW)||(BatteryBTH>=1010))
 671   1        else if((GET_BTH_STATE()==_BATT_STATUS_TEMP_LOW))
 672   1          GraphicsPrint(BLUE,"(TEMP_LOW)");
 673   1        else if(GET_BATTERY_LOW_TMEP_WARN() ==_TRUE)
 674   1          GraphicsPrint(YELLOW,"(LOW_TMEP_WARN)");  
 675   1        else 
 676   1          GraphicsPrint(GREEN,"(TEMP_NORMAL)");
 677   1        #if 0 
              GraphicsPrint(MAGENTA,"\r\n(BatteryCAP=%d(%d.%dV))",(WORD)GET_BATTERY_CAPACITY()\
                  ,(WORD)((GET_BATTERY_CAPACITY()*(32-1))/10000)\
                  ,(WORD)((GET_BATTERY_CAPACITY()*(32-1))%10000));
              #else
 682   1        if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)   
 683   1        {
 684   2        val=((((GET_BATTERY_CAPACITY()*32)-150)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)-150)%10000)/100);
 685   2        val=(val*(54+1))/100;
 686   2        
 687   2        }
 688   1        else
 689   1        {
 690   2        //val=((((GET_BATTERY_CAPACITY()*32)/*-800*/)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)/*-800*/)%10000)/
             -100);
 691   2        //val=(val*(54+1))/100;
 692   2      
 693   2        val=((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_BATTERY_CAPACITY()*59)/*-800*/)/100))+((((GET_B
             -ATTERY_CAPACITY()*59)/*-800*/)/100));
 694   2      
 695   2          if((val/1000))
 696   2          val=(val/10)+1;
 697   2          else 
 698   2          val=(val/10);
 699   2          
 700   2        //val=(GET_BATTERY_CAPACITY()*176/10000);
 701   2        //val=GET_BATTERY_CAPACITY();
 702   2        }
 703   1      
 704   1        GraphicsPrint(MAGENTA,"\r\n(BatteryCAP=%d(%d.%04dV))(%dV)",(WORD)GET_BATTERY_CAPACITY()\
 705   1            ,(WORD)((GET_BATTERY_CAPACITY()*(32+1))/10000)\
 706   1            ,(WORD)(((GET_BATTERY_CAPACITY()*(32+1))/*-200*/)%10000),(WORD)val);
 707   1      #endif
 708   1      
 709   1        if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_HIGH_CHARGE)
 710   1          GraphicsPrint(GREEN,"(HIGH_CHARGE)"); 
 711   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_LOW_CHARGE)  
 712   1          GraphicsPrint(YELLOW,"(LOW_CHARGE)"); 
 713   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NORMAL_CHARGE) 
 714   1          GraphicsPrint(MAGENTA,"(NORMAL_CHARGE)"); 
 715   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_STOP_CHARGE) 
 716   1          GraphicsPrint(RED,"(STOP_CHARGE)"); 
 717   1        else if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT) 
 718   1          GraphicsPrint(RED,"(CHARGE_NO_BATT)"); 
 719   1      
 720   1         if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL0)
 721   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL0)");  
 722   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL1)
 723   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL1)");  
 724   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL2)
 725   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL2)");  
 726   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL3)
 727   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL3)");  
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 13  

 728   1      else   if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_LEVEL4)  
 729   1        GraphicsPrint(GREEN,"(_BATT_STATUS_CAPACITY_LEVEL4)");  
 730   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MIN)
 731   1        GraphicsPrint(BLUE,"(_BATT_STATUS_CAPACITY_MIN)");  
 732   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX)
 733   1        GraphicsPrint(CYAN,"(_BATT_STATUS_CAPACITY_MAX)");  
 734   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_MAX_STOP)
 735   1        GraphicsPrint(MAGENTA,"(_BATT_STATUS_CAPACITY_MAX_STOP)");  
 736   1      else if(GET_BATTERY_STATE()==_BATT_STATUS_CAPACITY_NO_STARTUP)
 737   1        GraphicsPrint(MAGENTA,"(BATTERY_CAPACITY_NO_STARTUP)"); 
 738   1      else   if(GET_BATTERY_STATE()==_BATT_STATUS_NO_BATT)  
 739   1        GraphicsPrint(RED,"(_BATT_STATUS_NO_BATT)");  
 740   1      
 741   1        if(GET_CHARGE_TMEP_ABNORMAL()==_TRUE)
 742   1          GraphicsPrint(RED,"(CHARGE_TMEP_ABNORMAL)");  
 743   1      
 744   1      if(GET_POWER_STATUS()==7) 
 745   1        GraphicsPrint(CYAN,"\r\n(_POWER_STATUS_SAVING)");
 746   1      else if(GET_POWER_STATUS()==1)  
 747   1        GraphicsPrint(CYAN,"\r\n(_POWER_STATUS_OFF)");
 748   1      else if(GET_POWER_STATUS()==2)  
 749   1        GraphicsPrint(CYAN,"\r\n(_POWER_STATUS_NORMAL)");
 750   1      else
 751   1      GraphicsPrint(CYAN,"\r\n(POWER_STATUS=%d)",(WORD)GET_POWER_STATUS());
 752   1      
 753   1      #if 0
              if(GET_BATTERY_CHARGE_STATE()==_BATT_STATUS_NO_BATT)   
              {
              val=((((GET_BATTERY_CAPACITY()*32)-150)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)-150)%10000)/100);
              val=(val*(54+1))/100;
              
              }
              else
              {
              val=((((GET_BATTERY_CAPACITY()*32)/*-800*/)/10000)*100)+((((GET_BATTERY_CAPACITY()*32)/*-800*/)%10000)/100
             -);
              val=(val*(54+1))/100;
              }
              #endif
 766   1      //GraphicsPrint(MAGENTA,"\r\n(BatteryCAP=%d(%dV))",(WORD)GET_BATTERY_CAPACITY(),(WORD)val);
 767   1      
 768   1      
 769   1      GraphicsPrint(RED,"\r\n==================================");
 770   1      
 771   1      }
 772          
 773          
 774          
 775          
 776          //------------------------------------------------------------------
 777          // void InitVars(void) - variable initialize
 778          //------------------------------------------------------------------
 779          void  InitVars(void)
 780          {
 781   1      BYTE j;
 782   1      for(j=0;j<29;j++)
 783   1          DVR_buf[j] = 0 ;  
 784   1      
 785   1      }
 786          
 787          
 788          //=============================================================================
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 14  

 789          //                            Power LED ON / OFF                                                   
 790          //=============================================================================
 791          void PowerLED(EnumSystemTimerEventID flag)
 792          {
 793   1         
 794   1       switch(flag)
 795   1         { 
 796   2      case   _SYSTEM_TIMER_EVENT_GRN_RED_OFF:
 797   2        CLR_RED();
 798   2        CLR_GREEN();
 799   2        break;
 800   2      case _SYSTEM_TIMER_EVENT_GRN_OFF_RED_ON:
 801   2        CLR_GREEN();
 802   2        SET_RED();
 803   2        break;
 804   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_OFF:
 805   2           SET_GREEN();
 806   2           CLR_RED();
 807   2        break;
 808   2         case _SYSTEM_TIMER_EVENT_GRN_RED_ON:
 809   2          SET_GREEN();
 810   2          SET_RED();
 811   2          break;
 812   2         case _SYSTEM_TIMER_EVENT_GRN_BLINK:
 813   2                    if(GET_GREEN())     
 814   2            {
 815   3          SET_GREEN();
 816   3          CLR_RED();
 817   3            }
 818   2          else
 819   2          {
 820   3          CLR_GREEN();
 821   3          CLR_RED();
 822   3          }
 823   2          break;
 824   2         case _SYSTEM_TIMER_EVENT_RED_BLINK:    
 825   2             if(GET_RED())
 826   2            {
 827   3           SET_RED();
 828   3           CLR_GREEN();
 829   3            }
 830   2          else
 831   2          {
 832   3          CLR_GREEN();
 833   3          CLR_RED();
 834   3          }
 835   2          break;  
 836   2        case _SYSTEM_TIMER_EVENT_GRN_RED_BLINK:
 837   2                      if(GET_GREEN())     
 838   2            {
 839   3          SET_GREEN();
 840   3          SET_RED();
 841   3            }
 842   2          else
 843   2          {
 844   3          CLR_GREEN();
 845   3          CLR_RED();
 846   3          }
 847   2         break;  
 848   2         case _SYSTEM_TIMER_EVENT_GRN_ON_RED_BLINK:
 849   2          if(GET_RED())
 850   2            {
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 15  

 851   3          SET_RED();
 852   3            }
 853   2            else
 854   2            {
 855   3            CLR_RED();
 856   3            }
 857   2          
 858   2            SET_GREEN();
 859   2      
 860   2         break;   
 861   2        case _SYSTEM_TIMER_EVENT_GRN_2S_BLINK_RED_ON:
 862   2          if(GET_GREEN())
 863   2            {
 864   3          SET_GREEN();
 865   3            }
 866   2            else
 867   2            {
 868   3            CLR_GREEN();
 869   3            }
 870   2          
 871   2            SET_RED();
 872   2      
 873   2          
 874   2          break;
 875   2         default:
 876   2                  break;
 877   2       }  
 878   1      }
 879          
 880          
 881          //------------------------ common routines with interrupts --------------------
 882          
 883          /*****************************************************************************/
 884          /*      Ext Int 1 Interrupt                                                  */
 885          /*****************************************************************************/
 886          //INTERRUPT(2, ext1_int)
 887          void  ext1_int(void) interrupt 2 using 1
 888          {
 889   1        EX1 = 0;
 890   1      }
 891          
 892          //****************************************************************************/
 893          //      Timer 0 Interrupt                                                  
 894          //      If TL0 overflow,
 895          //       .Invoke this interrupt
 896          //       .TL0 <- TH0
 897          //      TL0 is incremented every machine cycle
 898          //      Every machine cycle is 12*Tosc(11.0592MHz)
 899          //
 900          //      Every machine cycle = 1.085us
 901          //      Interrupt interval = 208us ( 1.085*(256-64(TH0)) )
 902          //      When tm001==48, it's 0.01sec.  48*208us
 903          //              
 904          //****************************************************************************/
 905          
 906          
 907          //*****************************************************************************
 908          //      Serial Interrupt                                                   
 909          //*****************************************************************************
 910          #ifdef SERIAL
 911          
 912          //INTERRUPT(4, serial_int)
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 16  

 913          void serial_int(void) interrupt 4 using 1   // register bank 1
 914          {
 915   1        
 916   1        //day++;
 917   1        //year2=RI;
 918   1        //year1=TI;
 919   1        if( RI ) {          //--- Receive interrupt ----
 920   2          #if 0///def Hs_debug
                    RS_buf[RS_in]=SBUF;
                    RS_in++;
                    if( RS_in>=BUF_MAX) RS_in = 0;
                  #else
 925   2          
 926   2            #ifdef USE_HI3521_UART2
                    #else
 928   2            RS_buf[RS_in]= SBUF;//andy awt 980928
 929   2                RS_in++;
 930   2            if( RS_in>=DVR_BUF_MAX) RS_in = 0;
 931   2            #endif  
 932   2          
 933   2          #endif
 934   2          RI = 0;
 935   2          //month++;
 936   2        }
 937   1      
 938   1        if( TI ) {          //--- Transmit interrupt ----
 939   2          TI = 0;
 940   2          RS_Xbusy=0;
 941   2        }
 942   1      }
 943          
 944          #if 1
 945          //INTERRUPT(12, serial2_int)
 946          void serial2_int(void) interrupt 12 using 1   
 947          {
 948   1        //--- Receive interrupt ----
 949   1        //day++;
 950   1        //year2=S2CON&0x0f;
 951   1        if ((S2CON & 0x01) == 0x01)
 952   1          {         
 953   2          // Clear reception flag
 954   2          S2CON = S2CON&0xfe;
 955   2          //#ifdef USE_HI3521_UART2
 956   2          DVR_buf[RS2_in] = S2BUF;
 957   2          //#endif
 958   2          //month++;
 959   2            RS2_in++;
 960   2          if( RS2_in>=/*BUF_MAX*/DVR_BUF_MAX) RS2_in = 0;
 961   2        }
 962   1        
 963   1        if ((S2CON & 0x02) == 0x02)
 964   1        {
 965   2          S2CON = S2CON&0xfd;
 966   2          RS2_Xbusy = 0;
 967   2        }
 968   1      }
 969          
 970          #endif
 971          
 972          //=============================================================================
 973          //    Serial RX Check                            
 974          //=============================================================================
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 17  

 975          #if (_DEBUG_MESSAGE_Monitor==ON)
 976          
 977          BYTE RS_ready(void)
 978          {
 979   1        if( RS_in == RS_out ) return 0;
 980   1        else return 1;
 981   1      }
 982          
 983          //=============================================================================
 984          //    Serial RX                              
 985          //=============================================================================
 986          BYTE RS_rx(void)
 987          {
 988   1        BYTE  ret;
 989   1          
 990   1        ES = 0;
 991   1        ret = RS_buf[RS_out];
 992   1        RS_out++;
 993   1          if(RS_out >= BUF_MAX) 
 994   1          RS_out = 0;
 995   1        ES = 1;
 996   1      
 997   1        return ret;
 998   1      }
 999          #endif
1000          
1001          //=============================================================================
1002          //    Serial RX2 Check                           
1003          //=============================================================================
1004          BYTE RS2_ready(void)
1005          {
1006   1        if( RS2_in == RS2_out ) return 0;
1007   1        else return 1;
1008   1      }
1009          //=============================================================================
1010          //    Serial RX2                               
1011          //=============================================================================
1012          BYTE RS2_rx(void)
1013          {
1014   1        BYTE  ret;
1015   1          
1016   1        AUXIE&=0xEF;  //ES2=0
1017   1        ret = DVR_buf[RS2_out];
1018   1        RS2_out++;
1019   1          if(RS2_out >= DVR_BUF_MAX) 
1020   1          RS2_out = 0;
1021   1        AUXIE|=0x10;  //ES2=1
1022   1      
1023   1        return ret;
1024   1      }
1025          
1026          //=============================================================================
1027          //    Serial TX                              
1028          //=============================================================================
1029          #if (_DEBUG_MESSAGE_Monitor==ON)
1030          void RS_tx(BYTE tx_buf)
1031          {
1032   1        while(RS_Xbusy);
1033   1        SBUF = tx_buf;
1034   1        RS_Xbusy=1;
1035   1      }
1036          #endif
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 18  

1037          //=============================================================================
1038          //    Serial2 TX                               
1039          //=============================================================================
1040          
1041          void RS2_tx(BYTE tx_buf)
1042          {
1043   1      
1044   1        while(RS2_Xbusy); 
1045   1          S2BUF=tx_buf;
1046   1          RS2_Xbusy=1;
1047   1      }
1048          
1049          
1050          #endif  // SERIAL
1051          
1052          
1053          
1054          //****************************************************************************/
1055          //      Timer 2 Interrupt                                                  
1056          //      If TH2 and TL2 are overflowed,
1057          //       .Invoke this interrupt
1058          //       .TH2 <- RCAP2H
1059          //       .TL2 <- RCAP2L
1060          //      TL2 is incremented every machine cycle
1061          //      Every machine cycle is 12*Tosc(11.0592MHz)
1062          //
1063          //      Every machine cycle = 1.085us
1064          //      Interrupt interval  
1065          //        1) REMO_RC5 
1066          //          221.34us  ( 1.085*204 )   // (256-52) (0x10000-0xff34)
1067          //
1068          //          data length: 14bit (2sync bits, 1 control bit, 11 data bits) 24,889ms
1069          //
1070          //                +----+
1071          //          1 is coded:      |    |
1072          //                   +----+   
1073          //                  T    T
1074          //
1075          //                   +----+
1076          //          0 is coded: |    |
1077          //                      +----+    
1078          //                  T    T          T = 889us
1079          //
1080          //          *) DongYang
1081          //            209.62  ( 1.085*193 ) // (256-63) (0x10000-0xff3f)
1082          //-----------------------------------------------------------------------------
1083          //        2) REMO_NEC
1084          //          187.714us ( 1.085*173 )     // (256-83) (0x10000-0xff53)
1085          //              
1086          //****************************************************************************/
1087          //INTERRUPT(5, timer2_int)
1088          void timer2_int(void) interrupt 5 using 1     // using register block 3
1089          {
1090   1        #if  (_1KHZ_PWM==ON)
                BYTE TempKey;
              
                TF2 = 0;          // clear overflow
                      ET2=0;
              #if 1
                  tm001++;
                
                    //Timer Counter 
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 19  

                    tic02++;
                
                //  if(tic02>=(10*22))   
                    if(tic02>=(10))  
                  {
                  g_usTimerCounter += 1;     ///per 103us  interrupt
                  tic02=0;
                  g_bNotifyTimer0Int=_TRUE;
                  } 
              #endif
                //tm01++;
              
              #if 1
              
                    if(Time5ms)
                      Time5ms--;
              
                    if(Time5ms==0)
                    {
                      //TempKey=(( (P2&0xC0) >> 6) & 0x03);
                      TempKey=(( (P3&0x0C) >> 2) & 0x03); //ENA&ENB, P3.2, P3.3         
                      
                      if(updn_reg[3] !=TempKey )// (( (P2&0x60) >> 5) & 0x03))  //Abel for HS SW key ......951102                   
                      {                                              
                        updn_reg[0] = updn_reg[1];                                
                        updn_reg[1] = updn_reg[2];                                
                        updn_reg[2] = updn_reg[3];                                
                        updn_reg[3] =TempKey;// ( (P2&0x60) >> 5) & 0x03; 
                        ChangeKey=1;    
                      //else      //william-v1.42-961130
                      //ChangeKey=0;  //william-v1.42-961130
                      Time5ms=(48);
                  
                      if((updn_reg[0] == 0) && (updn_reg[1] == 1) && (updn_reg[2] == 3)&& (updn_reg[3] == 2))  //UP Key   
                           EncorderCount++;        
                      if((updn_reg[0] == 1) && (updn_reg[1] == 3) && (updn_reg[2] == 2)&& (updn_reg[3] == 0))  //UP Key   
                           EncorderCount++;      
                       if((updn_reg[0] == 3) && (updn_reg[1] == 2) && (updn_reg[2] == 0)&& (updn_reg[3] == 1))  //UP Key  
                          EncorderCount++;
                       if((updn_reg[0] == 2) && (updn_reg[1] == 0) && (updn_reg[2] == 1)&& (updn_reg[3] == 3))  //UP Key    
                        EncorderCount++;    
                       
                      if((updn_reg[0] == 0) && (updn_reg[1] == 2)&& (updn_reg[2] == 3)&& (updn_reg[3] == 1))  //DN Key   
                           EncorderCount--;    
                       if((updn_reg[0] == 2) && (updn_reg[1] == 3)&& (updn_reg[2] == 1)&& (updn_reg[3] == 0))  //DN Key   
                           EncorderCount--;     
                      if((updn_reg[0] == 3) && (updn_reg[1] == 1)&& (updn_reg[2] == 0)&& (updn_reg[3] == 2))  //DN Key  
                           EncorderCount--;
                      if((updn_reg[0] == 1) && (updn_reg[1] == 0)&& (updn_reg[2] == 2)&& (updn_reg[3] == 3))  //DN Key  
                           EncorderCount--; 
                
                      }
                      
                    }
                    
              #endif
              
              #if 1
                //---------- 0.01 sec timer ------------
                  
                #ifdef CLOCK_11M
                  if( tm001 > 48 ) {      // LJY001220 0.01sec
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 20  

                #elif defined CLOCK_22M
              //    if( tm001 > ((48*2)*22) ) {   // LJY001220 0.01sec
                  if( tm001 > ((48*2)) ) {  // LJY001220 0.01sec
                #endif
                
                    stopWatch++;
                    tm001 = 0;
                    tic01++;
                  
                    if( tic01==100 ) 
                    {       // 1 sec
                      
                      tic01 = 0;
                      //second++;
                      
                    if(Key)
                      keyticSec++;
                    else
                      keyticSec=0;
                
                    }
                    if( tic_pc!=0xffff ) 
                      tic_pc++;
                
                
                if(tic_Init_time)
                  tic_Init_time--;
                if(Power_Msg_Count)
                  Power_Msg_Count--;
              
                /////////////////////////////////////////// 
              
              #if 1
               if( _ReadKey() )
              {   
                  if (keytic==50)
                  {
                    if((PowerFlag==OFF)||(GET_POWER_STATUS()==_POWER_STATUS_SAVING))
                    {
                    Key = ON;
                    RepeatKey=OFF;  
                    KeyReady = ON;
                    }
                  }
                  else if( keytic==800 ) {//8sec into DVR factory mode  
              
                    if(RepeatKey==ON)
                    {
                    Key = ON;
                    KeyReady = ON;      
                    DVR_FACTORY_MODE=ON;
                    RepeatKey=OFF;  
                    }
                      
                  keytic = 51;///51;
                  }
                  
                keytic++;
              }
              else 
                {
                  if( (keytic>=50)&&(PowerFlag==ON)&&(RepeatKey==ON)) {  //0.5sec push
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 21  

                  Key = ON;
                  KeyReady = ON;
                  }
                  else
                  {
                  Key=OFF;
                  KeyReady = OFF;
                  }
                  
                  RepeatKey = ON;
                  keytic = 0;   
                } 
              #endif
              
                /////////////////////////////////////////// 
                }
              
              
              #endif
              
              TF2 = 0;  
              
              ET2=1;  
                #else
1247   1        TF2 = 0;          // clear overflow
1248   1      
1249   1        tm01++;
1250   1        #endif
1251   1      }
1252          
1253          void delay(BYTE cnt)
1254          {
1255   1        WORD ttic01;
1256   1      
1257   1        ttic01 =  ( tic01 + cnt ) % 100;
1258   1        do {
1259   2          ;
1260   2        } while( tic01 != ttic01 );
1261   1      }
1262          
1263          #if (_POWER_DOWN_ENABLE==ON)
1264          
1265          void int2_int(void) interrupt 6 using 1     // using register block 3
1266          {
1267   1        EX2=0;
1268   1        IE2=0;
1269   1        PCON=0x80;
1270   1        IE=IE_Temp;
1271   1        Power_down_mode=OFF;
1272   1      }
1273          
1274          void int3_int(void) interrupt 7 using 1     // using register block 3
1275          {
1276   1        EX3=0;
1277   1        IE3=0;
1278   1        PCON=0x80;
1279   1        IE=IE_Temp;
1280   1        Power_down_mode=OFF;
1281   1      }
1282          
1283          
1284          
C51 COMPILER V9.60.0.0   CPU                                                               04/07/2021 16:56:08 PAGE 22  

1285          
1286          #endif
1287          
1288          
1289          
1290          
1291          
1292          
1293          
1294          
1295          
1296          
1297          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2904    ----
   CONSTANT SIZE    =   1085    ----
   XDATA SIZE       =     27       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     88    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
